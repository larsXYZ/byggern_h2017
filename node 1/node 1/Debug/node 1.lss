
node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00002ef6  00002f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ef6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  008002d8  008002d8  00003162  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003162  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003e8  00000000  00000000  000031be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000483b  00000000  00000000  000035a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001488  00000000  00000000  00007de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016d4  00000000  00000000  00009269  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b24  00000000  00000000  0000a940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cdb  00000000  00000000  0000b464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002666  00000000  00000000  0000c13f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  0000e7a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_1>
       8:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__vector_2>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e6 ef       	ldi	r30, 0xF6	; 246
     6d4:	fe e2       	ldi	r31, 0x2E	; 46
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a8 3d       	cpi	r26, 0xD8	; 216
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	a8 ed       	ldi	r26, 0xD8	; 216
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a2 38       	cpi	r26, 0x82	; 130
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 85 11 	call	0x230a	; 0x230a <main>
     6f6:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <CAN_init>:
#include <avr/interrupt.h>

volatile int message_received = 0;

void CAN_init(char mode)
{
     6fe:	cf 93       	push	r28
     700:	c8 2f       	mov	r28, r24
	//Resets MCP-Values
	MCP_init();
     702:	0e 94 2b 05 	call	0xa56	; 0xa56 <MCP_init>
	
	//Sets receive control register, disables rollover for RX-buffer 0
	MCP_bit_modify(MCP_RXB0CTRL,0b01100000,0xFF);
     706:	4f ef       	ldi	r20, 0xFF	; 255
     708:	60 e6       	ldi	r22, 0x60	; 96
     70a:	80 e6       	ldi	r24, 0x60	; 96
     70c:	0e 94 30 05 	call	0xa60	; 0xa60 <MCP_bit_modify>

	//Interrupt when message is received
	MCP_bit_modify(MCP_CANINTE, 0x01, 0x01);
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	8b e2       	ldi	r24, 0x2B	; 43
     716:	0e 94 30 05 	call	0xa60	; 0xa60 <MCP_bit_modify>
	
	//Sets mode of operation
	switch (mode)
     71a:	cc 23       	and	r28, r28
     71c:	19 f0       	breq	.+6      	; 0x724 <CAN_init+0x26>
     71e:	c1 30       	cpi	r28, 0x01	; 1
     720:	39 f0       	breq	.+14     	; 0x730 <CAN_init+0x32>
     722:	0b c0       	rjmp	.+22     	; 0x73a <CAN_init+0x3c>
	{
		case CAN_MODE_LOOPBACK: //Loopback mode
		{
			MCP_bit_modify(MCP_CANCTRL,0xE0,(0x40));
     724:	40 e4       	ldi	r20, 0x40	; 64
     726:	60 ee       	ldi	r22, 0xE0	; 224
     728:	8f e0       	ldi	r24, 0x0F	; 15
     72a:	0e 94 30 05 	call	0xa60	; 0xa60 <MCP_bit_modify>
			break;
     72e:	05 c0       	rjmp	.+10     	; 0x73a <CAN_init+0x3c>
		}
		
		case CAN_MODE_NORMAL: //Normal operations
		{
			MCP_bit_modify(MCP_CANCTRL,0xE0,(0x00));
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	60 ee       	ldi	r22, 0xE0	; 224
     734:	8f e0       	ldi	r24, 0x0F	; 15
     736:	0e 94 30 05 	call	0xa60	; 0xa60 <MCP_bit_modify>
	}
	
	//Initializing interrupt
	#ifdef __AVR_ATmega162__
	
	MCUCR |= (1<<ISC01); 
     73a:	85 b7       	in	r24, 0x35	; 53
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     740:	8b b7       	in	r24, 0x3b	; 59
     742:	80 64       	ori	r24, 0x40	; 64
     744:	8b bf       	out	0x3b, r24	; 59
	
	EICRB |= (1<<ISC51); //Falling edge causes interrupt
	EIMSK |= (1<<INT5); //Sets PE5 as input for interrupts
	
	#endif
}
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <CAN_send_frame>:

void CAN_send_frame(struct can_frame* message)
{
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	7c 01       	movw	r14, r24
	
	//Sets ID
	MCP_write((message->id >> 3), MCP_TXB0SIDH); //Higher ID-bits 10 - 3
     758:	fc 01       	movw	r30, r24
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	95 95       	asr	r25
     764:	87 95       	ror	r24
     766:	95 95       	asr	r25
     768:	87 95       	ror	r24
     76a:	61 e3       	ldi	r22, 0x31	; 49
     76c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <MCP_write>
	MCP_write((message->id << 5), MCP_TXB0SIDL); //Lower ID-bits 2-0
     770:	f7 01       	movw	r30, r14
     772:	80 81       	ld	r24, Z
     774:	62 e3       	ldi	r22, 0x32	; 50
     776:	82 95       	swap	r24
     778:	88 0f       	add	r24, r24
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <MCP_write>
	
	//Sets Data length
	MCP_write(message->length, MCP_TXB0DLC);
     780:	65 e3       	ldi	r22, 0x35	; 53
     782:	f7 01       	movw	r30, r14
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	0e 94 d6 04 	call	0x9ac	; 0x9ac <MCP_write>
	
	//Sets Data bytes
	for (int i = 0; i < message->length; i++)
     78a:	f7 01       	movw	r30, r14
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	18 16       	cp	r1, r24
     790:	ac f4       	brge	.+42     	; 0x7bc <CAN_send_frame+0x72>
     792:	87 01       	movw	r16, r14
     794:	0d 5f       	subi	r16, 0xFD	; 253
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	6c 2f       	mov	r22, r28
     79e:	6a 5c       	subi	r22, 0xCA	; 202
	{
		MCP_write(message->data[i], MCP_TXB0D0 + i);
     7a0:	f8 01       	movw	r30, r16
     7a2:	81 91       	ld	r24, Z+
     7a4:	8f 01       	movw	r16, r30
     7a6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <MCP_write>
	
	//Sets Data length
	MCP_write(message->length, MCP_TXB0DLC);
	
	//Sets Data bytes
	for (int i = 0; i < message->length; i++)
     7aa:	21 96       	adiw	r28, 0x01	; 1
     7ac:	f7 01       	movw	r30, r14
     7ae:	22 81       	ldd	r18, Z+2	; 0x02
     7b0:	33 27       	eor	r19, r19
     7b2:	27 fd       	sbrc	r18, 7
     7b4:	30 95       	com	r19
     7b6:	c2 17       	cp	r28, r18
     7b8:	d3 07       	cpc	r29, r19
     7ba:	84 f3       	brlt	.-32     	; 0x79c <CAN_send_frame+0x52>
	{
		MCP_write(message->data[i], MCP_TXB0D0 + i);
	}
	
	//Sends
	MCP_RTS(0);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 04 05 	call	0xa08	; 0xa08 <MCP_RTS>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	08 95       	ret

000007d0 <__vector_1>:

//Enables interrupt vector

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
}

int CAN_int_vector()
{
	//Tell rest of the program we have mail
	message_received = 1;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	90 93 d9 02 	sts	0x02D9, r25
     7e6:	80 93 d8 02 	sts	0x02D8, r24

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
	CAN_int_vector();
}
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <CAN_receive_transmission>:
	CAN_int_vector();
}
#endif

struct can_frame CAN_receive_transmission()
{
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	2b 97       	sbiw	r28, 0x0b	; 11
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	7c 01       	movw	r14, r24
     822:	9e 01       	movw	r18, r28
     824:	25 5f       	subi	r18, 0xF5	; 245
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	fe 01       	movw	r30, r28
     82a:	34 96       	adiw	r30, 0x04	; 4
	
	//Temporary message
	struct can_frame temp;
	for (int i = 0; i < 7; i++) temp.data[i] = 0;
     82c:	11 92       	st	Z+, r1
     82e:	e2 17       	cp	r30, r18
     830:	f3 07       	cpc	r31, r19
     832:	e1 f7       	brne	.-8      	; 0x82c <CAN_receive_transmission+0x34>
	temp.id = -1;
	temp.length = 0;
	
	//Checks if we've got mail
	if (!message_received) return temp;
     834:	80 91 d8 02 	lds	r24, 0x02D8
     838:	90 91 d9 02 	lds	r25, 0x02D9
     83c:	89 2b       	or	r24, r25
     83e:	71 f4       	brne	.+28     	; 0x85c <CAN_receive_transmission+0x64>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	9f ef       	ldi	r25, 0xFF	; 255
     844:	9a 83       	std	Y+2, r25	; 0x02
     846:	89 83       	std	Y+1, r24	; 0x01
     848:	1b 82       	std	Y+3, r1	; 0x03
     84a:	8b e0       	ldi	r24, 0x0B	; 11
     84c:	fe 01       	movw	r30, r28
     84e:	31 96       	adiw	r30, 0x01	; 1
     850:	d7 01       	movw	r26, r14
     852:	01 90       	ld	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	8a 95       	dec	r24
     858:	e1 f7       	brne	.-8      	; 0x852 <CAN_receive_transmission+0x5a>
     85a:	4a c0       	rjmp	.+148    	; 0x8f0 <CAN_receive_transmission+0xf8>
	else
	{
		message_received = 0;
     85c:	10 92 d9 02 	sts	0x02D9, r1
     860:	10 92 d8 02 	sts	0x02D8, r1

		//Check ID
		temp.id = (MCP_read(MCP_RXB0SIDH) << 3);
     864:	81 e6       	ldi	r24, 0x61	; 97
     866:	0e 94 ee 04 	call	0x9dc	; 0x9dc <MCP_read>
     86a:	a8 2e       	mov	r10, r24
		temp.id += (MCP_read(MCP_RXB0SIDL) >> 5);
     86c:	82 e6       	ldi	r24, 0x62	; 98
     86e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <MCP_read>
	else
	{
		message_received = 0;

		//Check ID
		temp.id = (MCP_read(MCP_RXB0SIDH) << 3);
     872:	b1 2c       	mov	r11, r1
     874:	aa 0c       	add	r10, r10
     876:	bb 1c       	adc	r11, r11
     878:	aa 0c       	add	r10, r10
     87a:	bb 1c       	adc	r11, r11
     87c:	aa 0c       	add	r10, r10
     87e:	bb 1c       	adc	r11, r11
		temp.id += (MCP_read(MCP_RXB0SIDL) >> 5);
     880:	82 95       	swap	r24
     882:	86 95       	lsr	r24
     884:	87 70       	andi	r24, 0x07	; 7
     886:	a8 0e       	add	r10, r24
     888:	b1 1c       	adc	r11, r1
	
		//Data Length
		temp.length = (MCP_read(MCP_RXB0DLC));
     88a:	85 e6       	ldi	r24, 0x65	; 101
     88c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <MCP_read>
     890:	88 2e       	mov	r8, r24
		
		//Data batch
		for (int i = 0; i < temp.length; i++) temp.data[i] = MCP_read(MCP_RXB0DM + i);
     892:	18 16       	cp	r1, r24
     894:	ec f4       	brge	.+58     	; 0x8d0 <CAN_receive_transmission+0xd8>
     896:	cc 24       	eor	r12, r12
     898:	c3 94       	inc	r12
     89a:	d1 2c       	mov	r13, r1
     89c:	cc 0e       	add	r12, r28
     89e:	dd 1e       	adc	r13, r29
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	c8 0e       	add	r12, r24
     8a4:	d1 1c       	adc	r13, r1
     8a6:	c8 0c       	add	r12, r8
     8a8:	d1 1c       	adc	r13, r1
     8aa:	87 fc       	sbrc	r8, 7
     8ac:	da 94       	dec	r13
     8ae:	8e 01       	movw	r16, r28
     8b0:	0c 5f       	subi	r16, 0xFC	; 252
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
     8b4:	0f 2e       	mov	r0, r31
     8b6:	f6 e6       	ldi	r31, 0x66	; 102
     8b8:	9f 2e       	mov	r9, r31
     8ba:	f0 2d       	mov	r31, r0
     8bc:	89 2d       	mov	r24, r9
     8be:	0e 94 ee 04 	call	0x9dc	; 0x9dc <MCP_read>
     8c2:	f8 01       	movw	r30, r16
     8c4:	81 93       	st	Z+, r24
     8c6:	8f 01       	movw	r16, r30
     8c8:	93 94       	inc	r9
     8ca:	ec 15       	cp	r30, r12
     8cc:	fd 05       	cpc	r31, r13
     8ce:	b1 f7       	brne	.-20     	; 0x8bc <CAN_receive_transmission+0xc4>

		MCP_bit_modify(MCP_CANINTF,0x01, 0x00);
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	8c e2       	ldi	r24, 0x2C	; 44
     8d6:	0e 94 30 05 	call	0xa60	; 0xa60 <MCP_bit_modify>
		return temp;
     8da:	ba 82       	std	Y+2, r11	; 0x02
     8dc:	a9 82       	std	Y+1, r10	; 0x01
     8de:	8b 82       	std	Y+3, r8	; 0x03
     8e0:	8b e0       	ldi	r24, 0x0B	; 11
     8e2:	fe 01       	movw	r30, r28
     8e4:	31 96       	adiw	r30, 0x01	; 1
     8e6:	d7 01       	movw	r26, r14
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	8a 95       	dec	r24
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <CAN_receive_transmission+0xf0>
	}
}
     8f0:	c7 01       	movw	r24, r14
     8f2:	2b 96       	adiw	r28, 0x0b	; 11
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	9f 90       	pop	r9
     914:	8f 90       	pop	r8
     916:	08 95       	ret

00000918 <CAN_frame_init>:

struct can_frame CAN_frame_init(int id, uint8_t len)
{
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	2b 97       	sbiw	r28, 0x0b	; 11
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
	struct can_frame t;
	t.id = id;
	t.length = len;
	for (int i = 0; i < t.length; i++) t.data[i] = 0; //Initial value = 0
     92c:	14 16       	cp	r1, r20
     92e:	5c f4       	brge	.+22     	; 0x946 <CAN_frame_init+0x2e>
     930:	fe 01       	movw	r30, r28
     932:	34 96       	adiw	r30, 0x04	; 4
     934:	9f 01       	movw	r18, r30
     936:	24 0f       	add	r18, r20
     938:	31 1d       	adc	r19, r1
     93a:	47 fd       	sbrc	r20, 7
     93c:	3a 95       	dec	r19
     93e:	11 92       	st	Z+, r1
     940:	e2 17       	cp	r30, r18
     942:	f3 07       	cpc	r31, r19
     944:	e1 f7       	brne	.-8      	; 0x93e <CAN_frame_init+0x26>
	return t;
     946:	7a 83       	std	Y+2, r23	; 0x02
     948:	69 83       	std	Y+1, r22	; 0x01
     94a:	4b 83       	std	Y+3, r20	; 0x03
     94c:	2b e0       	ldi	r18, 0x0B	; 11
     94e:	fe 01       	movw	r30, r28
     950:	31 96       	adiw	r30, 0x01	; 1
     952:	dc 01       	movw	r26, r24
     954:	01 90       	ld	r0, Z+
     956:	0d 92       	st	X+, r0
     958:	2a 95       	dec	r18
     95a:	e1 f7       	brne	.-8      	; 0x954 <CAN_frame_init+0x3c>
}
     95c:	2b 96       	adiw	r28, 0x0b	; 11
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <CAN_handle_message>:
{
	return message_received;
}

void CAN_handle_message()
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	2b 97       	sbiw	r28, 0x0b	; 11
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
	
	//Collects the message
	struct can_frame message = CAN_receive_transmission();
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_receive_transmission>

	switch (message.id)
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	21 f4       	brne	.+8      	; 0x99a <CAN_handle_message+0x2c>
			break;
		}
		#elif __AVR_ATmega162__ //THESE IDS ARE ONLY RELEVANT FOR NODE 1
		case (ID_IR_SENSOR_TRIGGERED): //Ball is detected -> game over
		{
			printf("GAME OVER\n");
     992:	87 e6       	ldi	r24, 0x67	; 103
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <puts>
			break;
		}
		#endif
	}
	
}
     99a:	2b 96       	adiw	r28, 0x0b	; 11
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <MCP_write>:
	SPI_init();
	MCP_reset();
}

void MCP_write(char byte, char address)
{
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	c8 2f       	mov	r28, r24
     9b2:	d6 2f       	mov	r29, r22
	SPI_select_slave(1);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
	SPI_send_byte(MCP_WRITE);
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_send_byte(address);
     9c2:	8d 2f       	mov	r24, r29
     9c4:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_send_byte(byte);
     9c8:	8c 2f       	mov	r24, r28
     9ca:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_select_slave(0);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <MCP_read>:

char MCP_read(char address)
{
     9dc:	cf 93       	push	r28
     9de:	c8 2f       	mov	r28, r24
	SPI_select_slave(1);
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
	SPI_send_byte(MCP_READ); //Instruction
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_send_byte(address); //Address
     9ee:	8c 2f       	mov	r24, r28
     9f0:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	char received_message = SPI_receive_byte();
     9f4:	0e 94 5c 05 	call	0xab8	; 0xab8 <SPI_receive_byte>
     9f8:	c8 2f       	mov	r28, r24
	SPI_select_slave(0);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
	return received_message;
}
     a02:	8c 2f       	mov	r24, r28
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <MCP_RTS>:

void MCP_RTS(char buffer)
{
     a08:	cf 93       	push	r28
	//Creates the instruction
	char instr = 128;
	if (buffer == 0) instr += 1;
     a0a:	88 23       	and	r24, r24
     a0c:	31 f0       	breq	.+12     	; 0xa1a <MCP_RTS+0x12>
	else if (buffer == 1) instr += 2;
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	31 f0       	breq	.+12     	; 0xa1e <MCP_RTS+0x16>
	else if (buffer == 2) instr += 4;	
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	31 f0       	breq	.+12     	; 0xa22 <MCP_RTS+0x1a>
}

void MCP_RTS(char buffer)
{
	//Creates the instruction
	char instr = 128;
     a16:	c0 e8       	ldi	r28, 0x80	; 128
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <MCP_RTS+0x1c>
	if (buffer == 0) instr += 1;
     a1a:	c1 e8       	ldi	r28, 0x81	; 129
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <MCP_RTS+0x1c>
	else if (buffer == 1) instr += 2;
     a1e:	c2 e8       	ldi	r28, 0x82	; 130
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <MCP_RTS+0x1c>
	else if (buffer == 2) instr += 4;	
     a22:	c4 e8       	ldi	r28, 0x84	; 132

	//Sends instruction
	SPI_select_slave(1);
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
	SPI_send_byte(instr);
     a2c:	8c 2f       	mov	r24, r28
     a2e:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_select_slave(0);
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
}
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <MCP_reset>:

void MCP_reset()
{
	SPI_select_slave(1);
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
	SPI_send_byte(MCP_RESET);
     a46:	80 ec       	ldi	r24, 0xC0	; 192
     a48:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_select_slave(0);
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
     a54:	08 95       	ret

00000a56 <MCP_init>:
#include "MCP2515.h"
#include "SPI_driver.h"

void MCP_init()
{
	SPI_init();
     a56:	0e 94 4e 05 	call	0xa9c	; 0xa9c <SPI_init>
	MCP_reset();
     a5a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <MCP_reset>
     a5e:	08 95       	ret

00000a60 <MCP_bit_modify>:
	SPI_select_slave(0);
	return received_data;
}

void MCP_bit_modify(char address, char mask_byte, char data_byte)
{
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	18 2f       	mov	r17, r24
     a68:	d6 2f       	mov	r29, r22
     a6a:	c4 2f       	mov	r28, r20
	SPI_select_slave(1);
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
	SPI_send_byte(MCP_BITMOD); //Instruction
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_send_byte(address);
     a7a:	81 2f       	mov	r24, r17
     a7c:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_send_byte(mask_byte);
     a80:	8d 2f       	mov	r24, r29
     a82:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_send_byte(data_byte);
     a86:	8c 2f       	mov	r24, r28
     a88:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	SPI_select_slave(0);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 64 05 	call	0xac8	; 0xac8 <SPI_select_slave>
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	08 95       	ret

00000a9c <SPI_init>:

void SPI_init()
{
	
	//Sets SPI_MISO as output
	DDRB |= (1<<SPI_MOSI);
     a9c:	bd 9a       	sbi	0x17, 5	; 23
	
	//Sets SPI_SCK as output
	DDRB |= (1<<SPI_SCK);
     a9e:	bf 9a       	sbi	0x17, 7	; 23
	
	//Sets SPI_SS as output
	DDRB |= (1<<SPI_SS);
     aa0:	bc 9a       	sbi	0x17, 4	; 23
	#ifdef __AVR_ATmega2560__
	DDRB |= (1<<PB0); 
	#endif
	
	//Sets SPI_MISO as input
	DDRB &= ~(1<<SPI_MISO);
     aa2:	be 98       	cbi	0x17, 6	; 23
	
	//Enables master mode
	SPCR |= (1<<MSTR);
     aa4:	6c 9a       	sbi	0x0d, 4	; 13

	//Sets leading and trailing edge config, Sets transmittion rate, MCP2515 wants under 10 MHz -> f_osc / 64 is fine
	SPCR |= (0<<CPOL) | (0<<CPHA) | (1<<SPR1);
     aa6:	69 9a       	sbi	0x0d, 1	; 13
	
	//Enables SPI
	SPCR |= (1<<SPE);
     aa8:	6e 9a       	sbi	0x0d, 6	; 13
     aaa:	08 95       	ret

00000aac <SPI_send_byte>:
}

int SPI_send_byte(uint8_t message)
{
	//Puts message in SPI DATA REGISTER
	SPDR = message;
     aac:	8f b9       	out	0x0f, r24	; 15
	
	//Waits for transmission to complete
	while (!(SPSR & (1<<SPIF)));
     aae:	77 9b       	sbis	0x0e, 7	; 14
     ab0:	fe cf       	rjmp	.-4      	; 0xaae <SPI_send_byte+0x2>
	
	return 0;
}
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <SPI_receive_byte>:

int SPI_receive_byte()
{
	//Dummy data
	SPI_send_byte(0xFF);
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_send_byte>
	
	//Waits for transmission to complete
	while(!(SPSR & (1<<SPIF)));
     abe:	77 9b       	sbis	0x0e, 7	; 14
     ac0:	fe cf       	rjmp	.-4      	; 0xabe <SPI_receive_byte+0x6>
	
	//Returns whats in the data register
	return SPDR;
     ac2:	8f b1       	in	r24, 0x0f	; 15
}
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	08 95       	ret

00000ac8 <SPI_select_slave>:

void SPI_select_slave(int mode)
{
	if (mode == 1)
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	91 05       	cpc	r25, r1
     acc:	11 f4       	brne	.+4      	; 0xad2 <SPI_select_slave+0xa>
	{
		//Selects slave
		PORTB &= ~(1<<SPI_SS);
     ace:	c4 98       	cbi	0x18, 4	; 24
     ad0:	08 95       	ret
	}
	else if (mode == 0)
     ad2:	89 2b       	or	r24, r25
     ad4:	09 f4       	brne	.+2      	; 0xad8 <SPI_select_slave+0x10>
	{
		//Deselects slave
		PORTB |= (1<<SPI_SS);
     ad6:	c4 9a       	sbi	0x18, 4	; 24
     ad8:	08 95       	ret

00000ada <UART_send>:
}

void UART_send(unsigned char message)
{
	//Waiting for data buffer to be ready
	while ( !( UCSR0A & (1<<UDRE0)) ){;}
     ada:	5d 9b       	sbis	0x0b, 5	; 11
     adc:	fe cf       	rjmp	.-4      	; 0xada <UART_send>
	
	//Fills data buffer
	UDR0 = message;
     ade:	8c b9       	out	0x0c, r24	; 12
     ae0:	08 95       	ret

00000ae2 <UART_init>:

static FILE usart_stdout = FDEV_SETUP_STREAM(UART_send, NULL, _FDEV_SETUP_WRITE);

void UART_init(int baudrate)
{
	uint16_t MYUBRR = (F_CPU/16/baudrate)-1;
     ae2:	9c 01       	movw	r18, r24
     ae4:	44 27       	eor	r20, r20
     ae6:	37 fd       	sbrc	r19, 7
     ae8:	40 95       	com	r20
     aea:	54 2f       	mov	r21, r20
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 eb       	ldi	r23, 0xB0	; 176
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 45 14 	call	0x288a	; 0x288a <__udivmodsi4>
     af8:	21 50       	subi	r18, 0x01	; 1
     afa:	31 09       	sbc	r19, r1
	
	//Setting baud rate
	UBRR0H = (unsigned char)(MYUBRR >>8);
     afc:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char)(MYUBRR );
     afe:	29 b9       	out	0x09, r18	; 9
	
	//Enabling interrupts
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     b00:	88 e1       	ldi	r24, 0x18	; 24
     b02:	8a b9       	out	0x0a, r24	; 10
	
	//Setting frame format
	#ifdef __AVR_ATmega162__
	UCSR0C = (1<<URSEL0) | (1<<UCSZ00) | (1<<UCSZ01);
     b04:	86 e8       	ldi	r24, 0x86	; 134
     b06:	80 bd       	out	0x20, r24	; 32
	#elif __AVR_ATmega2560__
	UCSR0C = (3<<UCSZ00);
	#endif
	
	//Links prinf() to USART output
	stdout = &usart_stdout;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	90 93 7f 03 	sts	0x037F, r25
     b10:	80 93 7e 03 	sts	0x037E, r24
     b14:	08 95       	ret

00000b16 <app_setup>:
}

void app_setup()
{
		
	opt_select_name(); 
     b16:	0e 94 fb 07 	call	0xff6	; 0xff6 <opt_select_name>
	opt_select_difficulty();
     b1a:	0e 94 c8 08 	call	0x1190	; 0x1190 <opt_select_difficulty>
	opt_select_music(); 
     b1e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <opt_select_music>
	
	//Printing menus
	while (!EXIT_APPLICATION)
     b22:	80 91 da 02 	lds	r24, 0x02DA
     b26:	90 91 db 02 	lds	r25, 0x02DB
     b2a:	89 2b       	or	r24, r25
     b2c:	71 f4       	brne	.+28     	; 0xb4a <app_setup+0x34>
	{
		adc_update_current_input();
     b2e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <adc_update_current_input>
		menu_control(&main_menu);
     b32:	80 e3       	ldi	r24, 0x30	; 48
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	0e 94 fe 11 	call	0x23fc	; 0x23fc <menu_control>
		oled_update_from_SRAM();
     b3a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
	opt_select_name(); 
	opt_select_difficulty();
	opt_select_music(); 
	
	//Printing menus
	while (!EXIT_APPLICATION)
     b3e:	80 91 da 02 	lds	r24, 0x02DA
     b42:	90 91 db 02 	lds	r25, 0x02DB
     b46:	89 2b       	or	r24, r25
     b48:	91 f3       	breq	.-28     	; 0xb2e <app_setup+0x18>
     b4a:	08 95       	ret

00000b4c <app_run>:
}
	
void app_run()
{
	//Printing menus
	while (!EXIT_APPLICATION)
     b4c:	80 91 da 02 	lds	r24, 0x02DA
     b50:	90 91 db 02 	lds	r25, 0x02DB
     b54:	89 2b       	or	r24, r25
     b56:	61 f4       	brne	.+24     	; 0xb70 <app_run+0x24>
	{
		
		menu_control(&main_menu);
     b58:	80 e3       	ldi	r24, 0x30	; 48
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <menu_control>
		oled_update_from_SRAM();
     b60:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
}
	
void app_run()
{
	//Printing menus
	while (!EXIT_APPLICATION)
     b64:	80 91 da 02 	lds	r24, 0x02DA
     b68:	90 91 db 02 	lds	r25, 0x02DB
     b6c:	89 2b       	or	r24, r25
     b6e:	a1 f3       	breq	.-24     	; 0xb58 <app_run+0xc>
		

	}
	
	//thanks player for playing
	oled_clear_SRAM();
     b70:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
	oled_home(); 
     b74:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <oled_home>
	oled_cstring_write("Thank u for playing", 1);
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	81 e7       	ldi	r24, 0x71	; 113
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	oled_update_from_SRAM();
     b84:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	8f e7       	ldi	r24, 0x7F	; 127
     b8c:	96 e1       	ldi	r25, 0x16	; 22
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <app_run+0x42>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <app_run+0x4c>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <app_run+0x4e>
	_delay_ms(1500);
	oled_clear_SRAM();
     b9a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
	oled_update_from_SRAM();
     b9e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
     ba2:	08 95       	ret

00000ba4 <app_logo>:
	
}

void app_logo()
{
	oled_go_to(1,1);
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	oled_cstring_write("Made by:",2);
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	85 e8       	ldi	r24, 0x85	; 133
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	
	//L
	oled_write_line(10,20,10,40);
     bb8:	28 e2       	ldi	r18, 0x28	; 40
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a e0       	ldi	r20, 0x0A	; 10
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	64 e1       	ldi	r22, 0x14	; 20
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	8a e0       	ldi	r24, 0x0A	; 10
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(10,40,20,40);
     bcc:	28 e2       	ldi	r18, 0x28	; 40
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	44 e1       	ldi	r20, 0x14	; 20
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	68 e2       	ldi	r22, 0x28	; 40
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	8a e0       	ldi	r24, 0x0A	; 10
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	
	//A
	oled_write_line(20,40,25,20);
     be0:	24 e1       	ldi	r18, 0x14	; 20
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	49 e1       	ldi	r20, 0x19	; 25
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	68 e2       	ldi	r22, 0x28	; 40
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	84 e1       	ldi	r24, 0x14	; 20
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(23,30,27,30);
     bf4:	2e e1       	ldi	r18, 0x1E	; 30
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	4b e1       	ldi	r20, 0x1B	; 27
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	6e e1       	ldi	r22, 0x1E	; 30
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	87 e1       	ldi	r24, 0x17	; 23
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(25,20,30,40);
     c08:	28 e2       	ldi	r18, 0x28	; 40
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	4e e1       	ldi	r20, 0x1E	; 30
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	64 e1       	ldi	r22, 0x14	; 20
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	89 e1       	ldi	r24, 0x19	; 25
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	
	//R
	oled_write_line(30,40,30,20);
     c1c:	24 e1       	ldi	r18, 0x14	; 20
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	4e e1       	ldi	r20, 0x1E	; 30
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	68 e2       	ldi	r22, 0x28	; 40
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	8e e1       	ldi	r24, 0x1E	; 30
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(30,20,35,20);
     c30:	24 e1       	ldi	r18, 0x14	; 20
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	43 e2       	ldi	r20, 0x23	; 35
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	64 e1       	ldi	r22, 0x14	; 20
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	8e e1       	ldi	r24, 0x1E	; 30
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(35,20,35,25);
     c44:	29 e1       	ldi	r18, 0x19	; 25
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	43 e2       	ldi	r20, 0x23	; 35
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	64 e1       	ldi	r22, 0x14	; 20
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	83 e2       	ldi	r24, 0x23	; 35
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(35,25,30,25);
     c58:	29 e1       	ldi	r18, 0x19	; 25
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	4e e1       	ldi	r20, 0x1E	; 30
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	69 e1       	ldi	r22, 0x19	; 25
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	83 e2       	ldi	r24, 0x23	; 35
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(30,25,35,40);
     c6c:	28 e2       	ldi	r18, 0x28	; 40
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	43 e2       	ldi	r20, 0x23	; 35
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	69 e1       	ldi	r22, 0x19	; 25
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	8e e1       	ldi	r24, 0x1E	; 30
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	
	//S
	oled_write_line(37,40,47,40);
     c80:	28 e2       	ldi	r18, 0x28	; 40
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4f e2       	ldi	r20, 0x2F	; 47
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	68 e2       	ldi	r22, 0x28	; 40
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	85 e2       	ldi	r24, 0x25	; 37
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(47,40,47,30);
     c94:	2e e1       	ldi	r18, 0x1E	; 30
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	4f e2       	ldi	r20, 0x2F	; 47
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	68 e2       	ldi	r22, 0x28	; 40
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	8f e2       	ldi	r24, 0x2F	; 47
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(47,30,35,30);
     ca8:	2e e1       	ldi	r18, 0x1E	; 30
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	43 e2       	ldi	r20, 0x23	; 35
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	6e e1       	ldi	r22, 0x1E	; 30
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	8f e2       	ldi	r24, 0x2F	; 47
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(37,30,37,20);
     cbc:	24 e1       	ldi	r18, 0x14	; 20
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	45 e2       	ldi	r20, 0x25	; 37
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	6e e1       	ldi	r22, 0x1E	; 30
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	85 e2       	ldi	r24, 0x25	; 37
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(37,20,47,20);
     cd0:	24 e1       	ldi	r18, 0x14	; 20
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	4f e2       	ldi	r20, 0x2F	; 47
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	64 e1       	ldi	r22, 0x14	; 20
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	85 e2       	ldi	r24, 0x25	; 37
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	
	oled_go_to(52,4);
     ce4:	64 e0       	ldi	r22, 0x04	; 4
     ce6:	84 e3       	ldi	r24, 0x34	; 52
     ce8:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	oled_cstring_write("&",2);
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	8e e8       	ldi	r24, 0x8E	; 142
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	
	//P
	oled_write_line(65,40,65,20);
     cf8:	24 e1       	ldi	r18, 0x14	; 20
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	41 e4       	ldi	r20, 0x41	; 65
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	68 e2       	ldi	r22, 0x28	; 40
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	81 e4       	ldi	r24, 0x41	; 65
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(65,20,75,20);
     d0c:	24 e1       	ldi	r18, 0x14	; 20
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	4b e4       	ldi	r20, 0x4B	; 75
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	64 e1       	ldi	r22, 0x14	; 20
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	81 e4       	ldi	r24, 0x41	; 65
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(75,20,75,30);
     d20:	2e e1       	ldi	r18, 0x1E	; 30
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	4b e4       	ldi	r20, 0x4B	; 75
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	64 e1       	ldi	r22, 0x14	; 20
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	8b e4       	ldi	r24, 0x4B	; 75
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(75,30,65,30);
     d34:	2e e1       	ldi	r18, 0x1E	; 30
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	41 e4       	ldi	r20, 0x41	; 65
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	6e e1       	ldi	r22, 0x1E	; 30
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	8b e4       	ldi	r24, 0x4B	; 75
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	
	//E
	oled_write_line(77,40,77,20);
     d48:	24 e1       	ldi	r18, 0x14	; 20
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4d e4       	ldi	r20, 0x4D	; 77
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	68 e2       	ldi	r22, 0x28	; 40
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	8d e4       	ldi	r24, 0x4D	; 77
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(77,20,85,20);
     d5c:	24 e1       	ldi	r18, 0x14	; 20
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	45 e5       	ldi	r20, 0x55	; 85
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	64 e1       	ldi	r22, 0x14	; 20
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	8d e4       	ldi	r24, 0x4D	; 77
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(77,30,85,30);
     d70:	2e e1       	ldi	r18, 0x1E	; 30
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	45 e5       	ldi	r20, 0x55	; 85
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	6e e1       	ldi	r22, 0x1E	; 30
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	8d e4       	ldi	r24, 0x4D	; 77
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(77,40,85,40);
     d84:	28 e2       	ldi	r18, 0x28	; 40
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	45 e5       	ldi	r20, 0x55	; 85
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	68 e2       	ldi	r22, 0x28	; 40
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	8d e4       	ldi	r24, 0x4D	; 77
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	
	//R
	oled_write_line(87,40,87,20);
     d98:	24 e1       	ldi	r18, 0x14	; 20
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	47 e5       	ldi	r20, 0x57	; 87
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	68 e2       	ldi	r22, 0x28	; 40
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	87 e5       	ldi	r24, 0x57	; 87
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(87,20,95,20);
     dac:	24 e1       	ldi	r18, 0x14	; 20
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	4f e5       	ldi	r20, 0x5F	; 95
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	64 e1       	ldi	r22, 0x14	; 20
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	87 e5       	ldi	r24, 0x57	; 87
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(95,20,95,25);
     dc0:	29 e1       	ldi	r18, 0x19	; 25
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	4f e5       	ldi	r20, 0x5F	; 95
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	64 e1       	ldi	r22, 0x14	; 20
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	8f e5       	ldi	r24, 0x5F	; 95
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(95,25,87,25);
     dd4:	29 e1       	ldi	r18, 0x19	; 25
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	47 e5       	ldi	r20, 0x57	; 87
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	69 e1       	ldi	r22, 0x19	; 25
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	8f e5       	ldi	r24, 0x5F	; 95
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	oled_write_line(87,25,95,40);
     de8:	28 e2       	ldi	r18, 0x28	; 40
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4f e5       	ldi	r20, 0x5F	; 95
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	69 e1       	ldi	r22, 0x19	; 25
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	87 e5       	ldi	r24, 0x57	; 87
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 38 10 	call	0x2070	; 0x2070 <oled_write_line>
	
	oled_go_to(50,7);
     dfc:	67 e0       	ldi	r22, 0x07	; 7
     dfe:	82 e3       	ldi	r24, 0x32	; 50
     e00:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	oled_cstring_write("TTK4155, H2017",1);
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	80 e9       	ldi	r24, 0x90	; 144
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>

	oled_update_from_SRAM();
     e10:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
     e14:	2f ef       	ldi	r18, 0xFF	; 255
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	9e e0       	ldi	r25, 0x0E	; 14
     e1a:	21 50       	subi	r18, 0x01	; 1
     e1c:	80 40       	sbci	r24, 0x00	; 0
     e1e:	90 40       	sbci	r25, 0x00	; 0
     e20:	e1 f7       	brne	.-8      	; 0xe1a <app_logo+0x276>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <app_logo+0x280>
     e24:	00 00       	nop
     e26:	08 95       	ret

00000e28 <app_init>:
{
	EXIT_APPLICATION = 1;
}

void app_init()
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
	//Initialize drivers
	UART_init(9600);
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	95 e2       	ldi	r25, 0x25	; 37
     e30:	0e 94 71 05 	call	0xae2	; 0xae2 <UART_init>
	oled_init();
     e34:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <oled_init>
	adc_init();
     e38:	0e 94 45 0b 	call	0x168a	; 0x168a <adc_init>
	music_init();
     e3c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <music_init>
	CAN_init(CAN_MODE_NORMAL);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 7f 03 	call	0x6fe	; 0x6fe <CAN_init>
	
	//Shows logo
	music_start_up_sound();
     e46:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <music_start_up_sound>
	app_logo();
     e4a:	0e 94 d2 05 	call	0xba4	; 0xba4 <app_logo>
	
	//Creating menus
	menu_constr(&setup_menu, "Settings");
     e4e:	6f e9       	ldi	r22, 0x9F	; 159
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	8a e3       	ldi	r24, 0x3A	; 58
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 98 11 	call	0x2330	; 0x2330 <menu_constr>
	setup_menu.parent_menu = &main_menu;
     e5a:	80 e3       	ldi	r24, 0x30	; 48
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	90 93 43 03 	sts	0x0343, r25
     e62:	80 93 42 03 	sts	0x0342, r24
	
	opt_constr(&enter_name,"Enter Name", opt_select_name);
     e66:	4b ef       	ldi	r20, 0xFB	; 251
     e68:	57 e0       	ldi	r21, 0x07	; 7
     e6a:	68 ea       	ldi	r22, 0xA8	; 168
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	86 ef       	ldi	r24, 0xF6	; 246
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 8e 11 	call	0x231c	; 0x231c <opt_constr>
	setup_menu.root_option = &enter_name;
     e76:	86 ef       	ldi	r24, 0xF6	; 246
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	90 93 3d 03 	sts	0x033D, r25
     e7e:	80 93 3c 03 	sts	0x033C, r24
	enter_name.parent = &setup_menu;
     e82:	ca e3       	ldi	r28, 0x3A	; 58
     e84:	d3 e0       	ldi	r29, 0x03	; 3
     e86:	d0 93 fd 02 	sts	0x02FD, r29
     e8a:	c0 93 fc 02 	sts	0x02FC, r28
	
	opt_constr(&enter_music,"Music Selection", opt_select_music);
     e8e:	4d e5       	ldi	r20, 0x5D	; 93
     e90:	59 e0       	ldi	r21, 0x09	; 9
     e92:	63 eb       	ldi	r22, 0xB3	; 179
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	82 ee       	ldi	r24, 0xE2	; 226
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	0e 94 8e 11 	call	0x231c	; 0x231c <opt_constr>
	enter_name.next = &enter_music;
     e9e:	82 ee       	ldi	r24, 0xE2	; 226
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	90 93 fb 02 	sts	0x02FB, r25
     ea6:	80 93 fa 02 	sts	0x02FA, r24
	
	opt_constr(&enter_difficulty_option,"Difficulty", opt_select_difficulty);
     eaa:	48 ec       	ldi	r20, 0xC8	; 200
     eac:	58 e0       	ldi	r21, 0x08	; 8
     eae:	63 ec       	ldi	r22, 0xC3	; 195
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 8e 11 	call	0x231c	; 0x231c <opt_constr>
	enter_music.next = &enter_difficulty_option;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	90 93 e7 02 	sts	0x02E7, r25
     ec2:	80 93 e6 02 	sts	0x02E6, r24
	 
	
	opt_constr(&highscore, "Highscores", view_highscore);
     ec6:	4e e2       	ldi	r20, 0x2E	; 46
     ec8:	5a e0       	ldi	r21, 0x0A	; 10
     eca:	6e ec       	ldi	r22, 0xCE	; 206
     ecc:	71 e0       	ldi	r23, 0x01	; 1
     ece:	86 e4       	ldi	r24, 0x46	; 70
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	0e 94 8e 11 	call	0x231c	; 0x231c <opt_constr>
	enter_difficulty_option.next = &highscore;
     ed6:	86 e4       	ldi	r24, 0x46	; 70
     ed8:	93 e0       	ldi	r25, 0x03	; 3
     eda:	90 93 05 03 	sts	0x0305, r25
     ede:	80 93 04 03 	sts	0x0304, r24
	
	
	menu_constr(&main_menu, "Main Menu");
     ee2:	69 ed       	ldi	r22, 0xD9	; 217
     ee4:	71 e0       	ldi	r23, 0x01	; 1
     ee6:	80 e3       	ldi	r24, 0x30	; 48
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	0e 94 98 11 	call	0x2330	; 0x2330 <menu_constr>
	
	opt_constr(&start_game, "Start Game", opt_run_game); 
     eee:	46 ee       	ldi	r20, 0xE6	; 230
     ef0:	5a e0       	ldi	r21, 0x0A	; 10
     ef2:	63 ee       	ldi	r22, 0xE3	; 227
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	84 e1       	ldi	r24, 0x14	; 20
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 8e 11 	call	0x231c	; 0x231c <opt_constr>
	main_menu.root_option = &start_game;
     efe:	84 e1       	ldi	r24, 0x14	; 20
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	90 93 33 03 	sts	0x0333, r25
     f06:	80 93 32 03 	sts	0x0332, r24
	
	opt_constr(&go_to_settings, "Settings", NULL);
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	6f e9       	ldi	r22, 0x9F	; 159
     f10:	71 e0       	ldi	r23, 0x01	; 1
     f12:	8c ee       	ldi	r24, 0xEC	; 236
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 8e 11 	call	0x231c	; 0x231c <opt_constr>
	main_menu.root_option->next = &go_to_settings;
     f1a:	e0 91 32 03 	lds	r30, 0x0332
     f1e:	f0 91 33 03 	lds	r31, 0x0333
     f22:	8c ee       	ldi	r24, 0xEC	; 236
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	95 83       	std	Z+5, r25	; 0x05
     f28:	84 83       	std	Z+4, r24	; 0x04
	go_to_settings.submenu = &setup_menu;
     f2a:	d0 93 f5 02 	sts	0x02F5, r29
     f2e:	c0 93 f4 02 	sts	0x02F4, r28
	
	opt_constr(&exit_application, "Exit game", opt_exit_application);
     f32:	47 e0       	ldi	r20, 0x07	; 7
     f34:	5b e0       	ldi	r21, 0x0B	; 11
     f36:	6e ee       	ldi	r22, 0xEE	; 238
     f38:	71 e0       	ldi	r23, 0x01	; 1
     f3a:	8a e0       	ldi	r24, 0x0A	; 10
     f3c:	93 e0       	ldi	r25, 0x03	; 3
     f3e:	0e 94 8e 11 	call	0x231c	; 0x231c <opt_constr>
	go_to_settings.next = &exit_application; 
     f42:	8a e0       	ldi	r24, 0x0A	; 10
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	90 93 f1 02 	sts	0x02F1, r25
     f4a:	80 93 f0 02 	sts	0x02F0, r24
	
	
	//Enable interrupts
	sei();
     f4e:	78 94       	sei
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <int_to_cstring>:
	oled_update_from_SRAM();
	_delay_ms(1000);
}

char* int_to_cstring(int t)
{
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	2c 97       	sbiw	r28, 0x0c	; 12
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
	
	char str[12];
	sprintf(str, "%d", t);
     f6e:	9f 93       	push	r25
     f70:	8f 93       	push	r24
     f72:	88 ef       	ldi	r24, 0xF8	; 248
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	8e 01       	movw	r16, r28
     f7c:	0f 5f       	subi	r16, 0xFF	; 255
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	1f 93       	push	r17
     f82:	0f 93       	push	r16
     f84:	0e 94 a8 14 	call	0x2950	; 0x2950 <sprintf>
	return str;
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
}
     f94:	c8 01       	movw	r24, r16
     f96:	2c 96       	adiw	r28, 0x0c	; 12
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	08 95       	ret

00000fac <app_show_gamescreen>:

void app_show_gamescreen()
{
	//prints current score
	oled_home();
     fac:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <oled_home>
	oled_clear_SRAM();
     fb0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
	oled_cstring_write("The game has started", 1);
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	8b ef       	ldi	r24, 0xFB	; 251
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	oled_go_to(0,3);
     fc0:	63 e0       	ldi	r22, 0x03	; 3
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	oled_cstring_write("Current score: " ,1);
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e1       	ldi	r24, 0x10	; 16
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	oled_go_to(80,3);
     fd4:	63 e0       	ldi	r22, 0x03	; 3
     fd6:	80 e5       	ldi	r24, 0x50	; 80
     fd8:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	oled_cstring_write(int_to_cstring(CURRENT_SCORE) ,1);
     fdc:	80 91 2e 03 	lds	r24, 0x032E
     fe0:	90 91 2f 03 	lds	r25, 0x032F
     fe4:	0e 94 ab 07 	call	0xf56	; 0xf56 <int_to_cstring>
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	oled_update_from_SRAM();
     ff0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
     ff4:	08 95       	ret

00000ff6 <opt_select_name>:
#include <util\delay.h>



void opt_select_name()
{
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
	//Sets up screen for functions
	oled_clear_SRAM();
    100e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
	oled_home();
    1012:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <oled_home>
	oled_cstring_write("Enter name: ",2);
    1016:	62 e0       	ldi	r22, 0x02	; 2
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	88 e6       	ldi	r24, 0x68	; 104
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	int i = 0;
    1022:	c0 e0       	ldi	r28, 0x00	; 0
    1024:	d0 e0       	ldi	r29, 0x00	; 0
		//Read ADC
		adc_update_current_input();
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
    1026:	0f 2e       	mov	r0, r31
    1028:	f1 e4       	ldi	r31, 0x41	; 65
    102a:	8f 2e       	mov	r8, r31
    102c:	f0 2d       	mov	r31, r0
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
    102e:	0f 2e       	mov	r0, r31
    1030:	fa e5       	ldi	r31, 0x5A	; 90
    1032:	9f 2e       	mov	r9, r31
    1034:	f0 2d       	mov	r31, r0
    1036:	c1 2c       	mov	r12, r1
    1038:	d1 2c       	mov	r13, r1
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
    103a:	aa 24       	eor	r10, r10
    103c:	a3 94       	inc	r10
    103e:	b1 2c       	mov	r11, r1
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
    1040:	68 94       	set
    1042:	ee 24       	eor	r14, r14
    1044:	e1 f8       	bld	r14, 1
    1046:	f1 2c       	mov	r15, r1
	int ToSettings = 0; 
	
	while(ToSettings == 0)
	{
		//Read ADC
		adc_update_current_input();
    1048:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <adc_update_current_input>
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
    104c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <joystick_down>
    1050:	89 2b       	or	r24, r25
    1052:	61 f0       	breq	.+24     	; 0x106c <opt_select_name+0x76>
    1054:	fe 01       	movw	r30, r28
    1056:	e6 5b       	subi	r30, 0xB6	; 182
    1058:	fe 4f       	sbci	r31, 0xFE	; 254
    105a:	80 81       	ld	r24, Z
    105c:	8a 35       	cpi	r24, 0x5A	; 90
    105e:	30 f4       	brcc	.+12     	; 0x106c <opt_select_name+0x76>
    1060:	fe 01       	movw	r30, r28
    1062:	e6 5b       	subi	r30, 0xB6	; 182
    1064:	fe 4f       	sbci	r31, 0xFE	; 254
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
    106a:	08 c0       	rjmp	.+16     	; 0x107c <opt_select_name+0x86>
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
    106c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <joystick_down>
    1070:	89 2b       	or	r24, r25
    1072:	21 f0       	breq	.+8      	; 0x107c <opt_select_name+0x86>
    1074:	fe 01       	movw	r30, r28
    1076:	e6 5b       	subi	r30, 0xB6	; 182
    1078:	fe 4f       	sbci	r31, 0xFE	; 254
    107a:	80 82       	st	Z, r8
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
    107c:	0e 94 14 0c 	call	0x1828	; 0x1828 <joystick_up>
    1080:	89 2b       	or	r24, r25
    1082:	61 f0       	breq	.+24     	; 0x109c <opt_select_name+0xa6>
    1084:	fe 01       	movw	r30, r28
    1086:	e6 5b       	subi	r30, 0xB6	; 182
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	80 81       	ld	r24, Z
    108c:	82 34       	cpi	r24, 0x42	; 66
    108e:	30 f0       	brcs	.+12     	; 0x109c <opt_select_name+0xa6>
    1090:	fe 01       	movw	r30, r28
    1092:	e6 5b       	subi	r30, 0xB6	; 182
    1094:	fe 4f       	sbci	r31, 0xFE	; 254
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	80 83       	st	Z, r24
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <opt_select_name+0xb6>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
    109c:	0e 94 14 0c 	call	0x1828	; 0x1828 <joystick_up>
    10a0:	89 2b       	or	r24, r25
    10a2:	21 f0       	breq	.+8      	; 0x10ac <opt_select_name+0xb6>
    10a4:	fe 01       	movw	r30, r28
    10a6:	e6 5b       	subi	r30, 0xB6	; 182
    10a8:	fe 4f       	sbci	r31, 0xFE	; 254
    10aa:	90 82       	st	Z, r9
		if (joystick_right() && i < 3) i++;
    10ac:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    10b0:	89 2b       	or	r24, r25
    10b2:	21 f0       	breq	.+8      	; 0x10bc <opt_select_name+0xc6>
    10b4:	c3 30       	cpi	r28, 0x03	; 3
    10b6:	d1 05       	cpc	r29, r1
    10b8:	0c f4       	brge	.+2      	; 0x10bc <opt_select_name+0xc6>
    10ba:	21 96       	adiw	r28, 0x01	; 1
		if (joystick_left() && i >= 0) i--;
    10bc:	0e 94 28 0c 	call	0x1850	; 0x1850 <joystick_left>
    10c0:	89 2b       	or	r24, r25
    10c2:	19 f0       	breq	.+6      	; 0x10ca <opt_select_name+0xd4>
    10c4:	dd 23       	and	r29, r29
    10c6:	0c f0       	brlt	.+2      	; 0x10ca <opt_select_name+0xd4>
    10c8:	21 97       	sbiw	r28, 0x01	; 1
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
    10ca:	0e 94 28 0c 	call	0x1850	; 0x1850 <joystick_left>
    10ce:	89 2b       	or	r24, r25
    10d0:	21 f0       	breq	.+8      	; 0x10da <opt_select_name+0xe4>
    10d2:	cf 3f       	cpi	r28, 0xFF	; 255
    10d4:	2f ef       	ldi	r18, 0xFF	; 255
    10d6:	d2 07       	cpc	r29, r18
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <opt_select_name+0xfc>
    10da:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    10de:	89 2b       	or	r24, r25
    10e0:	69 f0       	breq	.+26     	; 0x10fc <opt_select_name+0x106>
    10e2:	c3 30       	cpi	r28, 0x03	; 3
    10e4:	d1 05       	cpc	r29, r1
    10e6:	69 f4       	brne	.+26     	; 0x1102 <opt_select_name+0x10c>
		{
			ToSettings = 1;
    10e8:	0a 2d       	mov	r16, r10
    10ea:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
    10ec:	ce 2d       	mov	r28, r14
    10ee:	df 2d       	mov	r29, r15
    10f0:	0a c0       	rjmp	.+20     	; 0x1106 <opt_select_name+0x110>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
    10f2:	0a 2d       	mov	r16, r10
    10f4:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
    10f6:	cc 2d       	mov	r28, r12
    10f8:	dd 2d       	mov	r29, r13
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <opt_select_name+0x110>
    10fc:	0c 2d       	mov	r16, r12
    10fe:	1d 2d       	mov	r17, r13
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <opt_select_name+0x110>
    1102:	0c 2d       	mov	r16, r12
    1104:	1d 2d       	mov	r17, r13
			if(i == 3) i = 2; 
		}
		
		//Print current Letter
		oled_go_to(60,3);
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	8c e3       	ldi	r24, 0x3C	; 60
    110a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
		oled_cstring_write(PLAYER_NAME,2);
    110e:	6e 2d       	mov	r22, r14
    1110:	7f 2d       	mov	r23, r15
    1112:	8a e4       	ldi	r24, 0x4A	; 74
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
		
		oled_update_from_SRAM();
    111a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
		
		
		
		if(!joystick_down() && !joystick_left() && !joystick_right() && !joystick_up())
    111e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <joystick_down>
    1122:	89 2b       	or	r24, r25
    1124:	29 f5       	brne	.+74     	; 0x1170 <opt_select_name+0x17a>
    1126:	0e 94 28 0c 	call	0x1850	; 0x1850 <joystick_left>
    112a:	89 2b       	or	r24, r25
    112c:	09 f5       	brne	.+66     	; 0x1170 <opt_select_name+0x17a>
    112e:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    1132:	89 2b       	or	r24, r25
    1134:	e9 f4       	brne	.+58     	; 0x1170 <opt_select_name+0x17a>
    1136:	0e 94 14 0c 	call	0x1828	; 0x1828 <joystick_up>
    113a:	89 2b       	or	r24, r25
    113c:	c9 f4       	brne	.+50     	; 0x1170 <opt_select_name+0x17a>
    113e:	9f ef       	ldi	r25, 0xFF	; 255
    1140:	2f e7       	ldi	r18, 0x7F	; 127
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	91 50       	subi	r25, 0x01	; 1
    1146:	20 40       	sbci	r18, 0x00	; 0
    1148:	80 40       	sbci	r24, 0x00	; 0
    114a:	e1 f7       	brne	.-8      	; 0x1144 <opt_select_name+0x14e>
    114c:	00 c0       	rjmp	.+0      	; 0x114e <opt_select_name+0x158>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <opt_select_name+0x15a>
		{
			
			_delay_ms(100);
			
			oled_go_to(60+(8*i),3);
    1150:	63 e0       	ldi	r22, 0x03	; 3
    1152:	8c 2f       	mov	r24, r28
    1154:	88 0f       	add	r24, r24
    1156:	88 0f       	add	r24, r24
    1158:	88 0f       	add	r24, r24
    115a:	84 5c       	subi	r24, 0xC4	; 196
    115c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
			oled_cstring_write("_",2);
    1160:	6e 2d       	mov	r22, r14
    1162:	7f 2d       	mov	r23, r15
    1164:	85 e7       	ldi	r24, 0x75	; 117
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
		
			oled_update_from_SRAM();
    116c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
	oled_home();
	oled_cstring_write("Enter name: ",2);
	int i = 0;
	int ToSettings = 0; 
	
	while(ToSettings == 0)
    1170:	01 2b       	or	r16, r17
    1172:	09 f4       	brne	.+2      	; 0x1176 <opt_select_name+0x180>
    1174:	69 cf       	rjmp	.-302    	; 0x1048 <opt_select_name+0x52>
			oled_update_from_SRAM();
		}
		
	}
		
	}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	bf 90       	pop	r11
    1188:	af 90       	pop	r10
    118a:	9f 90       	pop	r9
    118c:	8f 90       	pop	r8
    118e:	08 95       	ret

00001190 <opt_select_difficulty>:
		
void opt_select_difficulty()
{
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
		
		oled_clear_SRAM();
    11a0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
		oled_home(); 
    11a4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <oled_home>
		oled_cstring_write("Difficulty:", 2);
    11a8:	62 e0       	ldi	r22, 0x02	; 2
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	87 e7       	ldi	r24, 0x77	; 119
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
		
		int change = 1; 
    11b4:	01 e0       	ldi	r16, 0x01	; 1
    11b6:	10 e0       	ldi	r17, 0x00	; 0
			adc_update_current_input();
			
			
			//Reads input and decides min and max levels
			
			if(joystick_left()) completed = 1;
    11b8:	ee 24       	eor	r14, r14
    11ba:	e3 94       	inc	r14
    11bc:	f1 2c       	mov	r15, r1
    11be:	c1 2c       	mov	r12, r1
    11c0:	d1 2c       	mov	r13, r1

		while(completed == 0) 
		{
			
			//Read ADC
			adc_update_current_input();
    11c2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <adc_update_current_input>
			
			
			//Reads input and decides min and max levels
			
			if(joystick_left()) completed = 1;
    11c6:	0e 94 28 0c 	call	0x1850	; 0x1850 <joystick_left>
    11ca:	3e 2d       	mov	r19, r14
    11cc:	2f 2d       	mov	r18, r15
    11ce:	89 2b       	or	r24, r25
    11d0:	11 f4       	brne	.+4      	; 0x11d6 <opt_select_difficulty+0x46>
    11d2:	3c 2d       	mov	r19, r12
    11d4:	2d 2d       	mov	r18, r13
    11d6:	c3 2f       	mov	r28, r19
    11d8:	d2 2f       	mov	r29, r18
			if(joystick_right()) completed = 1;
    11da:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    11de:	89 2b       	or	r24, r25
    11e0:	11 f0       	breq	.+4      	; 0x11e6 <opt_select_difficulty+0x56>
    11e2:	ce 2d       	mov	r28, r14
    11e4:	df 2d       	mov	r29, r15
			if (joystick_up() && CURRENT_DIFFICULTY < 2)
    11e6:	0e 94 14 0c 	call	0x1828	; 0x1828 <joystick_up>
    11ea:	89 2b       	or	r24, r25
    11ec:	71 f0       	breq	.+28     	; 0x120a <opt_select_difficulty+0x7a>
    11ee:	80 91 de 02 	lds	r24, 0x02DE
    11f2:	90 91 df 02 	lds	r25, 0x02DF
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	91 05       	cpc	r25, r1
    11fa:	3c f4       	brge	.+14     	; 0x120a <opt_select_difficulty+0x7a>
			{
				 CURRENT_DIFFICULTY++;
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	90 93 df 02 	sts	0x02DF, r25
    1202:	80 93 de 02 	sts	0x02DE, r24
				 change = 1; 
    1206:	0e 2d       	mov	r16, r14
    1208:	1f 2d       	mov	r17, r15
			} 
			if (joystick_down() && CURRENT_DIFFICULTY > 0)
    120a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <joystick_down>
    120e:	89 2b       	or	r24, r25
    1210:	21 f1       	breq	.+72     	; 0x125a <opt_select_difficulty+0xca>
    1212:	80 91 de 02 	lds	r24, 0x02DE
    1216:	90 91 df 02 	lds	r25, 0x02DF
    121a:	18 16       	cp	r1, r24
    121c:	19 06       	cpc	r1, r25
    121e:	ec f4       	brge	.+58     	; 0x125a <opt_select_difficulty+0xca>
			{
				 CURRENT_DIFFICULTY--;
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	90 93 df 02 	sts	0x02DF, r25
    1226:	80 93 de 02 	sts	0x02DE, r24
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
    122a:	63 e0       	ldi	r22, 0x03	; 3
    122c:	8c e3       	ldi	r24, 0x3C	; 60
    122e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
			oled_cstring_write(DIFFICULTY_NAME[CURRENT_DIFFICULTY],2);
    1232:	80 91 de 02 	lds	r24, 0x02DE
    1236:	90 91 df 02 	lds	r25, 0x02DF
    123a:	9c 01       	movw	r18, r24
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	62 e0       	ldi	r22, 0x02	; 2
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	82 5b       	subi	r24, 0xB2	; 178
    124e:	9e 4f       	sbci	r25, 0xFE	; 254
    1250:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_update_from_SRAM();
    1254:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
    1258:	19 c0       	rjmp	.+50     	; 0x128c <opt_select_difficulty+0xfc>
				 CURRENT_DIFFICULTY--;
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
    125a:	63 e0       	ldi	r22, 0x03	; 3
    125c:	8c e3       	ldi	r24, 0x3C	; 60
    125e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
			oled_cstring_write(DIFFICULTY_NAME[CURRENT_DIFFICULTY],2);
    1262:	80 91 de 02 	lds	r24, 0x02DE
    1266:	90 91 df 02 	lds	r25, 0x02DF
    126a:	9c 01       	movw	r18, r24
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	62 e0       	ldi	r22, 0x02	; 2
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	82 5b       	subi	r24, 0xB2	; 178
    127e:	9e 4f       	sbci	r25, 0xFE	; 254
    1280:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_update_from_SRAM();
    1284:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
			
			
			
			if (change!= 0)
    1288:	01 2b       	or	r16, r17
    128a:	49 f0       	breq	.+18     	; 0x129e <opt_select_difficulty+0x10e>
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	2f ef       	ldi	r18, 0xFF	; 255
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	20 40       	sbci	r18, 0x00	; 0
    1296:	80 40       	sbci	r24, 0x00	; 0
    1298:	e1 f7       	brne	.-8      	; 0x1292 <opt_select_difficulty+0x102>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <opt_select_difficulty+0x10c>
    129c:	00 c0       	rjmp	.+0      	; 0x129e <opt_select_difficulty+0x10e>
		oled_cstring_write("Difficulty:", 2);
		
		int change = 1; 
		int completed= 0; 

		while(completed == 0) 
    129e:	cd 2b       	or	r28, r29
    12a0:	19 f4       	brne	.+6      	; 0x12a8 <opt_select_difficulty+0x118>
    12a2:	0c 2d       	mov	r16, r12
    12a4:	1d 2d       	mov	r17, r13
    12a6:	8d cf       	rjmp	.-230    	; 0x11c2 <opt_select_difficulty+0x32>
			}
			
			
		}
	
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	08 95       	ret

000012ba <opt_select_music>:

void opt_select_music()
{
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	6e 97       	sbiw	r28, 0x1e	; 30
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
	
	
	int change = 1;
	char *song_list[15] = {"Imperial March ", "Star wars theme", "No music       "}; 
    12de:	fe 01       	movw	r30, r28
    12e0:	31 96       	adiw	r30, 0x01	; 1
    12e2:	8e e1       	ldi	r24, 0x1E	; 30
    12e4:	df 01       	movw	r26, r30
    12e6:	1d 92       	st	X+, r1
    12e8:	8a 95       	dec	r24
    12ea:	e9 f7       	brne	.-6      	; 0x12e6 <opt_select_music+0x2c>
    12ec:	83 e8       	ldi	r24, 0x83	; 131
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	83 e9       	ldi	r24, 0x93	; 147
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	9c 83       	std	Y+4, r25	; 0x04
    12fa:	8b 83       	std	Y+3, r24	; 0x03
    12fc:	83 ea       	ldi	r24, 0xA3	; 163
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
	int ToSettings= 0;
	
	oled_clear_SRAM();
    1304:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
	oled_home();
    1308:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <oled_home>
	oled_cstring_write("Music:", 2);
    130c:	62 e0       	ldi	r22, 0x02	; 2
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	83 eb       	ldi	r24, 0xB3	; 179
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>

void opt_select_music()
{
	
	
	int change = 1;
    1318:	01 e0       	ldi	r16, 0x01	; 1
    131a:	10 e0       	ldi	r17, 0x00	; 0
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
    131c:	aa 24       	eor	r10, r10
    131e:	a3 94       	inc	r10
    1320:	b1 2c       	mov	r11, r1
    1322:	c1 2c       	mov	r12, r1
    1324:	d1 2c       	mov	r13, r1

	while(ToSettings == 0)
	{
		
		//Read ADC
		adc_update_current_input();
    1326:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <adc_update_current_input>
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
    132a:	0e 94 28 0c 	call	0x1850	; 0x1850 <joystick_left>
    132e:	89 2b       	or	r24, r25
    1330:	29 f0       	breq	.+10     	; 0x133c <opt_select_music+0x82>
    1332:	01 15       	cp	r16, r1
    1334:	11 05       	cpc	r17, r1
    1336:	09 f4       	brne	.+2      	; 0x133a <opt_select_music+0x80>
    1338:	73 c0       	rjmp	.+230    	; 0x1420 <opt_select_music+0x166>
    133a:	7a c0       	rjmp	.+244    	; 0x1430 <opt_select_music+0x176>
		if(joystick_right() && !change) ToSettings = 1;
    133c:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    1340:	89 2b       	or	r24, r25
    1342:	31 f0       	breq	.+12     	; 0x1350 <opt_select_music+0x96>
    1344:	01 15       	cp	r16, r1
    1346:	11 05       	cpc	r17, r1
    1348:	31 f4       	brne	.+12     	; 0x1356 <opt_select_music+0x9c>
    134a:	ea 2c       	mov	r14, r10
    134c:	fb 2c       	mov	r15, r11
    134e:	05 c0       	rjmp	.+10     	; 0x135a <opt_select_music+0xa0>
    1350:	ec 2c       	mov	r14, r12
    1352:	fd 2c       	mov	r15, r13
    1354:	02 c0       	rjmp	.+4      	; 0x135a <opt_select_music+0xa0>
    1356:	ec 2c       	mov	r14, r12
    1358:	fd 2c       	mov	r15, r13
		if (joystick_up() && CURRENT_SONG < 2)
    135a:	0e 94 14 0c 	call	0x1828	; 0x1828 <joystick_up>
    135e:	89 2b       	or	r24, r25
    1360:	71 f0       	breq	.+28     	; 0x137e <opt_select_music+0xc4>
    1362:	80 91 dc 02 	lds	r24, 0x02DC
    1366:	90 91 dd 02 	lds	r25, 0x02DD
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	91 05       	cpc	r25, r1
    136e:	3c f4       	brge	.+14     	; 0x137e <opt_select_music+0xc4>
		{
			CURRENT_SONG++;
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	90 93 dd 02 	sts	0x02DD, r25
    1376:	80 93 dc 02 	sts	0x02DC, r24
			change = 1;
    137a:	0a 2d       	mov	r16, r10
    137c:	1b 2d       	mov	r17, r11
		}
		if (joystick_down() && CURRENT_SONG > 0)
    137e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <joystick_down>
    1382:	89 2b       	or	r24, r25
    1384:	29 f1       	breq	.+74     	; 0x13d0 <opt_select_music+0x116>
    1386:	80 91 dc 02 	lds	r24, 0x02DC
    138a:	90 91 dd 02 	lds	r25, 0x02DD
    138e:	18 16       	cp	r1, r24
    1390:	19 06       	cpc	r1, r25
    1392:	f4 f4       	brge	.+60     	; 0x13d0 <opt_select_music+0x116>
		{
			CURRENT_SONG--;
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	90 93 dd 02 	sts	0x02DD, r25
    139a:	80 93 dc 02 	sts	0x02DC, r24
			change = 1;
		}
		
		oled_go_to(30,3);
    139e:	63 e0       	ldi	r22, 0x03	; 3
    13a0:	8e e1       	ldi	r24, 0x1E	; 30
    13a2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
    13a6:	e0 91 dc 02 	lds	r30, 0x02DC
    13aa:	f0 91 dd 02 	lds	r31, 0x02DD
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	8c 0f       	add	r24, r28
    13b8:	9d 1f       	adc	r25, r29
    13ba:	e8 0f       	add	r30, r24
    13bc:	f9 1f       	adc	r31, r25
    13be:	6a 2d       	mov	r22, r10
    13c0:	7b 2d       	mov	r23, r11
    13c2:	80 81       	ld	r24, Z
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
		oled_update_from_SRAM();
    13ca:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
    13ce:	1a c0       	rjmp	.+52     	; 0x1404 <opt_select_music+0x14a>
		{
			CURRENT_SONG--;
			change = 1;
		}
		
		oled_go_to(30,3);
    13d0:	63 e0       	ldi	r22, 0x03	; 3
    13d2:	8e e1       	ldi	r24, 0x1E	; 30
    13d4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
    13d8:	e0 91 dc 02 	lds	r30, 0x02DC
    13dc:	f0 91 dd 02 	lds	r31, 0x02DD
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	a1 e0       	ldi	r26, 0x01	; 1
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ac 0f       	add	r26, r28
    13ea:	bd 1f       	adc	r27, r29
    13ec:	ea 0f       	add	r30, r26
    13ee:	fb 1f       	adc	r31, r27
    13f0:	6a 2d       	mov	r22, r10
    13f2:	7b 2d       	mov	r23, r11
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
		oled_update_from_SRAM();
    13fc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
		
		if (change!= 0)
    1400:	01 2b       	or	r16, r17
    1402:	49 f0       	breq	.+18     	; 0x1416 <opt_select_music+0x15c>
    1404:	bf ef       	ldi	r27, 0xFF	; 255
    1406:	2f ef       	ldi	r18, 0xFF	; 255
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	b1 50       	subi	r27, 0x01	; 1
    140c:	20 40       	sbci	r18, 0x00	; 0
    140e:	80 40       	sbci	r24, 0x00	; 0
    1410:	e1 f7       	brne	.-8      	; 0x140a <opt_select_music+0x150>
    1412:	00 c0       	rjmp	.+0      	; 0x1414 <opt_select_music+0x15a>
    1414:	00 c0       	rjmp	.+0      	; 0x1416 <opt_select_music+0x15c>
	
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("Music:", 2);

	while(ToSettings == 0)
    1416:	ef 28       	or	r14, r15
    1418:	81 f4       	brne	.+32     	; 0x143a <opt_select_music+0x180>
    141a:	0c 2d       	mov	r16, r12
    141c:	1d 2d       	mov	r17, r13
    141e:	83 cf       	rjmp	.-250    	; 0x1326 <opt_select_music+0x6c>
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
    1420:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    1424:	89 2b       	or	r24, r25
    1426:	09 f0       	breq	.+2      	; 0x142a <opt_select_music+0x170>
    1428:	90 cf       	rjmp	.-224    	; 0x134a <opt_select_music+0x90>
		//Read ADC
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
    142a:	ea 2c       	mov	r14, r10
    142c:	fb 2c       	mov	r15, r11
    142e:	95 cf       	rjmp	.-214    	; 0x135a <opt_select_music+0xa0>
		if(joystick_right() && !change) ToSettings = 1;
    1430:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    1434:	ec 2c       	mov	r14, r12
    1436:	fd 2c       	mov	r15, r13
    1438:	90 cf       	rjmp	.-224    	; 0x135a <opt_select_music+0xa0>
			
		}
		
		
	}
}
    143a:	6e 96       	adiw	r28, 0x1e	; 30
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	bf 90       	pop	r11
    1458:	af 90       	pop	r10
    145a:	08 95       	ret

0000145c <view_highscore>:

void view_highscore()
{
    145c:	4f 92       	push	r4
    145e:	5f 92       	push	r5
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
	oled_clear_SRAM();
    147c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
	oled_home();
    1480:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <oled_home>
	oled_cstring_write("High score:", 2);
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	8a eb       	ldi	r24, 0xBA	; 186
    148a:	92 e0       	ldi	r25, 0x02	; 2
    148c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
    1490:	0f 2e       	mov	r0, r31
    1492:	fe e0       	ldi	r31, 0x0E	; 14
    1494:	8f 2e       	mov	r8, r31
    1496:	f1 e0       	ldi	r31, 0x01	; 1
    1498:	9f 2e       	mov	r9, r31
    149a:	f0 2d       	mov	r31, r0
    149c:	0f 2e       	mov	r0, r31
    149e:	f6 e3       	ldi	r31, 0x36	; 54
    14a0:	6f 2e       	mov	r6, r31
    14a2:	f1 e0       	ldi	r31, 0x01	; 1
    14a4:	7f 2e       	mov	r7, r31
    14a6:	f0 2d       	mov	r31, r0
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
		if(joystick_left())
    14a8:	68 94       	set
    14aa:	44 24       	eor	r4, r4
    14ac:	41 f8       	bld	r4, 1
    14ae:	51 2c       	mov	r5, r1
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
    14b0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <adc_update_current_input>
		if(joystick_left())
    14b4:	0e 94 28 0c 	call	0x1850	; 0x1850 <joystick_left>
    14b8:	5c 01       	movw	r10, r24
    14ba:	74 01       	movw	r14, r8
    14bc:	83 01       	movw	r16, r6
    14be:	c4 2d       	mov	r28, r4
    14c0:	d5 2d       	mov	r29, r5
		}
		
		for (int i = 0; i < 5; i += 2)
		{
			//Prints i highscore
			oled_go_to(1,2+i);
    14c2:	6c 2f       	mov	r22, r28
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
			oled_cstring_write(int_to_cstring(i+1),1);
    14ca:	ce 01       	movw	r24, r28
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	0e 94 ab 07 	call	0xf56	; 0xf56 <int_to_cstring>
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_cstring_write(". ",1);
    14da:	61 e0       	ldi	r22, 0x01	; 1
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	86 ec       	ldi	r24, 0xC6	; 198
    14e0:	92 e0       	ldi	r25, 0x02	; 2
    14e2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i],1);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	c7 01       	movw	r24, r14
    14ec:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_cstring_write(": ",1);
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	82 e7       	ldi	r24, 0x72	; 114
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
    14fc:	68 01       	movw	r12, r16
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i]),1);
    14fe:	f8 01       	movw	r30, r16
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	0e 94 ab 07 	call	0xf56	; 0xf56 <int_to_cstring>
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			
			//Adapts next line
			if (HIGHSCORE_LIST[i] > 99) oled_cstring_write(" ",1);
    1510:	f8 01       	movw	r30, r16
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	84 36       	cpi	r24, 0x64	; 100
    1518:	91 05       	cpc	r25, r1
    151a:	3c f0       	brlt	.+14     	; 0x152a <view_highscore+0xce>
    151c:	61 e0       	ldi	r22, 0x01	; 1
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	81 eb       	ldi	r24, 0xB1	; 177
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <view_highscore+0xec>
			else if (HIGHSCORE_LIST[i] > 9) oled_cstring_write("  ",1);
    152a:	0a 97       	sbiw	r24, 0x0a	; 10
    152c:	3c f0       	brlt	.+14     	; 0x153c <view_highscore+0xe0>
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	80 eb       	ldi	r24, 0xB0	; 176
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <view_highscore+0xec>
			else oled_cstring_write("   ",1);
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	8f ea       	ldi	r24, 0xAF	; 175
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			
			//Prints i+1 highscore
			oled_cstring_write(int_to_cstring(i+2),1);
    1548:	ce 01       	movw	r24, r28
    154a:	0e 94 ab 07 	call	0xf56	; 0xf56 <int_to_cstring>
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_cstring_write(". ",1);
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	86 ec       	ldi	r24, 0xC6	; 198
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	c7 01       	movw	r24, r14
    1568:	04 96       	adiw	r24, 0x04	; 4
    156a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_cstring_write(": ",1);
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	82 e7       	ldi	r24, 0x72	; 114
    1574:	92 e0       	ldi	r25, 0x02	; 2
    1576:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
    157a:	f6 01       	movw	r30, r12
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	0e 94 ab 07 	call	0xf56	; 0xf56 <int_to_cstring>
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
    158c:	22 96       	adiw	r28, 0x02	; 2
    158e:	f8 e0       	ldi	r31, 0x08	; 8
    1590:	ef 0e       	add	r14, r31
    1592:	f1 1c       	adc	r15, r1
    1594:	0c 5f       	subi	r16, 0xFC	; 252
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			 ToSettings = 1;
			 
		}
		
		for (int i = 0; i < 5; i += 2)
    1598:	c8 30       	cpi	r28, 0x08	; 8
    159a:	d1 05       	cpc	r29, r1
    159c:	09 f0       	breq	.+2      	; 0x15a0 <view_highscore+0x144>
    159e:	91 cf       	rjmp	.-222    	; 0x14c2 <view_highscore+0x66>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
			oled_cstring_write(": ",1);
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
			
		}
		oled_update_from_SRAM();
    15a0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <oled_update_from_SRAM>
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
    15a4:	ab 28       	or	r10, r11
    15a6:	09 f4       	brne	.+2      	; 0x15aa <view_highscore+0x14e>
    15a8:	83 cf       	rjmp	.-250    	; 0x14b0 <view_highscore+0x54>
		oled_update_from_SRAM();
		
		
	}

}
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	af 90       	pop	r10
    15be:	9f 90       	pop	r9
    15c0:	8f 90       	pop	r8
    15c2:	7f 90       	pop	r7
    15c4:	6f 90       	pop	r6
    15c6:	5f 90       	pop	r5
    15c8:	4f 90       	pop	r4
    15ca:	08 95       	ret

000015cc <opt_run_game>:

void opt_run_game()
{
	CURRENT_SCORE = 0;
    15cc:	10 92 2f 03 	sts	0x032F, r1
    15d0:	10 92 2e 03 	sts	0x032E, r1
	int back_to_menu = 0;
	EXIT_APPLICATION = 0;
    15d4:	10 92 db 02 	sts	0x02DB, r1
    15d8:	10 92 da 02 	sts	0x02DA, r1
		//Update input
		int diff = adc_update_current_input();
		if(diff != 0)
		{
			send_current_input();
			printf("Send input %d\n", diff);
    15dc:	09 ec       	ldi	r16, 0xC9	; 201
    15de:	12 e0       	ldi	r17, 0x02	; 2
{
	CURRENT_SCORE = 0;
	int back_to_menu = 0;
	EXIT_APPLICATION = 0;
	
	while (!back_to_menu) // game loop
    15e0:	10 c0       	rjmp	.+32     	; 0x1602 <opt_run_game+0x36>
		
		//Update input
		int diff = adc_update_current_input();
		if(diff != 0)
		{
			send_current_input();
    15e2:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <send_current_input>
			printf("Send input %d\n", diff);
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	1f 93       	push	r17
    15ec:	0f 93       	push	r16
    15ee:	0e 94 67 14 	call	0x28ce	; 0x28ce <printf>
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
		}
		
		app_show_gamescreen();
    15fa:	0e 94 d6 07 	call	0xfac	; 0xfac <app_show_gamescreen>
		
		//Handle input
		CAN_handle_message();
    15fe:	0e 94 b7 04 	call	0x96e	; 0x96e <CAN_handle_message>
	
	while (!back_to_menu) // game loop
	{
		
		//Update input
		int diff = adc_update_current_input();
    1602:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <adc_update_current_input>
    1606:	ec 01       	movw	r28, r24
		if(diff != 0)
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	59 f7       	brne	.-42     	; 0x15e2 <opt_run_game+0x16>
    160c:	f6 cf       	rjmp	.-20     	; 0x15fa <opt_run_game+0x2e>

0000160e <opt_exit_application>:
	
}

void opt_exit_application()
{
	EXIT_APPLICATION = 1; 
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	90 93 db 02 	sts	0x02DB, r25
    1616:	80 93 da 02 	sts	0x02DA, r24
    161a:	08 95       	ret

0000161c <adc_read>:
{
	//unsigned char *p;	
	volatile char *p = (char *) 0x1400;
	
	//Selects correct address for chosen channel
	p[0] =  0x1403 + channel;
    161c:	8d 5f       	subi	r24, 0xFD	; 253
    161e:	80 93 00 14 	sts	0x1400, r24
	
	//Wait for result
	while(!finished){}
    1622:	80 91 e0 02 	lds	r24, 0x02E0
    1626:	90 91 e1 02 	lds	r25, 0x02E1
    162a:	89 2b       	or	r24, r25
    162c:	d1 f3       	breq	.-12     	; 0x1622 <adc_read+0x6>
	finished = 0;
    162e:	10 92 e1 02 	sts	0x02E1, r1
    1632:	10 92 e0 02 	sts	0x02E0, r1
	
	//Gather data
	return *p;
    1636:	80 91 00 14 	lds	r24, 0x1400
}
    163a:	08 95       	ret

0000163c <__vector_2>:
	
	
}

ISR(INT1_vect)
{
    163c:	1f 92       	push	r1
    163e:	0f 92       	push	r0
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	0f 92       	push	r0
    1644:	11 24       	eor	r1, r1
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
	finished = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	90 93 e1 02 	sts	0x02E1, r25
    1652:	80 93 e0 02 	sts	0x02E0, r24
}
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <adc_joy_calibrate>:

void adc_joy_calibrate()
{
	//Reads midpoint & defines it as zero level
	x_mid_point = adc_read(1);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 0e 0b 	call	0x161c	; 0x161c <adc_read>
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	90 93 2d 03 	sts	0x032D, r25
    1672:	80 93 2c 03 	sts	0x032C, r24
	y_mid_point = adc_read(2);
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 0e 0b 	call	0x161c	; 0x161c <adc_read>
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	90 93 45 03 	sts	0x0345, r25
    1684:	80 93 44 03 	sts	0x0344, r24
    1688:	08 95       	ret

0000168a <adc_init>:
}

void adc_init()
{
	
	sei();
    168a:	78 94       	sei
	//Sets MCU control register, for falling edge
	MCUCR |= (1<<ISC11);
    168c:	85 b7       	in	r24, 0x35	; 53
    168e:	88 60       	ori	r24, 0x08	; 8
    1690:	85 bf       	out	0x35, r24	; 53
	
	//Enables interrupt on pin
	GICR |= (1 << INT1);
    1692:	8b b7       	in	r24, 0x3b	; 59
    1694:	80 68       	ori	r24, 0x80	; 128
    1696:	8b bf       	out	0x3b, r24	; 59
	
	//Enable pin inputs
	DDRB &= ~((1 << PB1)|(1 << PB2)|(1 << PB3));
    1698:	87 b3       	in	r24, 0x17	; 23
    169a:	81 7f       	andi	r24, 0xF1	; 241
    169c:	87 bb       	out	0x17, r24	; 23
	
	//Calibrates joystick
	adc_joy_calibrate();
    169e:	0e 94 32 0b 	call	0x1664	; 0x1664 <adc_joy_calibrate>
	cli();
    16a2:	f8 94       	cli
    16a4:	08 95       	ret

000016a6 <adc_joy_position>:
	x_mid_point = adc_read(1);
	y_mid_point = adc_read(2);
}

struct j_pos adc_joy_position()
{
    16a6:	cf 92       	push	r12
    16a8:	df 92       	push	r13
    16aa:	ef 92       	push	r14
    16ac:	ff 92       	push	r15
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <adc_joy_position+0x12>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <adc_joy_position+0x14>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <adc_joy_position+0x16>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
	uint8_t joystick_y_analog = 0;
	int joystick_x_perc = 0;
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 0e 0b 	call	0x161c	; 0x161c <adc_read>
    16c8:	08 2f       	mov	r16, r24
	joystick_y_analog = adc_read(2);
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 0e 0b 	call	0x161c	; 0x161c <adc_read>
    16d2:	c8 2e       	mov	r12, r24
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    16d4:	20 91 2c 03 	lds	r18, 0x032C
    16d8:	30 91 2d 03 	lds	r19, 0x032D
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    16dc:	e0 90 44 03 	lds	r14, 0x0344
    16e0:	f0 90 45 03 	lds	r15, 0x0345
	
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    16e4:	16 b3       	in	r17, 0x16	; 22
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
	joystick_y_analog = adc_read(2);
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    16e6:	80 2f       	mov	r24, r16
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	82 1b       	sub	r24, r18
    16ec:	93 0b       	sbc	r25, r19
    16ee:	0f 2e       	mov	r0, r31
    16f0:	f4 e6       	ldi	r31, 0x64	; 100
    16f2:	df 2e       	mov	r13, r31
    16f4:	f0 2d       	mov	r31, r0
    16f6:	d8 9e       	mul	r13, r24
    16f8:	b0 01       	movw	r22, r0
    16fa:	d9 9e       	mul	r13, r25
    16fc:	70 0d       	add	r23, r0
    16fe:	11 24       	eor	r1, r1
    1700:	88 27       	eor	r24, r24
    1702:	77 fd       	sbrc	r23, 7
    1704:	80 95       	com	r24
    1706:	98 2f       	mov	r25, r24
    1708:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4e ef       	ldi	r20, 0xFE	; 254
    1712:	52 e4       	ldi	r21, 0x42	; 66
    1714:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__divsf3>
    1718:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
    171c:	06 2f       	mov	r16, r22
    171e:	86 2f       	mov	r24, r22
    1720:	97 2f       	mov	r25, r23
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    1726:	8c 2d       	mov	r24, r12
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	8e 19       	sub	r24, r14
    172c:	9f 09       	sbc	r25, r15
    172e:	d8 9e       	mul	r13, r24
    1730:	b0 01       	movw	r22, r0
    1732:	d9 9e       	mul	r13, r25
    1734:	70 0d       	add	r23, r0
    1736:	11 24       	eor	r1, r1
    1738:	88 27       	eor	r24, r24
    173a:	77 fd       	sbrc	r23, 7
    173c:	80 95       	com	r24
    173e:	98 2f       	mov	r25, r24
    1740:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4e ef       	ldi	r20, 0xFE	; 254
    174a:	52 e4       	ldi	r21, 0x42	; 66
    174c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__divsf3>
    1750:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
    1754:	86 2f       	mov	r24, r22
    1756:	97 2f       	mov	r25, r23
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
	
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    175c:	16 95       	lsr	r17
    175e:	16 95       	lsr	r17
    1760:	16 95       	lsr	r17
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	18 27       	eor	r17, r24
    1766:	11 70       	andi	r17, 0x01	; 1
	
	return pos;
    1768:	1d 83       	std	Y+5, r17	; 0x05
    176a:	1e 82       	std	Y+6, r1	; 0x06
    176c:	20 2f       	mov	r18, r16
    176e:	3a 81       	ldd	r19, Y+2	; 0x02
    1770:	46 2f       	mov	r20, r22
    1772:	5c 81       	ldd	r21, Y+4	; 0x04
    1774:	61 2f       	mov	r22, r17
    1776:	70 e0       	ldi	r23, 0x00	; 0
}
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	26 96       	adiw	r28, 0x06	; 6
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	08 95       	ret

0000179a <adc_slider_position_left>:

int adc_slider_position_left()
{
	return 100*adc_read(3)/((float)255);
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 0e 0b 	call	0x161c	; 0x161c <adc_read>
    17a2:	24 e6       	ldi	r18, 0x64	; 100
    17a4:	82 9f       	mul	r24, r18
    17a6:	c0 01       	movw	r24, r0
    17a8:	11 24       	eor	r1, r1
    17aa:	bc 01       	movw	r22, r24
    17ac:	88 27       	eor	r24, r24
    17ae:	77 fd       	sbrc	r23, 7
    17b0:	80 95       	com	r24
    17b2:	98 2f       	mov	r25, r24
    17b4:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	53 e4       	ldi	r21, 0x43	; 67
    17c0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__divsf3>
    17c4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
}
    17c8:	cb 01       	movw	r24, r22
    17ca:	08 95       	ret

000017cc <adc_slider_position_right>:

int adc_slider_position_right()
{
	return 100*adc_read(4)/((float)255);
    17cc:	84 e0       	ldi	r24, 0x04	; 4
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 0e 0b 	call	0x161c	; 0x161c <adc_read>
    17d4:	24 e6       	ldi	r18, 0x64	; 100
    17d6:	82 9f       	mul	r24, r18
    17d8:	c0 01       	movw	r24, r0
    17da:	11 24       	eor	r1, r1
    17dc:	bc 01       	movw	r22, r24
    17de:	88 27       	eor	r24, r24
    17e0:	77 fd       	sbrc	r23, 7
    17e2:	80 95       	com	r24
    17e4:	98 2f       	mov	r25, r24
    17e6:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	53 e4       	ldi	r21, 0x43	; 67
    17f2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__divsf3>
    17f6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
}
    17fa:	cb 01       	movw	r24, r22
    17fc:	08 95       	ret

000017fe <joystick_down>:

}

int joystick_down()
{
	return (PREV_INPUT.joystick.y_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p < -JOYSTICK_MENU_DEADZONE);
    17fe:	80 91 52 03 	lds	r24, 0x0352
    1802:	90 91 53 03 	lds	r25, 0x0353
    1806:	85 3c       	cpi	r24, 0xC5	; 197
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	5c f0       	brlt	.+22     	; 0x1822 <joystick_down+0x24>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	20 91 20 03 	lds	r18, 0x0320
    1814:	30 91 21 03 	lds	r19, 0x0321
    1818:	24 3c       	cpi	r18, 0xC4	; 196
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	24 f0       	brlt	.+8      	; 0x1826 <joystick_down+0x28>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	08 95       	ret
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
}
    1826:	08 95       	ret

00001828 <joystick_up>:

int joystick_up()
{
	return (PREV_INPUT.joystick.y_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p > JOYSTICK_MENU_DEADZONE);
    1828:	80 91 52 03 	lds	r24, 0x0352
    182c:	90 91 53 03 	lds	r25, 0x0353
    1830:	cc 97       	sbiw	r24, 0x3c	; 60
    1832:	5c f4       	brge	.+22     	; 0x184a <joystick_up+0x22>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	20 91 20 03 	lds	r18, 0x0320
    183c:	30 91 21 03 	lds	r19, 0x0321
    1840:	2d 33       	cpi	r18, 0x3D	; 61
    1842:	31 05       	cpc	r19, r1
    1844:	24 f4       	brge	.+8      	; 0x184e <joystick_up+0x26>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	08 95       	ret
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
}
    184e:	08 95       	ret

00001850 <joystick_left>:

int joystick_left()
{
	return (PREV_INPUT.joystick.x_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p < -JOYSTICK_MENU_DEADZONE);
    1850:	80 91 50 03 	lds	r24, 0x0350
    1854:	90 91 51 03 	lds	r25, 0x0351
    1858:	85 3c       	cpi	r24, 0xC5	; 197
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	5c f0       	brlt	.+22     	; 0x1874 <joystick_left+0x24>
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	20 91 1e 03 	lds	r18, 0x031E
    1866:	30 91 1f 03 	lds	r19, 0x031F
    186a:	24 3c       	cpi	r18, 0xC4	; 196
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	24 f0       	brlt	.+8      	; 0x1878 <joystick_left+0x28>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	08 95       	ret
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
}
    1878:	08 95       	ret

0000187a <joystick_right>:

int joystick_right()
{
	return (PREV_INPUT.joystick.x_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p > JOYSTICK_MENU_DEADZONE);
    187a:	80 91 50 03 	lds	r24, 0x0350
    187e:	90 91 51 03 	lds	r25, 0x0351
    1882:	cc 97       	sbiw	r24, 0x3c	; 60
    1884:	5c f4       	brge	.+22     	; 0x189c <joystick_right+0x22>
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	20 91 1e 03 	lds	r18, 0x031E
    188e:	30 91 1f 03 	lds	r19, 0x031F
    1892:	2d 33       	cpi	r18, 0x3D	; 61
    1894:	31 05       	cpc	r19, r1
    1896:	24 f4       	brge	.+8      	; 0x18a0 <joystick_right+0x26>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	08 95       	ret
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
}
    18a0:	08 95       	ret

000018a2 <send_current_input>:

void send_current_input()
{
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	2b 97       	sbiw	r28, 0x0b	; 11
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
	struct can_frame message = CAN_frame_init(ID_INPUT_UPDATE,5);
    18b6:	45 e0       	ldi	r20, 0x05	; 5
    18b8:	64 e0       	ldi	r22, 0x04	; 4
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	ce 01       	movw	r24, r28
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	0e 94 8c 04 	call	0x918	; 0x918 <CAN_frame_init>
	message.data[0] = CURRENT_INPUT.joystick.x_p;
    18c4:	80 91 1e 03 	lds	r24, 0x031E
    18c8:	8c 83       	std	Y+4, r24	; 0x04
	message.data[1] = CURRENT_INPUT.joystick.x_p;
    18ca:	8d 83       	std	Y+5, r24	; 0x05
	message.data[2] = CURRENT_INPUT.joystick.button;
    18cc:	80 91 22 03 	lds	r24, 0x0322
    18d0:	8e 83       	std	Y+6, r24	; 0x06
	message.data[3] = CURRENT_INPUT.button_l;
    18d2:	80 91 28 03 	lds	r24, 0x0328
    18d6:	8f 83       	std	Y+7, r24	; 0x07
	message.data[4] = CURRENT_INPUT.button_r;
    18d8:	80 91 2a 03 	lds	r24, 0x032A
    18dc:	88 87       	std	Y+8, r24	; 0x08
	CAN_send_frame(&message);
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_send_frame>
	LAST_TRANSMITTED_INPUT = CURRENT_INPUT;
    18e6:	8e e0       	ldi	r24, 0x0E	; 14
    18e8:	ee e1       	ldi	r30, 0x1E	; 30
    18ea:	f3 e0       	ldi	r31, 0x03	; 3
    18ec:	ae e5       	ldi	r26, 0x5E	; 94
    18ee:	b3 e0       	ldi	r27, 0x03	; 3
    18f0:	01 90       	ld	r0, Z+
    18f2:	0d 92       	st	X+, r0
    18f4:	8a 95       	dec	r24
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <send_current_input+0x4e>
}
    18f8:	2b 96       	adiw	r28, 0x0b	; 11
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <compare_new_input>:

int compare_new_input(struct input new_input)
{
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	2e 97       	sbiw	r28, 0x0e	; 14
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
	int difference = 0;
	
	//Compare binary values
	if (PREV_INPUT.button_l != LAST_TRANSMITTED_INPUT.button_l) return 1;
    192a:	20 91 5a 03 	lds	r18, 0x035A
    192e:	30 91 5b 03 	lds	r19, 0x035B
    1932:	80 91 68 03 	lds	r24, 0x0368
    1936:	90 91 69 03 	lds	r25, 0x0369
    193a:	28 17       	cp	r18, r24
    193c:	39 07       	cpc	r19, r25
    193e:	09 f0       	breq	.+2      	; 0x1942 <compare_new_input+0x38>
    1940:	81 c0       	rjmp	.+258    	; 0x1a44 <compare_new_input+0x13a>
	if (PREV_INPUT.button_r != LAST_TRANSMITTED_INPUT.button_r) return 10;
    1942:	20 91 5c 03 	lds	r18, 0x035C
    1946:	30 91 5d 03 	lds	r19, 0x035D
    194a:	80 91 6a 03 	lds	r24, 0x036A
    194e:	90 91 6b 03 	lds	r25, 0x036B
    1952:	28 17       	cp	r18, r24
    1954:	39 07       	cpc	r19, r25
    1956:	09 f0       	breq	.+2      	; 0x195a <compare_new_input+0x50>
    1958:	78 c0       	rjmp	.+240    	; 0x1a4a <compare_new_input+0x140>
	if (PREV_INPUT.joystick.button != LAST_TRANSMITTED_INPUT.joystick.button) return 100;
    195a:	20 91 54 03 	lds	r18, 0x0354
    195e:	30 91 55 03 	lds	r19, 0x0355
    1962:	80 91 62 03 	lds	r24, 0x0362
    1966:	90 91 63 03 	lds	r25, 0x0363
    196a:	28 17       	cp	r18, r24
    196c:	39 07       	cpc	r19, r25
    196e:	09 f0       	breq	.+2      	; 0x1972 <compare_new_input+0x68>
    1970:	6f c0       	rjmp	.+222    	; 0x1a50 <compare_new_input+0x146>
	
	//Compare sliders
	if (PREV_INPUT.slider_l > LAST_TRANSMITTED_INPUT.slider_l + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_l < LAST_TRANSMITTED_INPUT.slider_l - SLIDER_TRANSMIT_DEADZONE) return 200;
    1972:	80 91 56 03 	lds	r24, 0x0356
    1976:	90 91 57 03 	lds	r25, 0x0357
    197a:	20 91 64 03 	lds	r18, 0x0364
    197e:	30 91 65 03 	lds	r19, 0x0365
    1982:	a9 01       	movw	r20, r18
    1984:	4e 5f       	subi	r20, 0xFE	; 254
    1986:	5f 4f       	sbci	r21, 0xFF	; 255
    1988:	48 17       	cp	r20, r24
    198a:	59 07       	cpc	r21, r25
    198c:	0c f4       	brge	.+2      	; 0x1990 <compare_new_input+0x86>
    198e:	63 c0       	rjmp	.+198    	; 0x1a56 <compare_new_input+0x14c>
    1990:	22 50       	subi	r18, 0x02	; 2
    1992:	31 09       	sbc	r19, r1
    1994:	82 17       	cp	r24, r18
    1996:	93 07       	cpc	r25, r19
    1998:	0c f4       	brge	.+2      	; 0x199c <compare_new_input+0x92>
    199a:	60 c0       	rjmp	.+192    	; 0x1a5c <compare_new_input+0x152>
	if (PREV_INPUT.slider_r > LAST_TRANSMITTED_INPUT.slider_r + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_r < LAST_TRANSMITTED_INPUT.slider_r - SLIDER_TRANSMIT_DEADZONE) return 250;
    199c:	80 91 58 03 	lds	r24, 0x0358
    19a0:	90 91 59 03 	lds	r25, 0x0359
    19a4:	20 91 66 03 	lds	r18, 0x0366
    19a8:	30 91 67 03 	lds	r19, 0x0367
    19ac:	a9 01       	movw	r20, r18
    19ae:	4e 5f       	subi	r20, 0xFE	; 254
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	48 17       	cp	r20, r24
    19b4:	59 07       	cpc	r21, r25
    19b6:	0c f4       	brge	.+2      	; 0x19ba <compare_new_input+0xb0>
    19b8:	54 c0       	rjmp	.+168    	; 0x1a62 <compare_new_input+0x158>
    19ba:	22 50       	subi	r18, 0x02	; 2
    19bc:	31 09       	sbc	r19, r1
    19be:	82 17       	cp	r24, r18
    19c0:	93 07       	cpc	r25, r19
    19c2:	0c f4       	brge	.+2      	; 0x19c6 <compare_new_input+0xbc>
    19c4:	51 c0       	rjmp	.+162    	; 0x1a68 <compare_new_input+0x15e>
	
	//Compare joystick
	if (PREV_INPUT.joystick.x_p < LAST_TRANSMITTED_INPUT.joystick.x_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.x_p > LAST_TRANSMITTED_INPUT.joystick.x_p + JOYSTICK_TRANSMIT_DEADZONE) return 280;
    19c6:	80 91 50 03 	lds	r24, 0x0350
    19ca:	90 91 51 03 	lds	r25, 0x0351
    19ce:	20 91 5e 03 	lds	r18, 0x035E
    19d2:	30 91 5f 03 	lds	r19, 0x035F
    19d6:	a9 01       	movw	r20, r18
    19d8:	47 50       	subi	r20, 0x07	; 7
    19da:	51 09       	sbc	r21, r1
    19dc:	84 17       	cp	r24, r20
    19de:	95 07       	cpc	r25, r21
    19e0:	0c f4       	brge	.+2      	; 0x19e4 <compare_new_input+0xda>
    19e2:	45 c0       	rjmp	.+138    	; 0x1a6e <compare_new_input+0x164>
    19e4:	42 5f       	subi	r20, 0xF2	; 242
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	48 17       	cp	r20, r24
    19ea:	59 07       	cpc	r21, r25
    19ec:	0c f4       	brge	.+2      	; 0x19f0 <compare_new_input+0xe6>
    19ee:	42 c0       	rjmp	.+132    	; 0x1a74 <compare_new_input+0x16a>
	if (PREV_INPUT.joystick.y_p < LAST_TRANSMITTED_INPUT.joystick.y_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.y_p > LAST_TRANSMITTED_INPUT.joystick.y_p + JOYSTICK_TRANSMIT_DEADZONE) return 290;
    19f0:	40 91 52 03 	lds	r20, 0x0352
    19f4:	50 91 53 03 	lds	r21, 0x0353
    19f8:	80 91 60 03 	lds	r24, 0x0360
    19fc:	90 91 61 03 	lds	r25, 0x0361
    1a00:	bc 01       	movw	r22, r24
    1a02:	67 50       	subi	r22, 0x07	; 7
    1a04:	71 09       	sbc	r23, r1
    1a06:	46 17       	cp	r20, r22
    1a08:	57 07       	cpc	r21, r23
    1a0a:	bc f1       	brlt	.+110    	; 0x1a7a <compare_new_input+0x170>
    1a0c:	62 5f       	subi	r22, 0xF2	; 242
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	64 17       	cp	r22, r20
    1a12:	75 07       	cpc	r23, r21
    1a14:	ac f1       	brlt	.+106    	; 0x1a80 <compare_new_input+0x176>
	
	//Snap back to zero
	if (CURRENT_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.x_p != 0) return 300;
    1a16:	40 91 1e 03 	lds	r20, 0x031E
    1a1a:	50 91 1f 03 	lds	r21, 0x031F
    1a1e:	4a 5f       	subi	r20, 0xFA	; 250
    1a20:	5f 4f       	sbci	r21, 0xFF	; 255
    1a22:	4d 30       	cpi	r20, 0x0D	; 13
    1a24:	51 05       	cpc	r21, r1
    1a26:	10 f4       	brcc	.+4      	; 0x1a2c <compare_new_input+0x122>
    1a28:	23 2b       	or	r18, r19
    1a2a:	69 f5       	brne	.+90     	; 0x1a86 <compare_new_input+0x17c>
	if (CURRENT_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.y_p != 0) return 301;
    1a2c:	20 91 20 03 	lds	r18, 0x0320
    1a30:	30 91 21 03 	lds	r19, 0x0321
    1a34:	2a 5f       	subi	r18, 0xFA	; 250
    1a36:	3f 4f       	sbci	r19, 0xFF	; 255
    1a38:	2d 30       	cpi	r18, 0x0D	; 13
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	38 f5       	brcc	.+78     	; 0x1a8c <compare_new_input+0x182>
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	41 f5       	brne	.+80     	; 0x1a92 <compare_new_input+0x188>
    1a42:	29 c0       	rjmp	.+82     	; 0x1a96 <compare_new_input+0x18c>
int compare_new_input(struct input new_input)
{
	int difference = 0;
	
	//Compare binary values
	if (PREV_INPUT.button_l != LAST_TRANSMITTED_INPUT.button_l) return 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	26 c0       	rjmp	.+76     	; 0x1a96 <compare_new_input+0x18c>
	if (PREV_INPUT.button_r != LAST_TRANSMITTED_INPUT.button_r) return 10;
    1a4a:	8a e0       	ldi	r24, 0x0A	; 10
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	23 c0       	rjmp	.+70     	; 0x1a96 <compare_new_input+0x18c>
	if (PREV_INPUT.joystick.button != LAST_TRANSMITTED_INPUT.joystick.button) return 100;
    1a50:	84 e6       	ldi	r24, 0x64	; 100
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	20 c0       	rjmp	.+64     	; 0x1a96 <compare_new_input+0x18c>
	
	//Compare sliders
	if (PREV_INPUT.slider_l > LAST_TRANSMITTED_INPUT.slider_l + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_l < LAST_TRANSMITTED_INPUT.slider_l - SLIDER_TRANSMIT_DEADZONE) return 200;
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	1d c0       	rjmp	.+58     	; 0x1a96 <compare_new_input+0x18c>
    1a5c:	88 ec       	ldi	r24, 0xC8	; 200
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	1a c0       	rjmp	.+52     	; 0x1a96 <compare_new_input+0x18c>
	if (PREV_INPUT.slider_r > LAST_TRANSMITTED_INPUT.slider_r + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_r < LAST_TRANSMITTED_INPUT.slider_r - SLIDER_TRANSMIT_DEADZONE) return 250;
    1a62:	8a ef       	ldi	r24, 0xFA	; 250
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	17 c0       	rjmp	.+46     	; 0x1a96 <compare_new_input+0x18c>
    1a68:	8a ef       	ldi	r24, 0xFA	; 250
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <compare_new_input+0x18c>
	
	//Compare joystick
	if (PREV_INPUT.joystick.x_p < LAST_TRANSMITTED_INPUT.joystick.x_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.x_p > LAST_TRANSMITTED_INPUT.joystick.x_p + JOYSTICK_TRANSMIT_DEADZONE) return 280;
    1a6e:	88 e1       	ldi	r24, 0x18	; 24
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	11 c0       	rjmp	.+34     	; 0x1a96 <compare_new_input+0x18c>
    1a74:	88 e1       	ldi	r24, 0x18	; 24
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <compare_new_input+0x18c>
	if (PREV_INPUT.joystick.y_p < LAST_TRANSMITTED_INPUT.joystick.y_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.y_p > LAST_TRANSMITTED_INPUT.joystick.y_p + JOYSTICK_TRANSMIT_DEADZONE) return 290;
    1a7a:	82 e2       	ldi	r24, 0x22	; 34
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <compare_new_input+0x18c>
    1a80:	82 e2       	ldi	r24, 0x22	; 34
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	08 c0       	rjmp	.+16     	; 0x1a96 <compare_new_input+0x18c>
	
	//Snap back to zero
	if (CURRENT_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.x_p != 0) return 300;
    1a86:	8c e2       	ldi	r24, 0x2C	; 44
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <compare_new_input+0x18c>
	if (CURRENT_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.y_p != 0) return 301;
	
	return difference;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <compare_new_input+0x18c>
	if (PREV_INPUT.joystick.x_p < LAST_TRANSMITTED_INPUT.joystick.x_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.x_p > LAST_TRANSMITTED_INPUT.joystick.x_p + JOYSTICK_TRANSMIT_DEADZONE) return 280;
	if (PREV_INPUT.joystick.y_p < LAST_TRANSMITTED_INPUT.joystick.y_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.y_p > LAST_TRANSMITTED_INPUT.joystick.y_p + JOYSTICK_TRANSMIT_DEADZONE) return 290;
	
	//Snap back to zero
	if (CURRENT_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.x_p != 0) return 300;
	if (CURRENT_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.y_p != 0) return 301;
    1a92:	8d e2       	ldi	r24, 0x2D	; 45
    1a94:	91 e0       	ldi	r25, 0x01	; 1
	
	return difference;
}
    1a96:	2e 96       	adiw	r28, 0x0e	; 14
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	08 95       	ret

00001ab4 <adc_update_current_input>:
	//Delays for readability
	_delay_ms(50);
}

int adc_update_current_input()
{
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
	//Check if there is a difference
	int difference = compare_new_input();
    1ab8:	0e 94 85 0c 	call	0x190a	; 0x190a <compare_new_input>
    1abc:	ec 01       	movw	r28, r24
	
	//CURRENT INPUT IS NOW PREVIOUS INPUT
	PREV_INPUT = CURRENT_INPUT;
    1abe:	8e e0       	ldi	r24, 0x0E	; 14
    1ac0:	ee e1       	ldi	r30, 0x1E	; 30
    1ac2:	f3 e0       	ldi	r31, 0x03	; 3
    1ac4:	a0 e5       	ldi	r26, 0x50	; 80
    1ac6:	b3 e0       	ldi	r27, 0x03	; 3
    1ac8:	01 90       	ld	r0, Z+
    1aca:	0d 92       	st	X+, r0
    1acc:	8a 95       	dec	r24
    1ace:	e1 f7       	brne	.-8      	; 0x1ac8 <adc_update_current_input+0x14>
	
	CURRENT_INPUT.joystick = adc_joy_position();
    1ad0:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <adc_joy_position>
    1ad4:	20 93 1e 03 	sts	0x031E, r18
    1ad8:	30 93 1f 03 	sts	0x031F, r19
    1adc:	40 93 20 03 	sts	0x0320, r20
    1ae0:	50 93 21 03 	sts	0x0321, r21
    1ae4:	60 93 22 03 	sts	0x0322, r22
    1ae8:	70 93 23 03 	sts	0x0323, r23
	
	//Checks sliders
	CURRENT_INPUT.slider_l = adc_slider_position_left();
    1aec:	0e 94 cd 0b 	call	0x179a	; 0x179a <adc_slider_position_left>
    1af0:	90 93 25 03 	sts	0x0325, r25
    1af4:	80 93 24 03 	sts	0x0324, r24
	CURRENT_INPUT.slider_r = adc_slider_position_right();
    1af8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <adc_slider_position_right>
    1afc:	90 93 27 03 	sts	0x0327, r25
    1b00:	80 93 26 03 	sts	0x0326, r24
	
	//Checks button
	CURRENT_INPUT.button_l = PINB&(1<<PB1);
    1b04:	86 b3       	in	r24, 0x16	; 22
    1b06:	82 70       	andi	r24, 0x02	; 2
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	90 93 29 03 	sts	0x0329, r25
    1b0e:	80 93 28 03 	sts	0x0328, r24
	CURRENT_INPUT.button_r = PINB&(1<<PB2);
    1b12:	86 b3       	in	r24, 0x16	; 22
    1b14:	84 70       	andi	r24, 0x04	; 4
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	90 93 2b 03 	sts	0x032B, r25
    1b1c:	80 93 2a 03 	sts	0x032A, r24
	
	//Apply deadzone
	if (CURRENT_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) CURRENT_INPUT.joystick.x_p = 0;
    1b20:	80 91 1e 03 	lds	r24, 0x031E
    1b24:	90 91 1f 03 	lds	r25, 0x031F
    1b28:	06 96       	adiw	r24, 0x06	; 6
    1b2a:	0d 97       	sbiw	r24, 0x0d	; 13
    1b2c:	20 f4       	brcc	.+8      	; 0x1b36 <adc_update_current_input+0x82>
    1b2e:	10 92 1f 03 	sts	0x031F, r1
    1b32:	10 92 1e 03 	sts	0x031E, r1
	if (CURRENT_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) CURRENT_INPUT.joystick.y_p = 0;
    1b36:	80 91 20 03 	lds	r24, 0x0320
    1b3a:	90 91 21 03 	lds	r25, 0x0321
    1b3e:	06 96       	adiw	r24, 0x06	; 6
    1b40:	0d 97       	sbiw	r24, 0x0d	; 13
    1b42:	20 f4       	brcc	.+8      	; 0x1b4c <adc_update_current_input+0x98>
    1b44:	10 92 21 03 	sts	0x0321, r1
    1b48:	10 92 20 03 	sts	0x0320, r1
	
	return difference;

}
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <ext_mem_init>:
#include <avr/sleep.h>

void ext_mem_init()
{
	//Enables External Memory Interface
	MCUCR |= (1<<SRE);
    1b54:	85 b7       	in	r24, 0x35	; 53
    1b56:	80 68       	ori	r24, 0x80	; 128
    1b58:	85 bf       	out	0x35, r24	; 53
	
	//Turns off PC7-4 for address bits, they are used as jtag anyways
	SFIOR |= (1<<XMM2);
    1b5a:	80 b7       	in	r24, 0x30	; 48
    1b5c:	80 62       	ori	r24, 0x20	; 32
    1b5e:	80 bf       	out	0x30, r24	; 48
    1b60:	08 95       	ret

00001b62 <ext_mem_write>:

}

void ext_mem_write(char *address, char val)
{
	*address = val; 
    1b62:	fc 01       	movw	r30, r24
    1b64:	60 83       	st	Z, r22
    1b66:	08 95       	ret

00001b68 <ext_mem_read>:
}

char ext_mem_read(char *address)
{
	return *(address);
}
    1b68:	fc 01       	movw	r30, r24
    1b6a:	80 81       	ld	r24, Z
    1b6c:	08 95       	ret

00001b6e <music_start_transmission>:

}

void music_start_transmission()
{
	SELECT_PORT |= (1 << SELECT_PIN); //Sends interrupt to node 3
    1b6e:	c0 9a       	sbi	0x18, 0	; 24
    1b70:	08 95       	ret

00001b72 <music_end_transmission>:
}

void music_end_transmission()
{
	SELECT_PORT &= ~(1 << SELECT_PIN); //Pulls it low
    1b72:	c0 98       	cbi	0x18, 0	; 24
    1b74:	08 95       	ret

00001b76 <music_init>:
void music_function_pin(int PIN, int v);

void music_init()
{
	//Sets up ports
	DDRB |= (1 << PB0);
    1b76:	b8 9a       	sbi	0x17, 0	; 23
	DDRD |= (1 << PD4)|(1 << PD5);
    1b78:	81 b3       	in	r24, 0x11	; 17
    1b7a:	80 63       	ori	r24, 0x30	; 48
    1b7c:	81 bb       	out	0x11, r24	; 17
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
	else if (v == 0) FUNCTION_PORT &= ~(1 << PIN);
    1b7e:	94 98       	cbi	0x12, 4	; 18
    1b80:	95 98       	cbi	0x12, 5	; 18
	//Initializes pin values
	music_function_pin(CTRL_MODE_PIN,0);
	music_function_pin(DIRECTION_PIN,0);
	
	//Completes setup
	music_start_transmission();
    1b82:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <music_start_transmission>
    1b86:	2f ef       	ldi	r18, 0xFF	; 255
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	92 e0       	ldi	r25, 0x02	; 2
    1b8c:	21 50       	subi	r18, 0x01	; 1
    1b8e:	80 40       	sbci	r24, 0x00	; 0
    1b90:	90 40       	sbci	r25, 0x00	; 0
    1b92:	e1 f7       	brne	.-8      	; 0x1b8c <music_init+0x16>
    1b94:	00 c0       	rjmp	.+0      	; 0x1b96 <music_init+0x20>
    1b96:	00 c0       	rjmp	.+0      	; 0x1b98 <music_init+0x22>
	_delay_ms(200);
	music_end_transmission();
    1b98:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <music_end_transmission>
    1b9c:	08 95       	ret

00001b9e <music_start_up_sound>:
{
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
    1b9e:	94 9a       	sbi	0x12, 4	; 18
    1ba0:	95 9a       	sbi	0x12, 5	; 18

void music_start_up_sound()
{
	music_function_pin(CTRL_MODE_PIN,1);
	music_function_pin(DIRECTION_PIN,1);
	music_start_transmission();
    1ba2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <music_start_transmission>
    1ba6:	2f ef       	ldi	r18, 0xFF	; 255
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	92 e0       	ldi	r25, 0x02	; 2
    1bac:	21 50       	subi	r18, 0x01	; 1
    1bae:	80 40       	sbci	r24, 0x00	; 0
    1bb0:	90 40       	sbci	r25, 0x00	; 0
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <music_start_up_sound+0xe>
    1bb4:	00 c0       	rjmp	.+0      	; 0x1bb6 <music_start_up_sound+0x18>
    1bb6:	00 c0       	rjmp	.+0      	; 0x1bb8 <music_start_up_sound+0x1a>
	_delay_ms(200);
	music_end_transmission();
    1bb8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <music_end_transmission>
    1bbc:	08 95       	ret

00001bbe <oled_go_to>:
}

void oled_go_to(uint8_t col, uint8_t page)
{
	//Sets pointers
	page_index = page;
    1bbe:	60 93 6d 03 	sts	0x036D, r22
	col_index = col; 
    1bc2:	80 93 6c 03 	sts	0x036C, r24
	
	//Set page
	*OLED_CMD = 0xB0 | (0b00000111 & page_index);
    1bc6:	e0 91 61 01 	lds	r30, 0x0161
    1bca:	f0 91 62 01 	lds	r31, 0x0162
    1bce:	80 91 6d 03 	lds	r24, 0x036D
    1bd2:	87 70       	andi	r24, 0x07	; 7
    1bd4:	80 6b       	ori	r24, 0xB0	; 176
    1bd6:	80 83       	st	Z, r24
		
	//Set lower start col
	*OLED_CMD = (0b00001111 & col_index);
    1bd8:	e0 91 61 01 	lds	r30, 0x0161
    1bdc:	f0 91 62 01 	lds	r31, 0x0162
    1be0:	80 91 6c 03 	lds	r24, 0x036C
    1be4:	8f 70       	andi	r24, 0x0F	; 15
    1be6:	80 83       	st	Z, r24
		
	//Set higher start col
	*OLED_CMD = 0x10 | (col_index >> 4);
    1be8:	e0 91 61 01 	lds	r30, 0x0161
    1bec:	f0 91 62 01 	lds	r31, 0x0162
    1bf0:	80 91 6c 03 	lds	r24, 0x036C
    1bf4:	82 95       	swap	r24
    1bf6:	8f 70       	andi	r24, 0x0F	; 15
    1bf8:	80 61       	ori	r24, 0x10	; 16
    1bfa:	80 83       	st	Z, r24
    1bfc:	08 95       	ret

00001bfe <oled_page_write>:
}

void oled_page_write(uint8_t byte)
{
	//Set page
	*OLED_CMD = 0xB0 | (0b00000111 & page_index);
    1bfe:	e0 91 61 01 	lds	r30, 0x0161
    1c02:	f0 91 62 01 	lds	r31, 0x0162
    1c06:	90 91 6d 03 	lds	r25, 0x036D
    1c0a:	97 70       	andi	r25, 0x07	; 7
    1c0c:	90 6b       	ori	r25, 0xB0	; 176
    1c0e:	90 83       	st	Z, r25

	//Set lower start col
	*OLED_CMD = (0b00001111 & col_index);
    1c10:	e0 91 61 01 	lds	r30, 0x0161
    1c14:	f0 91 62 01 	lds	r31, 0x0162
    1c18:	90 91 6c 03 	lds	r25, 0x036C
    1c1c:	9f 70       	andi	r25, 0x0F	; 15
    1c1e:	90 83       	st	Z, r25

	//Set higher start col
	*OLED_CMD = 0x10 | (col_index >> 4);
    1c20:	e0 91 61 01 	lds	r30, 0x0161
    1c24:	f0 91 62 01 	lds	r31, 0x0162
    1c28:	90 91 6c 03 	lds	r25, 0x036C
    1c2c:	92 95       	swap	r25
    1c2e:	9f 70       	andi	r25, 0x0F	; 15
    1c30:	90 61       	ori	r25, 0x10	; 16
    1c32:	90 83       	st	Z, r25
	
	//Write value
	*OLED_DATA = byte;
    1c34:	e0 91 5f 01 	lds	r30, 0x015F
    1c38:	f0 91 60 01 	lds	r31, 0x0160
    1c3c:	80 83       	st	Z, r24
    1c3e:	08 95       	ret

00001c40 <oled_clear_screen>:
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
	//Remembers where the pointers pointed
	uint8_t save_col = col_index;
    1c4a:	f0 90 6c 03 	lds	r15, 0x036C
	uint8_t save_page = page_index;
    1c4e:	00 91 6d 03 	lds	r16, 0x036D
    1c52:	d0 e0       	ldi	r29, 0x00	; 0
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	0d c0       	rjmp	.+26     	; 0x1c72 <oled_clear_screen+0x32>
	//Clears all pixels
	for (int page = 0; page < 8; page++)
	{
		for (int column = 0; column < 128; column++)
		{
			oled_go_to(column,page); //0-7 pages with a byte in each
    1c58:	6d 2f       	mov	r22, r29
    1c5a:	8c 2f       	mov	r24, r28
    1c5c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
			oled_page_write(0);
    1c60:	81 2f       	mov	r24, r17
    1c62:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <oled_page_write>
    1c66:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t save_page = page_index;
	
	//Clears all pixels
	for (int page = 0; page < 8; page++)
	{
		for (int column = 0; column < 128; column++)
    1c68:	c0 38       	cpi	r28, 0x80	; 128
    1c6a:	b1 f7       	brne	.-20     	; 0x1c58 <oled_clear_screen+0x18>
    1c6c:	df 5f       	subi	r29, 0xFF	; 255
	//Remembers where the pointers pointed
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;
	
	//Clears all pixels
	for (int page = 0; page < 8; page++)
    1c6e:	d8 30       	cpi	r29, 0x08	; 8
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <oled_clear_screen+0x36>
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    1c72:	c1 2f       	mov	r28, r17
    1c74:	f1 cf       	rjmp	.-30     	; 0x1c58 <oled_clear_screen+0x18>
			oled_page_write(0);
		}
	}
	
	//Resets pointers to previous position
	col_index = save_col;
    1c76:	f0 92 6c 03 	sts	0x036C, r15
	page_index = save_page;
    1c7a:	00 93 6d 03 	sts	0x036D, r16
}
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	08 95       	ret

00001c8a <oled_home>:
}


void oled_home()
{
	oled_go_to(0,0);
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
    1c92:	08 95       	ret

00001c94 <oled_write_SRAM>:
}

void oled_write_SRAM(char byte)
{
	uint16_t addr = col_index + 128*page_index;//Transfers from col and row pointer to index in SRAM buffer
    1c94:	90 91 6c 03 	lds	r25, 0x036C
    1c98:	20 91 6d 03 	lds	r18, 0x036D
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	24 9f       	mul	r18, r20
    1ca0:	90 01       	movw	r18, r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	29 0f       	add	r18, r25
    1ca6:	31 1d       	adc	r19, r1
	if (addr < (0x0400) && addr >= 0) ext_mem_write((char *)(SRAM_BUFFER+addr),byte);
    1ca8:	21 15       	cp	r18, r1
    1caa:	94 e0       	ldi	r25, 0x04	; 4
    1cac:	39 07       	cpc	r19, r25
    1cae:	50 f4       	brcc	.+20     	; 0x1cc4 <oled_write_SRAM+0x30>
    1cb0:	40 91 5d 01 	lds	r20, 0x015D
    1cb4:	50 91 5e 01 	lds	r21, 0x015E
    1cb8:	68 2f       	mov	r22, r24
    1cba:	ca 01       	movw	r24, r20
    1cbc:	82 0f       	add	r24, r18
    1cbe:	93 1f       	adc	r25, r19
    1cc0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ext_mem_write>
    1cc4:	08 95       	ret

00001cc6 <oled_char_write_big>:
	//Write value
	*OLED_DATA = byte;
}

int oled_char_write_big(char c)
{
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	28 e0       	ldi	r18, 0x08	; 8
    1cd0:	82 9f       	mul	r24, r18
    1cd2:	c0 01       	movw	r24, r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	c9 53       	subi	r28, 0x39	; 57
    1cda:	dd 4f       	sbci	r29, 0xFD	; 253
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32; 
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 8; i++)
    1cdc:	00 e0       	ldi	r16, 0x00	; 0
    1cde:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font8[char_array_index][i]));
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	84 91       	lpm	r24, Z
    1ce4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    1ce8:	60 91 6d 03 	lds	r22, 0x036D
    1cec:	80 91 6c 03 	lds	r24, 0x036C
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32; 
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 8; i++)
    1cf6:	0f 5f       	subi	r16, 0xFF	; 255
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	21 96       	adiw	r28, 0x01	; 1
    1cfc:	08 30       	cpi	r16, 0x08	; 8
    1cfe:	11 05       	cpc	r17, r1
    1d00:	79 f7       	brne	.-34     	; 0x1ce0 <oled_char_write_big+0x1a>
	{
		oled_write_SRAM(pgm_read_byte(&font8[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	08 95       	ret

00001d10 <oled_char_write_normal>:


int oled_char_write_normal(char c)
{
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
    1d18:	c8 2f       	mov	r28, r24
    1d1a:	d0 e0       	ldi	r29, 0x00	; 0
    1d1c:	a0 97       	sbiw	r28, 0x20	; 32
    1d1e:	ce 01       	movw	r24, r28
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	c8 0f       	add	r28, r24
    1d2a:	d9 1f       	adc	r29, r25
    1d2c:	c4 51       	subi	r28, 0x14	; 20
    1d2e:	de 4f       	sbci	r29, 0xFE	; 254
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 5; i++)
    1d30:	00 e0       	ldi	r16, 0x00	; 0
    1d32:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font5[char_array_index][i]));
    1d34:	fe 01       	movw	r30, r28
    1d36:	84 91       	lpm	r24, Z
    1d38:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    1d3c:	60 91 6d 03 	lds	r22, 0x036D
    1d40:	80 91 6c 03 	lds	r24, 0x036C
    1d44:	8f 5f       	subi	r24, 0xFF	; 255
    1d46:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 5; i++)
    1d4a:	0f 5f       	subi	r16, 0xFF	; 255
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	21 96       	adiw	r28, 0x01	; 1
    1d50:	05 30       	cpi	r16, 0x05	; 5
    1d52:	11 05       	cpc	r17, r1
    1d54:	79 f7       	brne	.-34     	; 0x1d34 <oled_char_write_normal+0x24>
	{
		oled_write_SRAM(pgm_read_byte(&font5[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	08 95       	ret

00001d64 <oled_char_write_small>:


int oled_char_write_small(char c)
{
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	24 e0       	ldi	r18, 0x04	; 4
    1d6e:	82 9f       	mul	r24, r18
    1d70:	c0 01       	movw	r24, r0
    1d72:	11 24       	eor	r1, r1
    1d74:	ec 01       	movw	r28, r24
    1d76:	c0 51       	subi	r28, 0x10	; 16
    1d78:	d0 40       	sbci	r29, 0x00	; 0
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 4; i++)
    1d7a:	00 e0       	ldi	r16, 0x00	; 0
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font4[char_array_index][i]));
    1d7e:	fe 01       	movw	r30, r28
    1d80:	84 91       	lpm	r24, Z
    1d82:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    1d86:	60 91 6d 03 	lds	r22, 0x036D
    1d8a:	80 91 6c 03 	lds	r24, 0x036C
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 4; i++)
    1d94:	0f 5f       	subi	r16, 0xFF	; 255
    1d96:	1f 4f       	sbci	r17, 0xFF	; 255
    1d98:	21 96       	adiw	r28, 0x01	; 1
    1d9a:	04 30       	cpi	r16, 0x04	; 4
    1d9c:	11 05       	cpc	r17, r1
    1d9e:	79 f7       	brne	.-34     	; 0x1d7e <oled_char_write_small+0x1a>
	{
		oled_write_SRAM(pgm_read_byte(&font4[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <oled_read_SRAM>:
	if (addr < (0x0400) && addr >= 0) ext_mem_write((char *)(SRAM_BUFFER+addr),byte);
}

char oled_read_SRAM()
{
	uint16_t addr = col_index + 128*page_index;//Transfers from col and row pointer to index in SRAM buffer
    1dae:	20 91 6c 03 	lds	r18, 0x036C
    1db2:	80 91 6d 03 	lds	r24, 0x036D
    1db6:	30 e8       	ldi	r19, 0x80	; 128
    1db8:	83 9f       	mul	r24, r19
    1dba:	c0 01       	movw	r24, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	82 0f       	add	r24, r18
    1dc0:	91 1d       	adc	r25, r1
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
    1dc2:	9c 01       	movw	r18, r24
    1dc4:	21 50       	subi	r18, 0x01	; 1
    1dc6:	31 09       	sbc	r19, r1
    1dc8:	2f 3f       	cpi	r18, 0xFF	; 255
    1dca:	33 40       	sbci	r19, 0x03	; 3
    1dcc:	48 f4       	brcc	.+18     	; 0x1de0 <oled_read_SRAM+0x32>
    1dce:	20 91 5d 01 	lds	r18, 0x015D
    1dd2:	30 91 5e 01 	lds	r19, 0x015E
    1dd6:	82 0f       	add	r24, r18
    1dd8:	93 1f       	adc	r25, r19
    1dda:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <ext_mem_read>
    1dde:	08 95       	ret
	else return 0; //If out of bounds, we return 
    1de0:	80 e0       	ldi	r24, 0x00	; 0
}
    1de2:	08 95       	ret

00001de4 <oled_update_from_SRAM>:

void oled_update_from_SRAM()
{
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
	//Save current row and column index
	uint8_t save_col = col_index;
    1dee:	f0 90 6c 03 	lds	r15, 0x036C
	uint8_t save_page = page_index;
    1df2:	00 91 6d 03 	lds	r16, 0x036D

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
    1df6:	d0 e0       	ldi	r29, 0x00	; 0
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
	else return 0; //If out of bounds, we return 
}

void oled_update_from_SRAM()
{
    1df8:	10 e0       	ldi	r17, 0x00	; 0
    1dfa:	0e c0       	rjmp	.+28     	; 0x1e18 <oled_update_from_SRAM+0x34>
	uint8_t c, p;
	for (c = 0; c < 128; c++)
	{
		for (p = 0; p < 8; p++)
		{
			oled_go_to(c,p);
    1dfc:	6c 2f       	mov	r22, r28
    1dfe:	8d 2f       	mov	r24, r29
    1e00:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
			oled_page_write(oled_read_SRAM());
    1e04:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <oled_read_SRAM>
    1e08:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <oled_page_write>

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
	{
		for (p = 0; p < 8; p++)
    1e0c:	cf 5f       	subi	r28, 0xFF	; 255
    1e0e:	c8 30       	cpi	r28, 0x08	; 8
    1e10:	a9 f7       	brne	.-22     	; 0x1dfc <oled_update_from_SRAM+0x18>
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
    1e12:	df 5f       	subi	r29, 0xFF	; 255
    1e14:	d0 38       	cpi	r29, 0x80	; 128
    1e16:	11 f0       	breq	.+4      	; 0x1e1c <oled_update_from_SRAM+0x38>
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
	else return 0; //If out of bounds, we return 
}

void oled_update_from_SRAM()
{
    1e18:	c1 2f       	mov	r28, r17
    1e1a:	f0 cf       	rjmp	.-32     	; 0x1dfc <oled_update_from_SRAM+0x18>
			oled_page_write(oled_read_SRAM());
		}
	}

	//Recover old indexes
	col_index = save_col;
    1e1c:	f0 92 6c 03 	sts	0x036C, r15
	page_index = save_page;
    1e20:	00 93 6d 03 	sts	0x036D, r16
}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	08 95       	ret

00001e30 <oled_clear_SRAM>:

void oled_clear_SRAM()
{
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
	for (uint16_t i = 0; i < 0x400; i++) ext_mem_write((char *)(SRAM_BUFFER+i),0);
    1e34:	c0 e0       	ldi	r28, 0x00	; 0
    1e36:	d0 e0       	ldi	r29, 0x00	; 0
    1e38:	80 91 5d 01 	lds	r24, 0x015D
    1e3c:	90 91 5e 01 	lds	r25, 0x015E
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	8c 0f       	add	r24, r28
    1e44:	9d 1f       	adc	r25, r29
    1e46:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ext_mem_write>
    1e4a:	21 96       	adiw	r28, 0x01	; 1
    1e4c:	c1 15       	cp	r28, r1
    1e4e:	84 e0       	ldi	r24, 0x04	; 4
    1e50:	d8 07       	cpc	r29, r24
    1e52:	91 f7       	brne	.-28     	; 0x1e38 <oled_clear_SRAM+0x8>
}
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <oled_init>:


void oled_init()
{
	//Enable external memory
	ext_mem_init();
    1e5a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <ext_mem_init>
	
	//Set row and col pointer to 0
	page_index = 0;
    1e5e:	10 92 6d 03 	sts	0x036D, r1
	col_index = 0;
    1e62:	10 92 6c 03 	sts	0x036C, r1
	
	//Configures the oled (copied from datasheet (shamelessly))
	*OLED_CMD = DISPLAY_OFF;									//Display  off
    1e66:	e0 91 61 01 	lds	r30, 0x0161
    1e6a:	f0 91 62 01 	lds	r31, 0x0162
    1e6e:	8e ea       	ldi	r24, 0xAE	; 174
    1e70:	80 83       	st	Z, r24
	*OLED_CMD = SEGMENT_REMAP_MODE_0;							//Segment  remap
    1e72:	e0 91 61 01 	lds	r30, 0x0161
    1e76:	f0 91 62 01 	lds	r31, 0x0162
    1e7a:	81 ea       	ldi	r24, 0xA1	; 161
    1e7c:	80 83       	st	Z, r24
	*OLED_CMD = COMMON_PADS_HARDWARE;							//Common  pads  hardware:  alternative
    1e7e:	e0 91 61 01 	lds	r30, 0x0161
    1e82:	f0 91 62 01 	lds	r31, 0x0162
    1e86:	8a ed       	ldi	r24, 0xDA	; 218
    1e88:	80 83       	st	Z, r24
	*OLED_CMD = 0x12;
    1e8a:	e0 91 61 01 	lds	r30, 0x0161
    1e8e:	f0 91 62 01 	lds	r31, 0x0162
    1e92:	82 e1       	ldi	r24, 0x12	; 18
    1e94:	80 83       	st	Z, r24
	*OLED_CMD = COMMON_OUTPUT_SCAN_DIRECTION;					//Common output scan direction:com63~com0
    1e96:	e0 91 61 01 	lds	r30, 0x0161
    1e9a:	f0 91 62 01 	lds	r31, 0x0162
    1e9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ea0:	80 83       	st	Z, r24
	*OLED_CMD = MULTIPLEX_RATIO_MODE_63;						//Multiplex  ration  mode:63
    1ea2:	e0 91 61 01 	lds	r30, 0x0161
    1ea6:	f0 91 62 01 	lds	r31, 0x0162
    1eaa:	88 ea       	ldi	r24, 0xA8	; 168
    1eac:	80 83       	st	Z, r24
	*OLED_CMD = 0x3f;
    1eae:	e0 91 61 01 	lds	r30, 0x0161
    1eb2:	f0 91 62 01 	lds	r31, 0x0162
    1eb6:	8f e3       	ldi	r24, 0x3F	; 63
    1eb8:	80 83       	st	Z, r24
	*OLED_CMD = DISPLAY_DIVITE_RATIO_OSC_FREQ_MODE;				//Display divide ratio/osc. freq. mode
    1eba:	e0 91 61 01 	lds	r30, 0x0161
    1ebe:	f0 91 62 01 	lds	r31, 0x0162
    1ec2:	85 ed       	ldi	r24, 0xD5	; 213
    1ec4:	80 83       	st	Z, r24
	*OLED_CMD = 0x80;
    1ec6:	e0 91 61 01 	lds	r30, 0x0161
    1eca:	f0 91 62 01 	lds	r31, 0x0162
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	80 83       	st	Z, r24
	*OLED_CMD = CONTRAST_CONTROL;								//Contrast  control
    1ed2:	e0 91 61 01 	lds	r30, 0x0161
    1ed6:	f0 91 62 01 	lds	r31, 0x0162
    1eda:	81 e8       	ldi	r24, 0x81	; 129
    1edc:	80 83       	st	Z, r24
	*OLED_CMD = 0x50;
    1ede:	e0 91 61 01 	lds	r30, 0x0161
    1ee2:	f0 91 62 01 	lds	r31, 0x0162
    1ee6:	80 e5       	ldi	r24, 0x50	; 80
    1ee8:	80 83       	st	Z, r24
	*OLED_CMD = PRE_CHARGE_PERIOD;								//Set  pre-charge  period
    1eea:	e0 91 61 01 	lds	r30, 0x0161
    1eee:	f0 91 62 01 	lds	r31, 0x0162
    1ef2:	89 ed       	ldi	r24, 0xD9	; 217
    1ef4:	80 83       	st	Z, r24
	*OLED_CMD = 0x21;
    1ef6:	e0 91 61 01 	lds	r30, 0x0161
    1efa:	f0 91 62 01 	lds	r31, 0x0162
    1efe:	81 e2       	ldi	r24, 0x21	; 33
    1f00:	80 83       	st	Z, r24
	*OLED_CMD = SET_MEMORY_ADDRESSING_MODE_PAGE;				//Set  Memory  Addressing  Mode
    1f02:	e0 91 61 01 	lds	r30, 0x0161
    1f06:	f0 91 62 01 	lds	r31, 0x0162
    1f0a:	82 e2       	ldi	r24, 0x22	; 34
    1f0c:	80 83       	st	Z, r24
	*OLED_CMD = 0x02;
    1f0e:	e0 91 61 01 	lds	r30, 0x0161
    1f12:	f0 91 62 01 	lds	r31, 0x0162
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	80 83       	st	Z, r24
	*OLED_CMD = VCOM_DESELECT_LEVEL_MODE;						//VCOM  deselect  level  mode
    1f1a:	e0 91 61 01 	lds	r30, 0x0161
    1f1e:	f0 91 62 01 	lds	r31, 0x0162
    1f22:	8b ed       	ldi	r24, 0xDB	; 219
    1f24:	80 83       	st	Z, r24
	*OLED_CMD = 0x30;
    1f26:	e0 91 61 01 	lds	r30, 0x0161
    1f2a:	f0 91 62 01 	lds	r31, 0x0162
    1f2e:	80 e3       	ldi	r24, 0x30	; 48
    1f30:	80 83       	st	Z, r24
	*OLED_CMD = MASTER_CONFIG;									//Master  configuration
    1f32:	e0 91 61 01 	lds	r30, 0x0161
    1f36:	f0 91 62 01 	lds	r31, 0x0162
    1f3a:	8d ea       	ldi	r24, 0xAD	; 173
    1f3c:	80 83       	st	Z, r24
	*OLED_CMD = 0x00;
    1f3e:	e0 91 61 01 	lds	r30, 0x0161
    1f42:	f0 91 62 01 	lds	r31, 0x0162
    1f46:	10 82       	st	Z, r1
	*OLED_CMD = OUT_FOLLOWS_RAM_CONTENT;						//Out  follows  RAM  content
    1f48:	e0 91 61 01 	lds	r30, 0x0161
    1f4c:	f0 91 62 01 	lds	r31, 0x0162
    1f50:	84 ea       	ldi	r24, 0xA4	; 164
    1f52:	80 83       	st	Z, r24
	*OLED_CMD = SET_NORMAL_DISPLAY;								//Set  normal  display
    1f54:	e0 91 61 01 	lds	r30, 0x0161
    1f58:	f0 91 62 01 	lds	r31, 0x0162
    1f5c:	86 ea       	ldi	r24, 0xA6	; 166
    1f5e:	80 83       	st	Z, r24
	*OLED_CMD = 0x40;
    1f60:	e0 91 61 01 	lds	r30, 0x0161
    1f64:	f0 91 62 01 	lds	r31, 0x0162
    1f68:	80 e4       	ldi	r24, 0x40	; 64
    1f6a:	80 83       	st	Z, r24
	*OLED_CMD = DISPLAY_ON;										//Display  on
    1f6c:	e0 91 61 01 	lds	r30, 0x0161
    1f70:	f0 91 62 01 	lds	r31, 0x0162
    1f74:	8f ea       	ldi	r24, 0xAF	; 175
    1f76:	80 83       	st	Z, r24
	
	//Clears the screen
	oled_clear_screen();
    1f78:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <oled_clear_screen>

	//Clear SRAM buffer
	oled_clear_SRAM();
    1f7c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
    1f80:	08 95       	ret

00001f82 <oled_cstring_write>:
{
	for (uint16_t i = 0; i < 0x400; i++) ext_mem_write((char *)(SRAM_BUFFER+i),0);
}

void oled_cstring_write(char *c, int size)
{	
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	ec 01       	movw	r28, r24
	int i = 0;
	if (size == 0) while (c[i] != '\0'){ oled_char_write_small(c[i]); i++; }
    1f88:	61 15       	cp	r22, r1
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	51 f4       	brne	.+20     	; 0x1fa2 <oled_cstring_write+0x20>
    1f8e:	88 81       	ld	r24, Y
    1f90:	88 23       	and	r24, r24
    1f92:	01 f1       	breq	.+64     	; 0x1fd4 <oled_cstring_write+0x52>
    1f94:	21 96       	adiw	r28, 0x01	; 1
    1f96:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <oled_char_write_small>
    1f9a:	89 91       	ld	r24, Y+
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	fb cf       	rjmp	.-10     	; 0x1f96 <oled_cstring_write+0x14>
    1fa0:	19 c0       	rjmp	.+50     	; 0x1fd4 <oled_cstring_write+0x52>
	else if (size == 1) while (c[i] != '\0'){ oled_char_write_normal(c[i]); i++; }
    1fa2:	61 30       	cpi	r22, 0x01	; 1
    1fa4:	71 05       	cpc	r23, r1
    1fa6:	51 f4       	brne	.+20     	; 0x1fbc <oled_cstring_write+0x3a>
    1fa8:	88 81       	ld	r24, Y
    1faa:	88 23       	and	r24, r24
    1fac:	99 f0       	breq	.+38     	; 0x1fd4 <oled_cstring_write+0x52>
    1fae:	21 96       	adiw	r28, 0x01	; 1
    1fb0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <oled_char_write_normal>
    1fb4:	89 91       	ld	r24, Y+
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	fb cf       	rjmp	.-10     	; 0x1fb0 <oled_cstring_write+0x2e>
    1fba:	0c c0       	rjmp	.+24     	; 0x1fd4 <oled_cstring_write+0x52>
	else if (size == 2) while (c[i] != '\0'){ oled_char_write_big(c[i]); i++; }	
    1fbc:	62 30       	cpi	r22, 0x02	; 2
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	49 f4       	brne	.+18     	; 0x1fd4 <oled_cstring_write+0x52>
    1fc2:	88 81       	ld	r24, Y
    1fc4:	88 23       	and	r24, r24
    1fc6:	31 f0       	breq	.+12     	; 0x1fd4 <oled_cstring_write+0x52>
    1fc8:	21 96       	adiw	r28, 0x01	; 1
    1fca:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <oled_char_write_big>
    1fce:	89 91       	ld	r24, Y+
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	fb cf       	rjmp	.-10     	; 0x1fca <oled_cstring_write+0x48>
		
}
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <oled_write_pixel>:

void oled_write_pixel(int x, int y, int t)
{
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	ea 01       	movw	r28, r20
	//Save current row and column index
	uint8_t save_col = col_index;
    1fe6:	00 91 6c 03 	lds	r16, 0x036C
	uint8_t save_page = page_index;
    1fea:	10 91 6d 03 	lds	r17, 0x036D
	
	//Calculate position
	int page = y/8;
	int pixel_offset = y%8;
    1fee:	9b 01       	movw	r18, r22
    1ff0:	27 70       	andi	r18, 0x07	; 7
    1ff2:	30 78       	andi	r19, 0x80	; 128
    1ff4:	33 23       	and	r19, r19
    1ff6:	34 f4       	brge	.+12     	; 0x2004 <oled_write_pixel+0x2a>
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	28 6f       	ori	r18, 0xF8	; 248
    1ffe:	3f 6f       	ori	r19, 0xFF	; 255
    2000:	2f 5f       	subi	r18, 0xFF	; 255
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	f2 2e       	mov	r15, r18
	//Save current row and column index
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;
	
	//Calculate position
	int page = y/8;
    2006:	fb 01       	movw	r30, r22
    2008:	ff 23       	and	r31, r31
    200a:	0c f4       	brge	.+2      	; 0x200e <oled_write_pixel+0x34>
    200c:	37 96       	adiw	r30, 0x07	; 7
    200e:	bf 01       	movw	r22, r30
    2010:	75 95       	asr	r23
    2012:	67 95       	ror	r22
    2014:	75 95       	asr	r23
    2016:	67 95       	ror	r22
    2018:	75 95       	asr	r23
    201a:	67 95       	ror	r22
	int pixel_offset = y%8;
	
	int column = x;
	oled_go_to(column,page);
    201c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	
	if (t == 0)
    2020:	cd 2b       	or	r28, r29
    2022:	79 f4       	brne	.+30     	; 0x2042 <oled_write_pixel+0x68>
	{
		//Turn off pixel
		char current_state = oled_read_SRAM();
    2024:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <oled_read_SRAM>
		oled_write_SRAM(current_state & ~(1 << pixel_offset));
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	9a 01       	movw	r18, r20
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <oled_write_pixel+0x5a>
    2030:	22 0f       	add	r18, r18
    2032:	33 1f       	adc	r19, r19
    2034:	fa 94       	dec	r15
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <oled_write_pixel+0x56>
    2038:	20 95       	com	r18
    203a:	82 23       	and	r24, r18
    203c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <oled_write_SRAM>
    2040:	0d c0       	rjmp	.+26     	; 0x205c <oled_write_pixel+0x82>
	}
	else
	{
		//Turn on pixel
		char current_state = oled_read_SRAM();
    2042:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <oled_read_SRAM>
		char new_state = current_state | (1 << pixel_offset);
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	9a 01       	movw	r18, r20
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <oled_write_pixel+0x78>
    204e:	22 0f       	add	r18, r18
    2050:	33 1f       	adc	r19, r19
    2052:	fa 94       	dec	r15
    2054:	e2 f7       	brpl	.-8      	; 0x204e <oled_write_pixel+0x74>
		oled_write_SRAM(new_state);
    2056:	82 2b       	or	r24, r18
    2058:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <oled_write_SRAM>
	}
	
	//Recover old indexes
	col_index = save_col;
    205c:	00 93 6c 03 	sts	0x036C, r16
	page_index = save_page;
    2060:	10 93 6d 03 	sts	0x036D, r17
}
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	ff 90       	pop	r15
    206e:	08 95       	ret

00002070 <oled_write_line>:

void oled_write_line(int x0, int y0, int x1, int y1)
{
    2070:	2f 92       	push	r2
    2072:	3f 92       	push	r3
    2074:	4f 92       	push	r4
    2076:	5f 92       	push	r5
    2078:	6f 92       	push	r6
    207a:	7f 92       	push	r7
    207c:	8f 92       	push	r8
    207e:	9f 92       	push	r9
    2080:	af 92       	push	r10
    2082:	bf 92       	push	r11
    2084:	cf 92       	push	r12
    2086:	df 92       	push	r13
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	28 97       	sbiw	r28, 0x08	; 8
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	2c 01       	movw	r4, r24
    20a6:	3b 01       	movw	r6, r22
    20a8:	8a 01       	movw	r16, r20
    20aa:	19 01       	movw	r2, r18
	//Calculates derivatives
	float dy_dx;
	float dx_dy;
	if ((x1 - x0) == 0)
    20ac:	48 17       	cp	r20, r24
    20ae:	59 07       	cpc	r21, r25
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <oled_write_line+0x44>
    20b2:	ad c0       	rjmp	.+346    	; 0x220e <oled_write_line+0x19e>
	{
		dy_dx = 100000;
		dx_dy = 0;
	}
	else if (((y1 - y0) == 0))
    20b4:	26 17       	cp	r18, r22
    20b6:	37 07       	cpc	r19, r23
    20b8:	09 f4       	brne	.+2      	; 0x20bc <oled_write_line+0x4c>
    20ba:	44 c0       	rjmp	.+136    	; 0x2144 <oled_write_line+0xd4>
		dy_dx = 0;
		dx_dy = 100000;
	}
	else
	{
		dy_dx = ((float)(y1 - y0))/(x1 - x0);
    20bc:	b9 01       	movw	r22, r18
    20be:	66 19       	sub	r22, r6
    20c0:	77 09       	sbc	r23, r7
    20c2:	88 27       	eor	r24, r24
    20c4:	77 fd       	sbrc	r23, 7
    20c6:	80 95       	com	r24
    20c8:	98 2f       	mov	r25, r24
    20ca:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    20ce:	4b 01       	movw	r8, r22
    20d0:	5c 01       	movw	r10, r24
    20d2:	b8 01       	movw	r22, r16
    20d4:	64 19       	sub	r22, r4
    20d6:	75 09       	sbc	r23, r5
    20d8:	88 27       	eor	r24, r24
    20da:	77 fd       	sbrc	r23, 7
    20dc:	80 95       	com	r24
    20de:	98 2f       	mov	r25, r24
    20e0:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    20e4:	6b 01       	movw	r12, r22
    20e6:	7c 01       	movw	r14, r24
    20e8:	9b 01       	movw	r18, r22
    20ea:	ac 01       	movw	r20, r24
    20ec:	c5 01       	movw	r24, r10
    20ee:	b4 01       	movw	r22, r8
    20f0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__divsf3>
    20f4:	69 83       	std	Y+1, r22	; 0x01
    20f6:	7a 83       	std	Y+2, r23	; 0x02
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    20fa:	9c 83       	std	Y+4, r25	; 0x04
		dx_dy = ((float)(x1 - x0))/(y1 - y0);
    20fc:	a5 01       	movw	r20, r10
    20fe:	94 01       	movw	r18, r8
    2100:	c7 01       	movw	r24, r14
    2102:	b6 01       	movw	r22, r12
    2104:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__divsf3>
    2108:	6d 83       	std	Y+5, r22	; 0x05
    210a:	7e 83       	std	Y+6, r23	; 0x06
    210c:	8f 83       	std	Y+7, r24	; 0x07
    210e:	98 87       	std	Y+8, r25	; 0x08
	}
	
	
	//Iterates over x-axis or y-axis, depending on derivative. This gives a clear line
	if (dy_dx < 1 && dy_dx > -1)
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	69 81       	ldd	r22, Y+1	; 0x01
    211a:	7a 81       	ldd	r23, Y+2	; 0x02
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__cmpsf2>
    2124:	88 23       	and	r24, r24
    2126:	0c f0       	brlt	.+2      	; 0x212a <oled_write_line+0xba>
    2128:	76 c0       	rjmp	.+236    	; 0x2216 <oled_write_line+0x1a6>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f eb       	ldi	r21, 0xBF	; 191
    2132:	69 81       	ldd	r22, Y+1	; 0x01
    2134:	7a 81       	ldd	r23, Y+2	; 0x02
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	0e 94 41 14 	call	0x2882	; 0x2882 <__gesf2>
    213e:	18 16       	cp	r1, r24
    2140:	2c f0       	brlt	.+10     	; 0x214c <oled_write_line+0xdc>
    2142:	69 c0       	rjmp	.+210    	; 0x2216 <oled_write_line+0x1a6>
		dy_dx = 100000;
		dx_dy = 0;
	}
	else if (((y1 - y0) == 0))
	{
		dy_dx = 0;
    2144:	19 82       	std	Y+1, r1	; 0x01
    2146:	1a 82       	std	Y+2, r1	; 0x02
    2148:	1b 82       	std	Y+3, r1	; 0x03
    214a:	1c 82       	std	Y+4, r1	; 0x04
	
	//Iterates over x-axis or y-axis, depending on derivative. This gives a clear line
	if (dy_dx < 1 && dy_dx > -1)
	{
		//If x1 < x0 we switch positions
		if (x1 < x0)
    214c:	04 15       	cp	r16, r4
    214e:	15 05       	cpc	r17, r5
    2150:	34 f4       	brge	.+12     	; 0x215e <oled_write_line+0xee>
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
			y0 = ym;
    2152:	31 01       	movw	r6, r2
    2154:	94 2d       	mov	r25, r4
    2156:	85 2d       	mov	r24, r5
			int ym = y1;
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
    2158:	28 01       	movw	r4, r16
		if (x1 < x0)
		{
			int xm = x1;
			int ym = y1;
			
			x1 = x0;
    215a:	09 2f       	mov	r16, r25
    215c:	18 2f       	mov	r17, r24
			
			x0 = xm;
			y0 = ym;
		}
		
		float ypos = (float)y0;
    215e:	b3 01       	movw	r22, r6
    2160:	88 27       	eor	r24, r24
    2162:	77 fd       	sbrc	r23, 7
    2164:	80 95       	com	r24
    2166:	98 2f       	mov	r25, r24
    2168:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    216c:	4b 01       	movw	r8, r22
    216e:	5c 01       	movw	r10, r24
		float xpos = (float)x0;
    2170:	b2 01       	movw	r22, r4
    2172:	88 27       	eor	r24, r24
    2174:	77 fd       	sbrc	r23, 7
    2176:	80 95       	com	r24
    2178:	98 2f       	mov	r25, r24
    217a:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    217e:	6b 01       	movw	r12, r22
    2180:	7c 01       	movw	r14, r24
		oled_write_pixel(xpos,ypos,1);
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	b3 01       	movw	r22, r6
    2188:	c2 01       	movw	r24, r4
    218a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <oled_write_pixel>
		for (xpos; xpos < x1; xpos++)
    218e:	b8 01       	movw	r22, r16
    2190:	88 27       	eor	r24, r24
    2192:	77 fd       	sbrc	r23, 7
    2194:	80 95       	com	r24
    2196:	98 2f       	mov	r25, r24
    2198:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    219c:	6d 83       	std	Y+5, r22	; 0x05
    219e:	7e 83       	std	Y+6, r23	; 0x06
    21a0:	8f 83       	std	Y+7, r24	; 0x07
    21a2:	98 87       	std	Y+8, r25	; 0x08
    21a4:	9b 01       	movw	r18, r22
    21a6:	ac 01       	movw	r20, r24
    21a8:	c7 01       	movw	r24, r14
    21aa:	b6 01       	movw	r22, r12
    21ac:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__cmpsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	0c f0       	brlt	.+2      	; 0x21b6 <oled_write_line+0x146>
    21b4:	91 c0       	rjmp	.+290    	; 0x22d8 <oled_write_line+0x268>
		{
			ypos+=dy_dx;
    21b6:	29 81       	ldd	r18, Y+1	; 0x01
    21b8:	3a 81       	ldd	r19, Y+2	; 0x02
    21ba:	4b 81       	ldd	r20, Y+3	; 0x03
    21bc:	5c 81       	ldd	r21, Y+4	; 0x04
    21be:	c5 01       	movw	r24, r10
    21c0:	b4 01       	movw	r22, r8
    21c2:	0e 94 8e 12 	call	0x251c	; 0x251c <__addsf3>
    21c6:	4b 01       	movw	r8, r22
    21c8:	5c 01       	movw	r10, r24
			oled_write_pixel(xpos,ypos,1);
    21ca:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
    21ce:	2b 01       	movw	r4, r22
    21d0:	3c 01       	movw	r6, r24
    21d2:	c7 01       	movw	r24, r14
    21d4:	b6 01       	movw	r22, r12
    21d6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	b2 01       	movw	r22, r4
    21e4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <oled_write_pixel>
		}
		
		float ypos = (float)y0;
		float xpos = (float)x0;
		oled_write_pixel(xpos,ypos,1);
		for (xpos; xpos < x1; xpos++)
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	c7 01       	movw	r24, r14
    21f2:	b6 01       	movw	r22, r12
    21f4:	0e 94 8e 12 	call	0x251c	; 0x251c <__addsf3>
    21f8:	6b 01       	movw	r12, r22
    21fa:	7c 01       	movw	r14, r24
    21fc:	2d 81       	ldd	r18, Y+5	; 0x05
    21fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2200:	4f 81       	ldd	r20, Y+7	; 0x07
    2202:	58 85       	ldd	r21, Y+8	; 0x08
    2204:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__cmpsf2>
    2208:	88 23       	and	r24, r24
    220a:	ac f2       	brlt	.-86     	; 0x21b6 <oled_write_line+0x146>
    220c:	65 c0       	rjmp	.+202    	; 0x22d8 <oled_write_line+0x268>
	float dy_dx;
	float dx_dy;
	if ((x1 - x0) == 0)
	{
		dy_dx = 100000;
		dx_dy = 0;
    220e:	1d 82       	std	Y+5, r1	; 0x05
    2210:	1e 82       	std	Y+6, r1	; 0x06
    2212:	1f 82       	std	Y+7, r1	; 0x07
    2214:	18 86       	std	Y+8, r1	; 0x08
		
	}
	else //Iterates over y
	{
		//If y1 < y0 we switch positions
		if (y1 < y0)
    2216:	26 14       	cp	r2, r6
    2218:	37 04       	cpc	r3, r7
    221a:	34 f4       	brge	.+12     	; 0x2228 <oled_write_line+0x1b8>
    221c:	96 2d       	mov	r25, r6
    221e:	87 2d       	mov	r24, r7
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
			y0 = ym;
    2220:	31 01       	movw	r6, r2
		{
			int xm = x1;
			int ym = y1;
			
			x1 = x0;
			y1 = y0;
    2222:	29 2e       	mov	r2, r25
    2224:	38 2e       	mov	r3, r24
			
			x0 = xm;
    2226:	28 01       	movw	r4, r16
			y0 = ym;
		}
		
		float ypos = (float)y0;
    2228:	b3 01       	movw	r22, r6
    222a:	88 27       	eor	r24, r24
    222c:	77 fd       	sbrc	r23, 7
    222e:	80 95       	com	r24
    2230:	98 2f       	mov	r25, r24
    2232:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    2236:	6b 01       	movw	r12, r22
    2238:	7c 01       	movw	r14, r24
		float xpos = (float)x0;
    223a:	b2 01       	movw	r22, r4
    223c:	88 27       	eor	r24, r24
    223e:	77 fd       	sbrc	r23, 7
    2240:	80 95       	com	r24
    2242:	98 2f       	mov	r25, r24
    2244:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    2248:	4b 01       	movw	r8, r22
    224a:	5c 01       	movw	r10, r24
		oled_write_pixel(xpos,ypos,1);
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	b3 01       	movw	r22, r6
    2252:	c2 01       	movw	r24, r4
    2254:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <oled_write_pixel>
		for (ypos; ypos < y1; ypos++)
    2258:	b1 01       	movw	r22, r2
    225a:	88 27       	eor	r24, r24
    225c:	77 fd       	sbrc	r23, 7
    225e:	80 95       	com	r24
    2260:	98 2f       	mov	r25, r24
    2262:	0e 94 91 13 	call	0x2722	; 0x2722 <__floatsisf>
    2266:	69 83       	std	Y+1, r22	; 0x01
    2268:	7a 83       	std	Y+2, r23	; 0x02
    226a:	8b 83       	std	Y+3, r24	; 0x03
    226c:	9c 83       	std	Y+4, r25	; 0x04
    226e:	9b 01       	movw	r18, r22
    2270:	ac 01       	movw	r20, r24
    2272:	c7 01       	movw	r24, r14
    2274:	b6 01       	movw	r22, r12
    2276:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__cmpsf2>
    227a:	88 23       	and	r24, r24
    227c:	6c f5       	brge	.+90     	; 0x22d8 <oled_write_line+0x268>
		{
			xpos+=dx_dy;
    227e:	2d 81       	ldd	r18, Y+5	; 0x05
    2280:	3e 81       	ldd	r19, Y+6	; 0x06
    2282:	4f 81       	ldd	r20, Y+7	; 0x07
    2284:	58 85       	ldd	r21, Y+8	; 0x08
    2286:	c5 01       	movw	r24, r10
    2288:	b4 01       	movw	r22, r8
    228a:	0e 94 8e 12 	call	0x251c	; 0x251c <__addsf3>
    228e:	4b 01       	movw	r8, r22
    2290:	5c 01       	movw	r10, r24
			oled_write_pixel(xpos,ypos,1);
    2292:	c7 01       	movw	r24, r14
    2294:	b6 01       	movw	r22, r12
    2296:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
    229a:	2b 01       	movw	r4, r22
    229c:	3c 01       	movw	r6, r24
    229e:	c5 01       	movw	r24, r10
    22a0:	b4 01       	movw	r22, r8
    22a2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	b2 01       	movw	r22, r4
    22b0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <oled_write_pixel>
		}
		
		float ypos = (float)y0;
		float xpos = (float)x0;
		oled_write_pixel(xpos,ypos,1);
		for (ypos; ypos < y1; ypos++)
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	c7 01       	movw	r24, r14
    22be:	b6 01       	movw	r22, r12
    22c0:	0e 94 8e 12 	call	0x251c	; 0x251c <__addsf3>
    22c4:	6b 01       	movw	r12, r22
    22c6:	7c 01       	movw	r14, r24
    22c8:	29 81       	ldd	r18, Y+1	; 0x01
    22ca:	3a 81       	ldd	r19, Y+2	; 0x02
    22cc:	4b 81       	ldd	r20, Y+3	; 0x03
    22ce:	5c 81       	ldd	r21, Y+4	; 0x04
    22d0:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__cmpsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	9c f2       	brlt	.-90     	; 0x227e <oled_write_line+0x20e>
		{
			xpos+=dx_dy;
			oled_write_pixel(xpos,ypos,1);
		}
	}
}
    22d8:	28 96       	adiw	r28, 0x08	; 8
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	7f 90       	pop	r7
    22fe:	6f 90       	pop	r6
    2300:	5f 90       	pop	r5
    2302:	4f 90       	pop	r4
    2304:	3f 90       	pop	r3
    2306:	2f 90       	pop	r2
    2308:	08 95       	ret

0000230a <main>:


int main(void)
{ 

	app_init(); //Initializes game
    230a:	0e 94 14 07 	call	0xe28	; 0xe28 <app_init>
	app_setup(); //Enters name, difficulty, etc
    230e:	0e 94 8b 05 	call	0xb16	; 0xb16 <app_setup>
	app_run();	//Runs the game/application 
    2312:	0e 94 a6 05 	call	0xb4c	; 0xb4c <app_run>
		_delay_ms(1);
		
	}
	*/
	return 0;
}
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	08 95       	ret

0000231c <opt_constr>:

//Previous input, hinders several inputs in short timespan
struct input prev_input;

void opt_constr(struct option *o, char *name, void (*a)())
{
    231c:	fc 01       	movw	r30, r24
	//Sets initial name
	o->name = name;
    231e:	71 83       	std	Z+1, r23	; 0x01
    2320:	60 83       	st	Z, r22
	
	//Sets initial next pointer
	o->next = NULL;
    2322:	15 82       	std	Z+5, r1	; 0x05
    2324:	14 82       	std	Z+4, r1	; 0x04

	//Sets action
	o->action = a;
    2326:	53 83       	std	Z+3, r21	; 0x03
    2328:	42 83       	std	Z+2, r20	; 0x02
	
	//Sets submenu
	o->submenu = NULL;
    232a:	11 86       	std	Z+9, r1	; 0x09
    232c:	10 86       	std	Z+8, r1	; 0x08
    232e:	08 95       	ret

00002330 <menu_constr>:
}

void menu_constr(struct menu *m, char *name)
{
    2330:	fc 01       	movw	r30, r24
	//Resets headline
	m->headline = name;
    2332:	71 83       	std	Z+1, r23	; 0x01
    2334:	60 83       	st	Z, r22

	//Sets root node as NULL
	m->root_option = NULL;
    2336:	13 82       	std	Z+3, r1	; 0x03
    2338:	12 82       	std	Z+2, r1	; 0x02
	
	//Sets cursor position at start
	m->cursor_pos = 0;
    233a:	15 82       	std	Z+5, r1	; 0x05
    233c:	14 82       	std	Z+4, r1	; 0x04
	
	//Sets current menu pointer
	m->curr_menu = m;
    233e:	97 83       	std	Z+7, r25	; 0x07
    2340:	86 83       	std	Z+6, r24	; 0x06
	
	//Sets parent menu
	m->parent_menu = NULL;
    2342:	11 86       	std	Z+9, r1	; 0x09
    2344:	10 86       	std	Z+8, r1	; 0x08
    2346:	08 95       	ret

00002348 <menu_print>:
	
}

void menu_print(struct menu *m)
{
    2348:	ff 92       	push	r15
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	8c 01       	movw	r16, r24
	//Print headline
	oled_go_to(HEADLINE_START_COLUMN, HEADLINE_START_PAGE);
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	8a e0       	ldi	r24, 0x0A	; 10
    2358:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	oled_cstring_write(m->curr_menu->headline,HEADLINE_SIZE);
    235c:	d8 01       	movw	r26, r16
    235e:	16 96       	adiw	r26, 0x06	; 6
    2360:	ed 91       	ld	r30, X+
    2362:	fc 91       	ld	r31, X
    2364:	17 97       	sbiw	r26, 0x07	; 7
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	91 81       	ldd	r25, Z+1	; 0x01
    236e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	
	//Print option-nodes
	struct option *opt_element = m->curr_menu->root_option;
    2372:	d8 01       	movw	r26, r16
    2374:	16 96       	adiw	r26, 0x06	; 6
    2376:	ed 91       	ld	r30, X+
    2378:	fc 91       	ld	r31, X
    237a:	17 97       	sbiw	r26, 0x07	; 7
    237c:	c2 81       	ldd	r28, Z+2	; 0x02
    237e:	d3 81       	ldd	r29, Z+3	; 0x03
	uint8_t col_number = 0;
	
	while (opt_element != NULL)
    2380:	20 97       	sbiw	r28, 0x00	; 0
    2382:	99 f0       	breq	.+38     	; 0x23aa <menu_print+0x62>
    2384:	68 94       	set
    2386:	ff 24       	eor	r15, r15
    2388:	f1 f8       	bld	r15, 1
	{
		oled_go_to(OPTION_START_COLUMN, OPTION_START_PAGE+col_number);
    238a:	6f 2d       	mov	r22, r15
    238c:	84 e1       	ldi	r24, 0x14	; 20
    238e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
		oled_cstring_write(opt_element->name,OPTION_SIZE);
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	88 81       	ld	r24, Y
    2398:	99 81       	ldd	r25, Y+1	; 0x01
    239a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
		opt_element = opt_element->next;
    239e:	0c 80       	ldd	r0, Y+4	; 0x04
    23a0:	dd 81       	ldd	r29, Y+5	; 0x05
    23a2:	c0 2d       	mov	r28, r0
    23a4:	f3 94       	inc	r15
	
	//Print option-nodes
	struct option *opt_element = m->curr_menu->root_option;
	uint8_t col_number = 0;
	
	while (opt_element != NULL)
    23a6:	20 97       	sbiw	r28, 0x00	; 0
    23a8:	81 f7       	brne	.-32     	; 0x238a <menu_print+0x42>
		oled_cstring_write(opt_element->name,OPTION_SIZE);
		opt_element = opt_element->next;
		col_number += 1;
	}
	//Print Cursor
	oled_go_to(CURSOR_START_COLUMN,OPTION_START_PAGE+m->curr_menu->cursor_pos);
    23aa:	d8 01       	movw	r26, r16
    23ac:	16 96       	adiw	r26, 0x06	; 6
    23ae:	ed 91       	ld	r30, X+
    23b0:	fc 91       	ld	r31, X
    23b2:	17 97       	sbiw	r26, 0x07	; 7
    23b4:	64 81       	ldd	r22, Z+4	; 0x04
    23b6:	6e 5f       	subi	r22, 0xFE	; 254
    23b8:	8a e0       	ldi	r24, 0x0A	; 10
    23ba:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <oled_go_to>
	oled_cstring_write(CURSOR_TYPE,OPTION_SIZE);
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	83 e6       	ldi	r24, 0x63	; 99
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <oled_cstring_write>
	
}
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	0f 91       	pop	r16
    23d2:	ff 90       	pop	r15
    23d4:	08 95       	ret

000023d6 <menu_count_options>:
}

int menu_count_options(struct menu *m)
{
	int number = 0;
	struct option *curr_option = m->root_option;
    23d6:	dc 01       	movw	r26, r24
    23d8:	12 96       	adiw	r26, 0x02	; 2
    23da:	ed 91       	ld	r30, X+
    23dc:	fc 91       	ld	r31, X
    23de:	13 97       	sbiw	r26, 0x03	; 3
	
	//Iterates through linked list
	while (curr_option != NULL)
    23e0:	30 97       	sbiw	r30, 0x00	; 0
    23e2:	49 f0       	breq	.+18     	; 0x23f6 <menu_count_options+0x20>
	
}

int menu_count_options(struct menu *m)
{
	int number = 0;
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
	struct option *curr_option = m->root_option;
	
	//Iterates through linked list
	while (curr_option != NULL)
	{
		number += 1;
    23e8:	01 96       	adiw	r24, 0x01	; 1
		curr_option = curr_option->next;
    23ea:	04 80       	ldd	r0, Z+4	; 0x04
    23ec:	f5 81       	ldd	r31, Z+5	; 0x05
    23ee:	e0 2d       	mov	r30, r0
{
	int number = 0;
	struct option *curr_option = m->root_option;
	
	//Iterates through linked list
	while (curr_option != NULL)
    23f0:	30 97       	sbiw	r30, 0x00	; 0
    23f2:	d1 f7       	brne	.-12     	; 0x23e8 <menu_count_options+0x12>
    23f4:	08 95       	ret
	
}

int menu_count_options(struct menu *m)
{
	int number = 0;
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
		number += 1;
		curr_option = curr_option->next;
	}
	
	return number;
}
    23fa:	08 95       	ret

000023fc <menu_control>:
	oled_cstring_write(CURSOR_TYPE,OPTION_SIZE);
	
}

void menu_control(struct menu *m)
{
    23fc:	cf 92       	push	r12
    23fe:	df 92       	push	r13
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	6c 01       	movw	r12, r24
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
    240e:	fc 01       	movw	r30, r24
    2410:	06 81       	ldd	r16, Z+6	; 0x06
    2412:	17 81       	ldd	r17, Z+7	; 0x07
	
	//Checks if something changed on screen (then we must refresh)
	int change = 0;
	
	//Moves cursor
	if (joystick_up()) //UP
    2414:	0e 94 14 0c 	call	0x1828	; 0x1828 <joystick_up>
    2418:	89 2b       	or	r24, r25
    241a:	69 f0       	breq	.+26     	; 0x2436 <menu_control+0x3a>
	{
		if (current_menu->cursor_pos > 0) current_menu->cursor_pos -= 1;
    241c:	f8 01       	movw	r30, r16
    241e:	84 81       	ldd	r24, Z+4	; 0x04
    2420:	95 81       	ldd	r25, Z+5	; 0x05
    2422:	18 16       	cp	r1, r24
    2424:	19 06       	cpc	r1, r25
    2426:	ec f4       	brge	.+58     	; 0x2462 <menu_control+0x66>
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	95 83       	std	Z+5, r25	; 0x05
    242c:	84 83       	std	Z+4, r24	; 0x04
		change += 1;
    242e:	ee 24       	eor	r14, r14
    2430:	e3 94       	inc	r14
    2432:	f1 2c       	mov	r15, r1
    2434:	20 c0       	rjmp	.+64     	; 0x2476 <menu_control+0x7a>
	}
	else if (joystick_down()) //DOWN
    2436:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <joystick_down>
    243a:	89 2b       	or	r24, r25
    243c:	b1 f0       	breq	.+44     	; 0x246a <menu_control+0x6e>
	{
		if (current_menu->cursor_pos < menu_count_options(current_menu)-1)current_menu->cursor_pos += 1;
    243e:	f8 01       	movw	r30, r16
    2440:	c4 81       	ldd	r28, Z+4	; 0x04
    2442:	d5 81       	ldd	r29, Z+5	; 0x05
    2444:	c8 01       	movw	r24, r16
    2446:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <menu_count_options>
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	c8 17       	cp	r28, r24
    244e:	d9 07       	cpc	r29, r25
    2450:	7c f4       	brge	.+30     	; 0x2470 <menu_control+0x74>
    2452:	21 96       	adiw	r28, 0x01	; 1
    2454:	f8 01       	movw	r30, r16
    2456:	d5 83       	std	Z+5, r29	; 0x05
    2458:	c4 83       	std	Z+4, r28	; 0x04
		change += 1;
    245a:	ee 24       	eor	r14, r14
    245c:	e3 94       	inc	r14
    245e:	f1 2c       	mov	r15, r1
    2460:	0a c0       	rjmp	.+20     	; 0x2476 <menu_control+0x7a>
	
	//Moves cursor
	if (joystick_up()) //UP
	{
		if (current_menu->cursor_pos > 0) current_menu->cursor_pos -= 1;
		change += 1;
    2462:	ee 24       	eor	r14, r14
    2464:	e3 94       	inc	r14
    2466:	f1 2c       	mov	r15, r1
    2468:	06 c0       	rjmp	.+12     	; 0x2476 <menu_control+0x7a>
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
	struct option *opt_element = m->curr_menu->root_option;
	
	//Checks if something changed on screen (then we must refresh)
	int change = 0;
    246a:	e1 2c       	mov	r14, r1
    246c:	f1 2c       	mov	r15, r1
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <menu_control+0x7a>
		change += 1;
	}
	else if (joystick_down()) //DOWN
	{
		if (current_menu->cursor_pos < menu_count_options(current_menu)-1)current_menu->cursor_pos += 1;
		change += 1;
    2470:	ee 24       	eor	r14, r14
    2472:	e3 94       	inc	r14
    2474:	f1 2c       	mov	r15, r1
	}
	
	if (joystick_right()) //ENTERS SUBMENU
    2476:	0e 94 3d 0c 	call	0x187a	; 0x187a <joystick_right>
    247a:	89 2b       	or	r24, r25
    247c:	11 f1       	breq	.+68     	; 0x24c2 <menu_control+0xc6>
	{
		//Finds target option
		struct option *target = current_menu->root_option;
    247e:	f8 01       	movw	r30, r16
    2480:	c2 81       	ldd	r28, Z+2	; 0x02
    2482:	d3 81       	ldd	r29, Z+3	; 0x03
		
		if (target != NULL)
    2484:	20 97       	sbiw	r28, 0x00	; 0
    2486:	e9 f0       	breq	.+58     	; 0x24c2 <menu_control+0xc6>
		{
			for (int i = 0; i < current_menu->cursor_pos; i++) target = target->next;
    2488:	44 81       	ldd	r20, Z+4	; 0x04
    248a:	55 81       	ldd	r21, Z+5	; 0x05
    248c:	14 16       	cp	r1, r20
    248e:	15 06       	cpc	r1, r21
    2490:	54 f4       	brge	.+20     	; 0x24a6 <menu_control+0xaa>
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	0c 80       	ldd	r0, Y+4	; 0x04
    2498:	dd 81       	ldd	r29, Y+5	; 0x05
    249a:	c0 2d       	mov	r28, r0
    249c:	2f 5f       	subi	r18, 0xFF	; 255
    249e:	3f 4f       	sbci	r19, 0xFF	; 255
    24a0:	24 17       	cp	r18, r20
    24a2:	35 07       	cpc	r19, r21
    24a4:	c1 f7       	brne	.-16     	; 0x2496 <menu_control+0x9a>

			//Executes action
			if (target->action != NULL) target->action();
    24a6:	ea 81       	ldd	r30, Y+2	; 0x02
    24a8:	fb 81       	ldd	r31, Y+3	; 0x03
    24aa:	30 97       	sbiw	r30, 0x00	; 0
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <menu_control+0xb4>
    24ae:	09 95       	icall
		
			//Enters submenu
			if (target->submenu != NULL) current_menu = target->submenu;
    24b0:	88 85       	ldd	r24, Y+8	; 0x08
    24b2:	99 85       	ldd	r25, Y+9	; 0x09
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	09 f4       	brne	.+2      	; 0x24ba <menu_control+0xbe>
}

void menu_control(struct menu *m)
{
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
    24b8:	c8 01       	movw	r24, r16
			//Executes action
			if (target->action != NULL) target->action();
		
			//Enters submenu
			if (target->submenu != NULL) current_menu = target->submenu;
			change += 1;
    24ba:	ff ef       	ldi	r31, 0xFF	; 255
    24bc:	ef 1a       	sub	r14, r31
    24be:	ff 0a       	sbc	r15, r31
    24c0:	8c 01       	movw	r16, r24
		}
		
	}
	
	if (joystick_left()) //Leaves submenu
    24c2:	0e 94 28 0c 	call	0x1850	; 0x1850 <joystick_left>
    24c6:	89 2b       	or	r24, r25
    24c8:	51 f0       	breq	.+20     	; 0x24de <menu_control+0xe2>
	{
		//Enters submenu
		if (current_menu->parent_menu != NULL ) current_menu = current_menu->parent_menu;
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 85       	ldd	r24, Z+8	; 0x08
    24ce:	91 85       	ldd	r25, Z+9	; 0x09
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <menu_control+0xda>
    24d4:	c8 01       	movw	r24, r16
		change += 1;
    24d6:	ff ef       	ldi	r31, 0xFF	; 255
    24d8:	ef 1a       	sub	r14, r31
    24da:	ff 0a       	sbc	r15, r31
    24dc:	8c 01       	movw	r16, r24
	}
	
	//Updates curr_menu pointer in main menu
	m->curr_menu = current_menu;
    24de:	f6 01       	movw	r30, r12
    24e0:	17 83       	std	Z+7, r17	; 0x07
    24e2:	06 83       	std	Z+6, r16	; 0x06
	
	//Current input is now previous input
	prev_input = CURRENT_INPUT;
    24e4:	8e e0       	ldi	r24, 0x0E	; 14
    24e6:	ee e1       	ldi	r30, 0x1E	; 30
    24e8:	f3 e0       	ldi	r31, 0x03	; 3
    24ea:	ae e6       	ldi	r26, 0x6E	; 110
    24ec:	b3 e0       	ldi	r27, 0x03	; 3
    24ee:	01 90       	ld	r0, Z+
    24f0:	0d 92       	st	X+, r0
    24f2:	8a 95       	dec	r24
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <menu_control+0xf2>
	
	if (change)
    24f6:	ef 28       	or	r14, r15
    24f8:	39 f0       	breq	.+14     	; 0x2508 <menu_control+0x10c>
	{
		oled_clear_SRAM();
    24fa:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <oled_clear_SRAM>
		menu_print(m->curr_menu);
    24fe:	f6 01       	movw	r30, r12
    2500:	86 81       	ldd	r24, Z+6	; 0x06
    2502:	97 81       	ldd	r25, Z+7	; 0x07
    2504:	0e 94 a4 11 	call	0x2348	; 0x2348 <menu_print>
	}
	
	
	
}
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	08 95       	ret

0000251a <__subsf3>:
    251a:	50 58       	subi	r21, 0x80	; 128

0000251c <__addsf3>:
    251c:	bb 27       	eor	r27, r27
    251e:	aa 27       	eor	r26, r26
    2520:	0e d0       	rcall	.+28     	; 0x253e <__addsf3x>
    2522:	75 c1       	rjmp	.+746    	; 0x280e <__fp_round>
    2524:	66 d1       	rcall	.+716    	; 0x27f2 <__fp_pscA>
    2526:	30 f0       	brcs	.+12     	; 0x2534 <__addsf3+0x18>
    2528:	6b d1       	rcall	.+726    	; 0x2800 <__fp_pscB>
    252a:	20 f0       	brcs	.+8      	; 0x2534 <__addsf3+0x18>
    252c:	31 f4       	brne	.+12     	; 0x253a <__addsf3+0x1e>
    252e:	9f 3f       	cpi	r25, 0xFF	; 255
    2530:	11 f4       	brne	.+4      	; 0x2536 <__addsf3+0x1a>
    2532:	1e f4       	brtc	.+6      	; 0x253a <__addsf3+0x1e>
    2534:	5b c1       	rjmp	.+694    	; 0x27ec <__fp_nan>
    2536:	0e f4       	brtc	.+2      	; 0x253a <__addsf3+0x1e>
    2538:	e0 95       	com	r30
    253a:	e7 fb       	bst	r30, 7
    253c:	51 c1       	rjmp	.+674    	; 0x27e0 <__fp_inf>

0000253e <__addsf3x>:
    253e:	e9 2f       	mov	r30, r25
    2540:	77 d1       	rcall	.+750    	; 0x2830 <__fp_split3>
    2542:	80 f3       	brcs	.-32     	; 0x2524 <__addsf3+0x8>
    2544:	ba 17       	cp	r27, r26
    2546:	62 07       	cpc	r22, r18
    2548:	73 07       	cpc	r23, r19
    254a:	84 07       	cpc	r24, r20
    254c:	95 07       	cpc	r25, r21
    254e:	18 f0       	brcs	.+6      	; 0x2556 <__addsf3x+0x18>
    2550:	71 f4       	brne	.+28     	; 0x256e <__addsf3x+0x30>
    2552:	9e f5       	brtc	.+102    	; 0x25ba <__addsf3x+0x7c>
    2554:	8f c1       	rjmp	.+798    	; 0x2874 <__fp_zero>
    2556:	0e f4       	brtc	.+2      	; 0x255a <__addsf3x+0x1c>
    2558:	e0 95       	com	r30
    255a:	0b 2e       	mov	r0, r27
    255c:	ba 2f       	mov	r27, r26
    255e:	a0 2d       	mov	r26, r0
    2560:	0b 01       	movw	r0, r22
    2562:	b9 01       	movw	r22, r18
    2564:	90 01       	movw	r18, r0
    2566:	0c 01       	movw	r0, r24
    2568:	ca 01       	movw	r24, r20
    256a:	a0 01       	movw	r20, r0
    256c:	11 24       	eor	r1, r1
    256e:	ff 27       	eor	r31, r31
    2570:	59 1b       	sub	r21, r25
    2572:	99 f0       	breq	.+38     	; 0x259a <__addsf3x+0x5c>
    2574:	59 3f       	cpi	r21, 0xF9	; 249
    2576:	50 f4       	brcc	.+20     	; 0x258c <__addsf3x+0x4e>
    2578:	50 3e       	cpi	r21, 0xE0	; 224
    257a:	68 f1       	brcs	.+90     	; 0x25d6 <__addsf3x+0x98>
    257c:	1a 16       	cp	r1, r26
    257e:	f0 40       	sbci	r31, 0x00	; 0
    2580:	a2 2f       	mov	r26, r18
    2582:	23 2f       	mov	r18, r19
    2584:	34 2f       	mov	r19, r20
    2586:	44 27       	eor	r20, r20
    2588:	58 5f       	subi	r21, 0xF8	; 248
    258a:	f3 cf       	rjmp	.-26     	; 0x2572 <__addsf3x+0x34>
    258c:	46 95       	lsr	r20
    258e:	37 95       	ror	r19
    2590:	27 95       	ror	r18
    2592:	a7 95       	ror	r26
    2594:	f0 40       	sbci	r31, 0x00	; 0
    2596:	53 95       	inc	r21
    2598:	c9 f7       	brne	.-14     	; 0x258c <__addsf3x+0x4e>
    259a:	7e f4       	brtc	.+30     	; 0x25ba <__addsf3x+0x7c>
    259c:	1f 16       	cp	r1, r31
    259e:	ba 0b       	sbc	r27, r26
    25a0:	62 0b       	sbc	r22, r18
    25a2:	73 0b       	sbc	r23, r19
    25a4:	84 0b       	sbc	r24, r20
    25a6:	ba f0       	brmi	.+46     	; 0x25d6 <__addsf3x+0x98>
    25a8:	91 50       	subi	r25, 0x01	; 1
    25aa:	a1 f0       	breq	.+40     	; 0x25d4 <__addsf3x+0x96>
    25ac:	ff 0f       	add	r31, r31
    25ae:	bb 1f       	adc	r27, r27
    25b0:	66 1f       	adc	r22, r22
    25b2:	77 1f       	adc	r23, r23
    25b4:	88 1f       	adc	r24, r24
    25b6:	c2 f7       	brpl	.-16     	; 0x25a8 <__addsf3x+0x6a>
    25b8:	0e c0       	rjmp	.+28     	; 0x25d6 <__addsf3x+0x98>
    25ba:	ba 0f       	add	r27, r26
    25bc:	62 1f       	adc	r22, r18
    25be:	73 1f       	adc	r23, r19
    25c0:	84 1f       	adc	r24, r20
    25c2:	48 f4       	brcc	.+18     	; 0x25d6 <__addsf3x+0x98>
    25c4:	87 95       	ror	r24
    25c6:	77 95       	ror	r23
    25c8:	67 95       	ror	r22
    25ca:	b7 95       	ror	r27
    25cc:	f7 95       	ror	r31
    25ce:	9e 3f       	cpi	r25, 0xFE	; 254
    25d0:	08 f0       	brcs	.+2      	; 0x25d4 <__addsf3x+0x96>
    25d2:	b3 cf       	rjmp	.-154    	; 0x253a <__addsf3+0x1e>
    25d4:	93 95       	inc	r25
    25d6:	88 0f       	add	r24, r24
    25d8:	08 f0       	brcs	.+2      	; 0x25dc <__addsf3x+0x9e>
    25da:	99 27       	eor	r25, r25
    25dc:	ee 0f       	add	r30, r30
    25de:	97 95       	ror	r25
    25e0:	87 95       	ror	r24
    25e2:	08 95       	ret

000025e4 <__cmpsf2>:
    25e4:	d9 d0       	rcall	.+434    	; 0x2798 <__fp_cmp>
    25e6:	08 f4       	brcc	.+2      	; 0x25ea <__cmpsf2+0x6>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	08 95       	ret

000025ec <__divsf3>:
    25ec:	0c d0       	rcall	.+24     	; 0x2606 <__divsf3x>
    25ee:	0f c1       	rjmp	.+542    	; 0x280e <__fp_round>
    25f0:	07 d1       	rcall	.+526    	; 0x2800 <__fp_pscB>
    25f2:	40 f0       	brcs	.+16     	; 0x2604 <__divsf3+0x18>
    25f4:	fe d0       	rcall	.+508    	; 0x27f2 <__fp_pscA>
    25f6:	30 f0       	brcs	.+12     	; 0x2604 <__divsf3+0x18>
    25f8:	21 f4       	brne	.+8      	; 0x2602 <__divsf3+0x16>
    25fa:	5f 3f       	cpi	r21, 0xFF	; 255
    25fc:	19 f0       	breq	.+6      	; 0x2604 <__divsf3+0x18>
    25fe:	f0 c0       	rjmp	.+480    	; 0x27e0 <__fp_inf>
    2600:	51 11       	cpse	r21, r1
    2602:	39 c1       	rjmp	.+626    	; 0x2876 <__fp_szero>
    2604:	f3 c0       	rjmp	.+486    	; 0x27ec <__fp_nan>

00002606 <__divsf3x>:
    2606:	14 d1       	rcall	.+552    	; 0x2830 <__fp_split3>
    2608:	98 f3       	brcs	.-26     	; 0x25f0 <__divsf3+0x4>

0000260a <__divsf3_pse>:
    260a:	99 23       	and	r25, r25
    260c:	c9 f3       	breq	.-14     	; 0x2600 <__divsf3+0x14>
    260e:	55 23       	and	r21, r21
    2610:	b1 f3       	breq	.-20     	; 0x25fe <__divsf3+0x12>
    2612:	95 1b       	sub	r25, r21
    2614:	55 0b       	sbc	r21, r21
    2616:	bb 27       	eor	r27, r27
    2618:	aa 27       	eor	r26, r26
    261a:	62 17       	cp	r22, r18
    261c:	73 07       	cpc	r23, r19
    261e:	84 07       	cpc	r24, r20
    2620:	38 f0       	brcs	.+14     	; 0x2630 <__divsf3_pse+0x26>
    2622:	9f 5f       	subi	r25, 0xFF	; 255
    2624:	5f 4f       	sbci	r21, 0xFF	; 255
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	44 1f       	adc	r20, r20
    262c:	aa 1f       	adc	r26, r26
    262e:	a9 f3       	breq	.-22     	; 0x261a <__divsf3_pse+0x10>
    2630:	33 d0       	rcall	.+102    	; 0x2698 <__divsf3_pse+0x8e>
    2632:	0e 2e       	mov	r0, r30
    2634:	3a f0       	brmi	.+14     	; 0x2644 <__divsf3_pse+0x3a>
    2636:	e0 e8       	ldi	r30, 0x80	; 128
    2638:	30 d0       	rcall	.+96     	; 0x269a <__divsf3_pse+0x90>
    263a:	91 50       	subi	r25, 0x01	; 1
    263c:	50 40       	sbci	r21, 0x00	; 0
    263e:	e6 95       	lsr	r30
    2640:	00 1c       	adc	r0, r0
    2642:	ca f7       	brpl	.-14     	; 0x2636 <__divsf3_pse+0x2c>
    2644:	29 d0       	rcall	.+82     	; 0x2698 <__divsf3_pse+0x8e>
    2646:	fe 2f       	mov	r31, r30
    2648:	27 d0       	rcall	.+78     	; 0x2698 <__divsf3_pse+0x8e>
    264a:	66 0f       	add	r22, r22
    264c:	77 1f       	adc	r23, r23
    264e:	88 1f       	adc	r24, r24
    2650:	bb 1f       	adc	r27, r27
    2652:	26 17       	cp	r18, r22
    2654:	37 07       	cpc	r19, r23
    2656:	48 07       	cpc	r20, r24
    2658:	ab 07       	cpc	r26, r27
    265a:	b0 e8       	ldi	r27, 0x80	; 128
    265c:	09 f0       	breq	.+2      	; 0x2660 <__divsf3_pse+0x56>
    265e:	bb 0b       	sbc	r27, r27
    2660:	80 2d       	mov	r24, r0
    2662:	bf 01       	movw	r22, r30
    2664:	ff 27       	eor	r31, r31
    2666:	93 58       	subi	r25, 0x83	; 131
    2668:	5f 4f       	sbci	r21, 0xFF	; 255
    266a:	2a f0       	brmi	.+10     	; 0x2676 <__divsf3_pse+0x6c>
    266c:	9e 3f       	cpi	r25, 0xFE	; 254
    266e:	51 05       	cpc	r21, r1
    2670:	68 f0       	brcs	.+26     	; 0x268c <__divsf3_pse+0x82>
    2672:	b6 c0       	rjmp	.+364    	; 0x27e0 <__fp_inf>
    2674:	00 c1       	rjmp	.+512    	; 0x2876 <__fp_szero>
    2676:	5f 3f       	cpi	r21, 0xFF	; 255
    2678:	ec f3       	brlt	.-6      	; 0x2674 <__divsf3_pse+0x6a>
    267a:	98 3e       	cpi	r25, 0xE8	; 232
    267c:	dc f3       	brlt	.-10     	; 0x2674 <__divsf3_pse+0x6a>
    267e:	86 95       	lsr	r24
    2680:	77 95       	ror	r23
    2682:	67 95       	ror	r22
    2684:	b7 95       	ror	r27
    2686:	f7 95       	ror	r31
    2688:	9f 5f       	subi	r25, 0xFF	; 255
    268a:	c9 f7       	brne	.-14     	; 0x267e <__divsf3_pse+0x74>
    268c:	88 0f       	add	r24, r24
    268e:	91 1d       	adc	r25, r1
    2690:	96 95       	lsr	r25
    2692:	87 95       	ror	r24
    2694:	97 f9       	bld	r25, 7
    2696:	08 95       	ret
    2698:	e1 e0       	ldi	r30, 0x01	; 1
    269a:	66 0f       	add	r22, r22
    269c:	77 1f       	adc	r23, r23
    269e:	88 1f       	adc	r24, r24
    26a0:	bb 1f       	adc	r27, r27
    26a2:	62 17       	cp	r22, r18
    26a4:	73 07       	cpc	r23, r19
    26a6:	84 07       	cpc	r24, r20
    26a8:	ba 07       	cpc	r27, r26
    26aa:	20 f0       	brcs	.+8      	; 0x26b4 <__divsf3_pse+0xaa>
    26ac:	62 1b       	sub	r22, r18
    26ae:	73 0b       	sbc	r23, r19
    26b0:	84 0b       	sbc	r24, r20
    26b2:	ba 0b       	sbc	r27, r26
    26b4:	ee 1f       	adc	r30, r30
    26b6:	88 f7       	brcc	.-30     	; 0x269a <__divsf3_pse+0x90>
    26b8:	e0 95       	com	r30
    26ba:	08 95       	ret

000026bc <__fixsfsi>:
    26bc:	04 d0       	rcall	.+8      	; 0x26c6 <__fixunssfsi>
    26be:	68 94       	set
    26c0:	b1 11       	cpse	r27, r1
    26c2:	d9 c0       	rjmp	.+434    	; 0x2876 <__fp_szero>
    26c4:	08 95       	ret

000026c6 <__fixunssfsi>:
    26c6:	bc d0       	rcall	.+376    	; 0x2840 <__fp_splitA>
    26c8:	88 f0       	brcs	.+34     	; 0x26ec <__fixunssfsi+0x26>
    26ca:	9f 57       	subi	r25, 0x7F	; 127
    26cc:	90 f0       	brcs	.+36     	; 0x26f2 <__fixunssfsi+0x2c>
    26ce:	b9 2f       	mov	r27, r25
    26d0:	99 27       	eor	r25, r25
    26d2:	b7 51       	subi	r27, 0x17	; 23
    26d4:	a0 f0       	brcs	.+40     	; 0x26fe <__fixunssfsi+0x38>
    26d6:	d1 f0       	breq	.+52     	; 0x270c <__fixunssfsi+0x46>
    26d8:	66 0f       	add	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	88 1f       	adc	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	1a f0       	brmi	.+6      	; 0x26e8 <__fixunssfsi+0x22>
    26e2:	ba 95       	dec	r27
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__fixunssfsi+0x12>
    26e6:	12 c0       	rjmp	.+36     	; 0x270c <__fixunssfsi+0x46>
    26e8:	b1 30       	cpi	r27, 0x01	; 1
    26ea:	81 f0       	breq	.+32     	; 0x270c <__fixunssfsi+0x46>
    26ec:	c3 d0       	rcall	.+390    	; 0x2874 <__fp_zero>
    26ee:	b1 e0       	ldi	r27, 0x01	; 1
    26f0:	08 95       	ret
    26f2:	c0 c0       	rjmp	.+384    	; 0x2874 <__fp_zero>
    26f4:	67 2f       	mov	r22, r23
    26f6:	78 2f       	mov	r23, r24
    26f8:	88 27       	eor	r24, r24
    26fa:	b8 5f       	subi	r27, 0xF8	; 248
    26fc:	39 f0       	breq	.+14     	; 0x270c <__fixunssfsi+0x46>
    26fe:	b9 3f       	cpi	r27, 0xF9	; 249
    2700:	cc f3       	brlt	.-14     	; 0x26f4 <__fixunssfsi+0x2e>
    2702:	86 95       	lsr	r24
    2704:	77 95       	ror	r23
    2706:	67 95       	ror	r22
    2708:	b3 95       	inc	r27
    270a:	d9 f7       	brne	.-10     	; 0x2702 <__fixunssfsi+0x3c>
    270c:	3e f4       	brtc	.+14     	; 0x271c <__fixunssfsi+0x56>
    270e:	90 95       	com	r25
    2710:	80 95       	com	r24
    2712:	70 95       	com	r23
    2714:	61 95       	neg	r22
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	8f 4f       	sbci	r24, 0xFF	; 255
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	08 95       	ret

0000271e <__floatunsisf>:
    271e:	e8 94       	clt
    2720:	09 c0       	rjmp	.+18     	; 0x2734 <__floatsisf+0x12>

00002722 <__floatsisf>:
    2722:	97 fb       	bst	r25, 7
    2724:	3e f4       	brtc	.+14     	; 0x2734 <__floatsisf+0x12>
    2726:	90 95       	com	r25
    2728:	80 95       	com	r24
    272a:	70 95       	com	r23
    272c:	61 95       	neg	r22
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
    2730:	8f 4f       	sbci	r24, 0xFF	; 255
    2732:	9f 4f       	sbci	r25, 0xFF	; 255
    2734:	99 23       	and	r25, r25
    2736:	a9 f0       	breq	.+42     	; 0x2762 <__floatsisf+0x40>
    2738:	f9 2f       	mov	r31, r25
    273a:	96 e9       	ldi	r25, 0x96	; 150
    273c:	bb 27       	eor	r27, r27
    273e:	93 95       	inc	r25
    2740:	f6 95       	lsr	r31
    2742:	87 95       	ror	r24
    2744:	77 95       	ror	r23
    2746:	67 95       	ror	r22
    2748:	b7 95       	ror	r27
    274a:	f1 11       	cpse	r31, r1
    274c:	f8 cf       	rjmp	.-16     	; 0x273e <__floatsisf+0x1c>
    274e:	fa f4       	brpl	.+62     	; 0x278e <__floatsisf+0x6c>
    2750:	bb 0f       	add	r27, r27
    2752:	11 f4       	brne	.+4      	; 0x2758 <__floatsisf+0x36>
    2754:	60 ff       	sbrs	r22, 0
    2756:	1b c0       	rjmp	.+54     	; 0x278e <__floatsisf+0x6c>
    2758:	6f 5f       	subi	r22, 0xFF	; 255
    275a:	7f 4f       	sbci	r23, 0xFF	; 255
    275c:	8f 4f       	sbci	r24, 0xFF	; 255
    275e:	9f 4f       	sbci	r25, 0xFF	; 255
    2760:	16 c0       	rjmp	.+44     	; 0x278e <__floatsisf+0x6c>
    2762:	88 23       	and	r24, r24
    2764:	11 f0       	breq	.+4      	; 0x276a <__floatsisf+0x48>
    2766:	96 e9       	ldi	r25, 0x96	; 150
    2768:	11 c0       	rjmp	.+34     	; 0x278c <__floatsisf+0x6a>
    276a:	77 23       	and	r23, r23
    276c:	21 f0       	breq	.+8      	; 0x2776 <__floatsisf+0x54>
    276e:	9e e8       	ldi	r25, 0x8E	; 142
    2770:	87 2f       	mov	r24, r23
    2772:	76 2f       	mov	r23, r22
    2774:	05 c0       	rjmp	.+10     	; 0x2780 <__floatsisf+0x5e>
    2776:	66 23       	and	r22, r22
    2778:	71 f0       	breq	.+28     	; 0x2796 <__floatsisf+0x74>
    277a:	96 e8       	ldi	r25, 0x86	; 134
    277c:	86 2f       	mov	r24, r22
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	60 e0       	ldi	r22, 0x00	; 0
    2782:	2a f0       	brmi	.+10     	; 0x278e <__floatsisf+0x6c>
    2784:	9a 95       	dec	r25
    2786:	66 0f       	add	r22, r22
    2788:	77 1f       	adc	r23, r23
    278a:	88 1f       	adc	r24, r24
    278c:	da f7       	brpl	.-10     	; 0x2784 <__floatsisf+0x62>
    278e:	88 0f       	add	r24, r24
    2790:	96 95       	lsr	r25
    2792:	87 95       	ror	r24
    2794:	97 f9       	bld	r25, 7
    2796:	08 95       	ret

00002798 <__fp_cmp>:
    2798:	99 0f       	add	r25, r25
    279a:	00 08       	sbc	r0, r0
    279c:	55 0f       	add	r21, r21
    279e:	aa 0b       	sbc	r26, r26
    27a0:	e0 e8       	ldi	r30, 0x80	; 128
    27a2:	fe ef       	ldi	r31, 0xFE	; 254
    27a4:	16 16       	cp	r1, r22
    27a6:	17 06       	cpc	r1, r23
    27a8:	e8 07       	cpc	r30, r24
    27aa:	f9 07       	cpc	r31, r25
    27ac:	c0 f0       	brcs	.+48     	; 0x27de <__fp_cmp+0x46>
    27ae:	12 16       	cp	r1, r18
    27b0:	13 06       	cpc	r1, r19
    27b2:	e4 07       	cpc	r30, r20
    27b4:	f5 07       	cpc	r31, r21
    27b6:	98 f0       	brcs	.+38     	; 0x27de <__fp_cmp+0x46>
    27b8:	62 1b       	sub	r22, r18
    27ba:	73 0b       	sbc	r23, r19
    27bc:	84 0b       	sbc	r24, r20
    27be:	95 0b       	sbc	r25, r21
    27c0:	39 f4       	brne	.+14     	; 0x27d0 <__fp_cmp+0x38>
    27c2:	0a 26       	eor	r0, r26
    27c4:	61 f0       	breq	.+24     	; 0x27de <__fp_cmp+0x46>
    27c6:	23 2b       	or	r18, r19
    27c8:	24 2b       	or	r18, r20
    27ca:	25 2b       	or	r18, r21
    27cc:	21 f4       	brne	.+8      	; 0x27d6 <__fp_cmp+0x3e>
    27ce:	08 95       	ret
    27d0:	0a 26       	eor	r0, r26
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <__fp_cmp+0x3e>
    27d4:	a1 40       	sbci	r26, 0x01	; 1
    27d6:	a6 95       	lsr	r26
    27d8:	8f ef       	ldi	r24, 0xFF	; 255
    27da:	81 1d       	adc	r24, r1
    27dc:	81 1d       	adc	r24, r1
    27de:	08 95       	ret

000027e0 <__fp_inf>:
    27e0:	97 f9       	bld	r25, 7
    27e2:	9f 67       	ori	r25, 0x7F	; 127
    27e4:	80 e8       	ldi	r24, 0x80	; 128
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	08 95       	ret

000027ec <__fp_nan>:
    27ec:	9f ef       	ldi	r25, 0xFF	; 255
    27ee:	80 ec       	ldi	r24, 0xC0	; 192
    27f0:	08 95       	ret

000027f2 <__fp_pscA>:
    27f2:	00 24       	eor	r0, r0
    27f4:	0a 94       	dec	r0
    27f6:	16 16       	cp	r1, r22
    27f8:	17 06       	cpc	r1, r23
    27fa:	18 06       	cpc	r1, r24
    27fc:	09 06       	cpc	r0, r25
    27fe:	08 95       	ret

00002800 <__fp_pscB>:
    2800:	00 24       	eor	r0, r0
    2802:	0a 94       	dec	r0
    2804:	12 16       	cp	r1, r18
    2806:	13 06       	cpc	r1, r19
    2808:	14 06       	cpc	r1, r20
    280a:	05 06       	cpc	r0, r21
    280c:	08 95       	ret

0000280e <__fp_round>:
    280e:	09 2e       	mov	r0, r25
    2810:	03 94       	inc	r0
    2812:	00 0c       	add	r0, r0
    2814:	11 f4       	brne	.+4      	; 0x281a <__fp_round+0xc>
    2816:	88 23       	and	r24, r24
    2818:	52 f0       	brmi	.+20     	; 0x282e <__fp_round+0x20>
    281a:	bb 0f       	add	r27, r27
    281c:	40 f4       	brcc	.+16     	; 0x282e <__fp_round+0x20>
    281e:	bf 2b       	or	r27, r31
    2820:	11 f4       	brne	.+4      	; 0x2826 <__fp_round+0x18>
    2822:	60 ff       	sbrs	r22, 0
    2824:	04 c0       	rjmp	.+8      	; 0x282e <__fp_round+0x20>
    2826:	6f 5f       	subi	r22, 0xFF	; 255
    2828:	7f 4f       	sbci	r23, 0xFF	; 255
    282a:	8f 4f       	sbci	r24, 0xFF	; 255
    282c:	9f 4f       	sbci	r25, 0xFF	; 255
    282e:	08 95       	ret

00002830 <__fp_split3>:
    2830:	57 fd       	sbrc	r21, 7
    2832:	90 58       	subi	r25, 0x80	; 128
    2834:	44 0f       	add	r20, r20
    2836:	55 1f       	adc	r21, r21
    2838:	59 f0       	breq	.+22     	; 0x2850 <__fp_splitA+0x10>
    283a:	5f 3f       	cpi	r21, 0xFF	; 255
    283c:	71 f0       	breq	.+28     	; 0x285a <__fp_splitA+0x1a>
    283e:	47 95       	ror	r20

00002840 <__fp_splitA>:
    2840:	88 0f       	add	r24, r24
    2842:	97 fb       	bst	r25, 7
    2844:	99 1f       	adc	r25, r25
    2846:	61 f0       	breq	.+24     	; 0x2860 <__fp_splitA+0x20>
    2848:	9f 3f       	cpi	r25, 0xFF	; 255
    284a:	79 f0       	breq	.+30     	; 0x286a <__fp_splitA+0x2a>
    284c:	87 95       	ror	r24
    284e:	08 95       	ret
    2850:	12 16       	cp	r1, r18
    2852:	13 06       	cpc	r1, r19
    2854:	14 06       	cpc	r1, r20
    2856:	55 1f       	adc	r21, r21
    2858:	f2 cf       	rjmp	.-28     	; 0x283e <__fp_split3+0xe>
    285a:	46 95       	lsr	r20
    285c:	f1 df       	rcall	.-30     	; 0x2840 <__fp_splitA>
    285e:	08 c0       	rjmp	.+16     	; 0x2870 <__fp_splitA+0x30>
    2860:	16 16       	cp	r1, r22
    2862:	17 06       	cpc	r1, r23
    2864:	18 06       	cpc	r1, r24
    2866:	99 1f       	adc	r25, r25
    2868:	f1 cf       	rjmp	.-30     	; 0x284c <__fp_splitA+0xc>
    286a:	86 95       	lsr	r24
    286c:	71 05       	cpc	r23, r1
    286e:	61 05       	cpc	r22, r1
    2870:	08 94       	sec
    2872:	08 95       	ret

00002874 <__fp_zero>:
    2874:	e8 94       	clt

00002876 <__fp_szero>:
    2876:	bb 27       	eor	r27, r27
    2878:	66 27       	eor	r22, r22
    287a:	77 27       	eor	r23, r23
    287c:	cb 01       	movw	r24, r22
    287e:	97 f9       	bld	r25, 7
    2880:	08 95       	ret

00002882 <__gesf2>:
    2882:	8a df       	rcall	.-236    	; 0x2798 <__fp_cmp>
    2884:	08 f4       	brcc	.+2      	; 0x2888 <__gesf2+0x6>
    2886:	8f ef       	ldi	r24, 0xFF	; 255
    2888:	08 95       	ret

0000288a <__udivmodsi4>:
    288a:	a1 e2       	ldi	r26, 0x21	; 33
    288c:	1a 2e       	mov	r1, r26
    288e:	aa 1b       	sub	r26, r26
    2890:	bb 1b       	sub	r27, r27
    2892:	fd 01       	movw	r30, r26
    2894:	0d c0       	rjmp	.+26     	; 0x28b0 <__udivmodsi4_ep>

00002896 <__udivmodsi4_loop>:
    2896:	aa 1f       	adc	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	ee 1f       	adc	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	a2 17       	cp	r26, r18
    28a0:	b3 07       	cpc	r27, r19
    28a2:	e4 07       	cpc	r30, r20
    28a4:	f5 07       	cpc	r31, r21
    28a6:	20 f0       	brcs	.+8      	; 0x28b0 <__udivmodsi4_ep>
    28a8:	a2 1b       	sub	r26, r18
    28aa:	b3 0b       	sbc	r27, r19
    28ac:	e4 0b       	sbc	r30, r20
    28ae:	f5 0b       	sbc	r31, r21

000028b0 <__udivmodsi4_ep>:
    28b0:	66 1f       	adc	r22, r22
    28b2:	77 1f       	adc	r23, r23
    28b4:	88 1f       	adc	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	1a 94       	dec	r1
    28ba:	69 f7       	brne	.-38     	; 0x2896 <__udivmodsi4_loop>
    28bc:	60 95       	com	r22
    28be:	70 95       	com	r23
    28c0:	80 95       	com	r24
    28c2:	90 95       	com	r25
    28c4:	9b 01       	movw	r18, r22
    28c6:	ac 01       	movw	r20, r24
    28c8:	bd 01       	movw	r22, r26
    28ca:	cf 01       	movw	r24, r30
    28cc:	08 95       	ret

000028ce <printf>:
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	ed e6       	ldi	r30, 0x6D	; 109
    28d4:	f4 e1       	ldi	r31, 0x14	; 20
    28d6:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__+0x20>
    28da:	fe 01       	movw	r30, r28
    28dc:	35 96       	adiw	r30, 0x05	; 5
    28de:	61 91       	ld	r22, Z+
    28e0:	71 91       	ld	r23, Z+
    28e2:	af 01       	movw	r20, r30
    28e4:	80 91 7e 03 	lds	r24, 0x037E
    28e8:	90 91 7f 03 	lds	r25, 0x037F
    28ec:	0e 94 ca 14 	call	0x2994	; 0x2994 <vfprintf>
    28f0:	e2 e0       	ldi	r30, 0x02	; 2
    28f2:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__+0x20>

000028f6 <puts>:
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	e0 91 7e 03 	lds	r30, 0x037E
    2902:	f0 91 7f 03 	lds	r31, 0x037F
    2906:	23 81       	ldd	r18, Z+3	; 0x03
    2908:	21 ff       	sbrs	r18, 1
    290a:	1b c0       	rjmp	.+54     	; 0x2942 <puts+0x4c>
    290c:	ec 01       	movw	r28, r24
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	89 91       	ld	r24, Y+
    2914:	60 91 7e 03 	lds	r22, 0x037E
    2918:	70 91 7f 03 	lds	r23, 0x037F
    291c:	db 01       	movw	r26, r22
    291e:	18 96       	adiw	r26, 0x08	; 8
    2920:	ed 91       	ld	r30, X+
    2922:	fc 91       	ld	r31, X
    2924:	19 97       	sbiw	r26, 0x09	; 9
    2926:	88 23       	and	r24, r24
    2928:	31 f0       	breq	.+12     	; 0x2936 <puts+0x40>
    292a:	09 95       	icall
    292c:	89 2b       	or	r24, r25
    292e:	89 f3       	breq	.-30     	; 0x2912 <puts+0x1c>
    2930:	0f ef       	ldi	r16, 0xFF	; 255
    2932:	1f ef       	ldi	r17, 0xFF	; 255
    2934:	ee cf       	rjmp	.-36     	; 0x2912 <puts+0x1c>
    2936:	8a e0       	ldi	r24, 0x0A	; 10
    2938:	09 95       	icall
    293a:	89 2b       	or	r24, r25
    293c:	11 f4       	brne	.+4      	; 0x2942 <puts+0x4c>
    293e:	c8 01       	movw	r24, r16
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <puts+0x50>
    2942:	8f ef       	ldi	r24, 0xFF	; 255
    2944:	9f ef       	ldi	r25, 0xFF	; 255
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	08 95       	ret

00002950 <sprintf>:
    2950:	ae e0       	ldi	r26, 0x0E	; 14
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	ee ea       	ldi	r30, 0xAE	; 174
    2956:	f4 e1       	ldi	r31, 0x14	; 20
    2958:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__prologue_saves__+0x1c>
    295c:	0d 89       	ldd	r16, Y+21	; 0x15
    295e:	1e 89       	ldd	r17, Y+22	; 0x16
    2960:	86 e0       	ldi	r24, 0x06	; 6
    2962:	8c 83       	std	Y+4, r24	; 0x04
    2964:	1a 83       	std	Y+2, r17	; 0x02
    2966:	09 83       	std	Y+1, r16	; 0x01
    2968:	8f ef       	ldi	r24, 0xFF	; 255
    296a:	9f e7       	ldi	r25, 0x7F	; 127
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	ae 01       	movw	r20, r28
    2972:	47 5e       	subi	r20, 0xE7	; 231
    2974:	5f 4f       	sbci	r21, 0xFF	; 255
    2976:	6f 89       	ldd	r22, Y+23	; 0x17
    2978:	78 8d       	ldd	r23, Y+24	; 0x18
    297a:	ce 01       	movw	r24, r28
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	0e 94 ca 14 	call	0x2994	; 0x2994 <vfprintf>
    2982:	ef 81       	ldd	r30, Y+7	; 0x07
    2984:	f8 85       	ldd	r31, Y+8	; 0x08
    2986:	e0 0f       	add	r30, r16
    2988:	f1 1f       	adc	r31, r17
    298a:	10 82       	st	Z, r1
    298c:	2e 96       	adiw	r28, 0x0e	; 14
    298e:	e4 e0       	ldi	r30, 0x04	; 4
    2990:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__epilogue_restores__+0x1c>

00002994 <vfprintf>:
    2994:	ac e0       	ldi	r26, 0x0C	; 12
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e0 ed       	ldi	r30, 0xD0	; 208
    299a:	f4 e1       	ldi	r31, 0x14	; 20
    299c:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__prologue_saves__>
    29a0:	7c 01       	movw	r14, r24
    29a2:	6b 01       	movw	r12, r22
    29a4:	8a 01       	movw	r16, r20
    29a6:	fc 01       	movw	r30, r24
    29a8:	17 82       	std	Z+7, r1	; 0x07
    29aa:	16 82       	std	Z+6, r1	; 0x06
    29ac:	83 81       	ldd	r24, Z+3	; 0x03
    29ae:	81 ff       	sbrs	r24, 1
    29b0:	bd c1       	rjmp	.+890    	; 0x2d2c <vfprintf+0x398>
    29b2:	ce 01       	movw	r24, r28
    29b4:	01 96       	adiw	r24, 0x01	; 1
    29b6:	4c 01       	movw	r8, r24
    29b8:	f7 01       	movw	r30, r14
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	f6 01       	movw	r30, r12
    29be:	93 fd       	sbrc	r25, 3
    29c0:	85 91       	lpm	r24, Z+
    29c2:	93 ff       	sbrs	r25, 3
    29c4:	81 91       	ld	r24, Z+
    29c6:	6f 01       	movw	r12, r30
    29c8:	88 23       	and	r24, r24
    29ca:	09 f4       	brne	.+2      	; 0x29ce <vfprintf+0x3a>
    29cc:	ab c1       	rjmp	.+854    	; 0x2d24 <vfprintf+0x390>
    29ce:	85 32       	cpi	r24, 0x25	; 37
    29d0:	39 f4       	brne	.+14     	; 0x29e0 <vfprintf+0x4c>
    29d2:	93 fd       	sbrc	r25, 3
    29d4:	85 91       	lpm	r24, Z+
    29d6:	93 ff       	sbrs	r25, 3
    29d8:	81 91       	ld	r24, Z+
    29da:	6f 01       	movw	r12, r30
    29dc:	85 32       	cpi	r24, 0x25	; 37
    29de:	29 f4       	brne	.+10     	; 0x29ea <vfprintf+0x56>
    29e0:	b7 01       	movw	r22, r14
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    29e8:	e7 cf       	rjmp	.-50     	; 0x29b8 <vfprintf+0x24>
    29ea:	51 2c       	mov	r5, r1
    29ec:	31 2c       	mov	r3, r1
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	20 32       	cpi	r18, 0x20	; 32
    29f2:	a0 f4       	brcc	.+40     	; 0x2a1c <vfprintf+0x88>
    29f4:	8b 32       	cpi	r24, 0x2B	; 43
    29f6:	69 f0       	breq	.+26     	; 0x2a12 <vfprintf+0x7e>
    29f8:	30 f4       	brcc	.+12     	; 0x2a06 <vfprintf+0x72>
    29fa:	80 32       	cpi	r24, 0x20	; 32
    29fc:	59 f0       	breq	.+22     	; 0x2a14 <vfprintf+0x80>
    29fe:	83 32       	cpi	r24, 0x23	; 35
    2a00:	69 f4       	brne	.+26     	; 0x2a1c <vfprintf+0x88>
    2a02:	20 61       	ori	r18, 0x10	; 16
    2a04:	2c c0       	rjmp	.+88     	; 0x2a5e <vfprintf+0xca>
    2a06:	8d 32       	cpi	r24, 0x2D	; 45
    2a08:	39 f0       	breq	.+14     	; 0x2a18 <vfprintf+0x84>
    2a0a:	80 33       	cpi	r24, 0x30	; 48
    2a0c:	39 f4       	brne	.+14     	; 0x2a1c <vfprintf+0x88>
    2a0e:	21 60       	ori	r18, 0x01	; 1
    2a10:	26 c0       	rjmp	.+76     	; 0x2a5e <vfprintf+0xca>
    2a12:	22 60       	ori	r18, 0x02	; 2
    2a14:	24 60       	ori	r18, 0x04	; 4
    2a16:	23 c0       	rjmp	.+70     	; 0x2a5e <vfprintf+0xca>
    2a18:	28 60       	ori	r18, 0x08	; 8
    2a1a:	21 c0       	rjmp	.+66     	; 0x2a5e <vfprintf+0xca>
    2a1c:	27 fd       	sbrc	r18, 7
    2a1e:	27 c0       	rjmp	.+78     	; 0x2a6e <vfprintf+0xda>
    2a20:	30 ed       	ldi	r19, 0xD0	; 208
    2a22:	38 0f       	add	r19, r24
    2a24:	3a 30       	cpi	r19, 0x0A	; 10
    2a26:	78 f4       	brcc	.+30     	; 0x2a46 <vfprintf+0xb2>
    2a28:	26 ff       	sbrs	r18, 6
    2a2a:	06 c0       	rjmp	.+12     	; 0x2a38 <vfprintf+0xa4>
    2a2c:	fa e0       	ldi	r31, 0x0A	; 10
    2a2e:	5f 9e       	mul	r5, r31
    2a30:	30 0d       	add	r19, r0
    2a32:	11 24       	eor	r1, r1
    2a34:	53 2e       	mov	r5, r19
    2a36:	13 c0       	rjmp	.+38     	; 0x2a5e <vfprintf+0xca>
    2a38:	8a e0       	ldi	r24, 0x0A	; 10
    2a3a:	38 9e       	mul	r3, r24
    2a3c:	30 0d       	add	r19, r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	33 2e       	mov	r3, r19
    2a42:	20 62       	ori	r18, 0x20	; 32
    2a44:	0c c0       	rjmp	.+24     	; 0x2a5e <vfprintf+0xca>
    2a46:	8e 32       	cpi	r24, 0x2E	; 46
    2a48:	21 f4       	brne	.+8      	; 0x2a52 <vfprintf+0xbe>
    2a4a:	26 fd       	sbrc	r18, 6
    2a4c:	6b c1       	rjmp	.+726    	; 0x2d24 <vfprintf+0x390>
    2a4e:	20 64       	ori	r18, 0x40	; 64
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <vfprintf+0xca>
    2a52:	8c 36       	cpi	r24, 0x6C	; 108
    2a54:	11 f4       	brne	.+4      	; 0x2a5a <vfprintf+0xc6>
    2a56:	20 68       	ori	r18, 0x80	; 128
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <vfprintf+0xca>
    2a5a:	88 36       	cpi	r24, 0x68	; 104
    2a5c:	41 f4       	brne	.+16     	; 0x2a6e <vfprintf+0xda>
    2a5e:	f6 01       	movw	r30, r12
    2a60:	93 fd       	sbrc	r25, 3
    2a62:	85 91       	lpm	r24, Z+
    2a64:	93 ff       	sbrs	r25, 3
    2a66:	81 91       	ld	r24, Z+
    2a68:	6f 01       	movw	r12, r30
    2a6a:	81 11       	cpse	r24, r1
    2a6c:	c1 cf       	rjmp	.-126    	; 0x29f0 <vfprintf+0x5c>
    2a6e:	98 2f       	mov	r25, r24
    2a70:	9f 7d       	andi	r25, 0xDF	; 223
    2a72:	95 54       	subi	r25, 0x45	; 69
    2a74:	93 30       	cpi	r25, 0x03	; 3
    2a76:	28 f4       	brcc	.+10     	; 0x2a82 <vfprintf+0xee>
    2a78:	0c 5f       	subi	r16, 0xFC	; 252
    2a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7c:	ff e3       	ldi	r31, 0x3F	; 63
    2a7e:	f9 83       	std	Y+1, r31	; 0x01
    2a80:	0d c0       	rjmp	.+26     	; 0x2a9c <vfprintf+0x108>
    2a82:	83 36       	cpi	r24, 0x63	; 99
    2a84:	31 f0       	breq	.+12     	; 0x2a92 <vfprintf+0xfe>
    2a86:	83 37       	cpi	r24, 0x73	; 115
    2a88:	71 f0       	breq	.+28     	; 0x2aa6 <vfprintf+0x112>
    2a8a:	83 35       	cpi	r24, 0x53	; 83
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <vfprintf+0xfc>
    2a8e:	5b c0       	rjmp	.+182    	; 0x2b46 <vfprintf+0x1b2>
    2a90:	22 c0       	rjmp	.+68     	; 0x2ad6 <vfprintf+0x142>
    2a92:	f8 01       	movw	r30, r16
    2a94:	80 81       	ld	r24, Z
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	0e 5f       	subi	r16, 0xFE	; 254
    2a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9c:	44 24       	eor	r4, r4
    2a9e:	43 94       	inc	r4
    2aa0:	51 2c       	mov	r5, r1
    2aa2:	54 01       	movw	r10, r8
    2aa4:	15 c0       	rjmp	.+42     	; 0x2ad0 <vfprintf+0x13c>
    2aa6:	38 01       	movw	r6, r16
    2aa8:	f2 e0       	ldi	r31, 0x02	; 2
    2aaa:	6f 0e       	add	r6, r31
    2aac:	71 1c       	adc	r7, r1
    2aae:	f8 01       	movw	r30, r16
    2ab0:	a0 80       	ld	r10, Z
    2ab2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ab4:	26 ff       	sbrs	r18, 6
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <vfprintf+0x12a>
    2ab8:	65 2d       	mov	r22, r5
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <vfprintf+0x12e>
    2abe:	6f ef       	ldi	r22, 0xFF	; 255
    2ac0:	7f ef       	ldi	r23, 0xFF	; 255
    2ac2:	c5 01       	movw	r24, r10
    2ac4:	2c 87       	std	Y+12, r18	; 0x0c
    2ac6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strnlen>
    2aca:	2c 01       	movw	r4, r24
    2acc:	83 01       	movw	r16, r6
    2ace:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ad0:	2f 77       	andi	r18, 0x7F	; 127
    2ad2:	22 2e       	mov	r2, r18
    2ad4:	17 c0       	rjmp	.+46     	; 0x2b04 <vfprintf+0x170>
    2ad6:	38 01       	movw	r6, r16
    2ad8:	f2 e0       	ldi	r31, 0x02	; 2
    2ada:	6f 0e       	add	r6, r31
    2adc:	71 1c       	adc	r7, r1
    2ade:	f8 01       	movw	r30, r16
    2ae0:	a0 80       	ld	r10, Z
    2ae2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ae4:	26 ff       	sbrs	r18, 6
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <vfprintf+0x15a>
    2ae8:	65 2d       	mov	r22, r5
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <vfprintf+0x15e>
    2aee:	6f ef       	ldi	r22, 0xFF	; 255
    2af0:	7f ef       	ldi	r23, 0xFF	; 255
    2af2:	c5 01       	movw	r24, r10
    2af4:	2c 87       	std	Y+12, r18	; 0x0c
    2af6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <strnlen_P>
    2afa:	2c 01       	movw	r4, r24
    2afc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2afe:	20 68       	ori	r18, 0x80	; 128
    2b00:	22 2e       	mov	r2, r18
    2b02:	83 01       	movw	r16, r6
    2b04:	23 fc       	sbrc	r2, 3
    2b06:	1b c0       	rjmp	.+54     	; 0x2b3e <vfprintf+0x1aa>
    2b08:	83 2d       	mov	r24, r3
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	48 16       	cp	r4, r24
    2b0e:	59 06       	cpc	r5, r25
    2b10:	b0 f4       	brcc	.+44     	; 0x2b3e <vfprintf+0x1aa>
    2b12:	b7 01       	movw	r22, r14
    2b14:	80 e2       	ldi	r24, 0x20	; 32
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2b1c:	3a 94       	dec	r3
    2b1e:	f4 cf       	rjmp	.-24     	; 0x2b08 <vfprintf+0x174>
    2b20:	f5 01       	movw	r30, r10
    2b22:	27 fc       	sbrc	r2, 7
    2b24:	85 91       	lpm	r24, Z+
    2b26:	27 fe       	sbrs	r2, 7
    2b28:	81 91       	ld	r24, Z+
    2b2a:	5f 01       	movw	r10, r30
    2b2c:	b7 01       	movw	r22, r14
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2b34:	31 10       	cpse	r3, r1
    2b36:	3a 94       	dec	r3
    2b38:	f1 e0       	ldi	r31, 0x01	; 1
    2b3a:	4f 1a       	sub	r4, r31
    2b3c:	51 08       	sbc	r5, r1
    2b3e:	41 14       	cp	r4, r1
    2b40:	51 04       	cpc	r5, r1
    2b42:	71 f7       	brne	.-36     	; 0x2b20 <vfprintf+0x18c>
    2b44:	e5 c0       	rjmp	.+458    	; 0x2d10 <vfprintf+0x37c>
    2b46:	84 36       	cpi	r24, 0x64	; 100
    2b48:	11 f0       	breq	.+4      	; 0x2b4e <vfprintf+0x1ba>
    2b4a:	89 36       	cpi	r24, 0x69	; 105
    2b4c:	39 f5       	brne	.+78     	; 0x2b9c <vfprintf+0x208>
    2b4e:	f8 01       	movw	r30, r16
    2b50:	27 ff       	sbrs	r18, 7
    2b52:	07 c0       	rjmp	.+14     	; 0x2b62 <vfprintf+0x1ce>
    2b54:	60 81       	ld	r22, Z
    2b56:	71 81       	ldd	r23, Z+1	; 0x01
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	93 81       	ldd	r25, Z+3	; 0x03
    2b5c:	0c 5f       	subi	r16, 0xFC	; 252
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	08 c0       	rjmp	.+16     	; 0x2b72 <vfprintf+0x1de>
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	88 27       	eor	r24, r24
    2b68:	77 fd       	sbrc	r23, 7
    2b6a:	80 95       	com	r24
    2b6c:	98 2f       	mov	r25, r24
    2b6e:	0e 5f       	subi	r16, 0xFE	; 254
    2b70:	1f 4f       	sbci	r17, 0xFF	; 255
    2b72:	2f 76       	andi	r18, 0x6F	; 111
    2b74:	b2 2e       	mov	r11, r18
    2b76:	97 ff       	sbrs	r25, 7
    2b78:	09 c0       	rjmp	.+18     	; 0x2b8c <vfprintf+0x1f8>
    2b7a:	90 95       	com	r25
    2b7c:	80 95       	com	r24
    2b7e:	70 95       	com	r23
    2b80:	61 95       	neg	r22
    2b82:	7f 4f       	sbci	r23, 0xFF	; 255
    2b84:	8f 4f       	sbci	r24, 0xFF	; 255
    2b86:	9f 4f       	sbci	r25, 0xFF	; 255
    2b88:	20 68       	ori	r18, 0x80	; 128
    2b8a:	b2 2e       	mov	r11, r18
    2b8c:	2a e0       	ldi	r18, 0x0A	; 10
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	a4 01       	movw	r20, r8
    2b92:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__ultoa_invert>
    2b96:	a8 2e       	mov	r10, r24
    2b98:	a8 18       	sub	r10, r8
    2b9a:	44 c0       	rjmp	.+136    	; 0x2c24 <vfprintf+0x290>
    2b9c:	85 37       	cpi	r24, 0x75	; 117
    2b9e:	29 f4       	brne	.+10     	; 0x2baa <vfprintf+0x216>
    2ba0:	2f 7e       	andi	r18, 0xEF	; 239
    2ba2:	b2 2e       	mov	r11, r18
    2ba4:	2a e0       	ldi	r18, 0x0A	; 10
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	25 c0       	rjmp	.+74     	; 0x2bf4 <vfprintf+0x260>
    2baa:	f2 2f       	mov	r31, r18
    2bac:	f9 7f       	andi	r31, 0xF9	; 249
    2bae:	bf 2e       	mov	r11, r31
    2bb0:	8f 36       	cpi	r24, 0x6F	; 111
    2bb2:	c1 f0       	breq	.+48     	; 0x2be4 <vfprintf+0x250>
    2bb4:	18 f4       	brcc	.+6      	; 0x2bbc <vfprintf+0x228>
    2bb6:	88 35       	cpi	r24, 0x58	; 88
    2bb8:	79 f0       	breq	.+30     	; 0x2bd8 <vfprintf+0x244>
    2bba:	b4 c0       	rjmp	.+360    	; 0x2d24 <vfprintf+0x390>
    2bbc:	80 37       	cpi	r24, 0x70	; 112
    2bbe:	19 f0       	breq	.+6      	; 0x2bc6 <vfprintf+0x232>
    2bc0:	88 37       	cpi	r24, 0x78	; 120
    2bc2:	21 f0       	breq	.+8      	; 0x2bcc <vfprintf+0x238>
    2bc4:	af c0       	rjmp	.+350    	; 0x2d24 <vfprintf+0x390>
    2bc6:	2f 2f       	mov	r18, r31
    2bc8:	20 61       	ori	r18, 0x10	; 16
    2bca:	b2 2e       	mov	r11, r18
    2bcc:	b4 fe       	sbrs	r11, 4
    2bce:	0d c0       	rjmp	.+26     	; 0x2bea <vfprintf+0x256>
    2bd0:	8b 2d       	mov	r24, r11
    2bd2:	84 60       	ori	r24, 0x04	; 4
    2bd4:	b8 2e       	mov	r11, r24
    2bd6:	09 c0       	rjmp	.+18     	; 0x2bea <vfprintf+0x256>
    2bd8:	24 ff       	sbrs	r18, 4
    2bda:	0a c0       	rjmp	.+20     	; 0x2bf0 <vfprintf+0x25c>
    2bdc:	9f 2f       	mov	r25, r31
    2bde:	96 60       	ori	r25, 0x06	; 6
    2be0:	b9 2e       	mov	r11, r25
    2be2:	06 c0       	rjmp	.+12     	; 0x2bf0 <vfprintf+0x25c>
    2be4:	28 e0       	ldi	r18, 0x08	; 8
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	05 c0       	rjmp	.+10     	; 0x2bf4 <vfprintf+0x260>
    2bea:	20 e1       	ldi	r18, 0x10	; 16
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <vfprintf+0x260>
    2bf0:	20 e1       	ldi	r18, 0x10	; 16
    2bf2:	32 e0       	ldi	r19, 0x02	; 2
    2bf4:	f8 01       	movw	r30, r16
    2bf6:	b7 fe       	sbrs	r11, 7
    2bf8:	07 c0       	rjmp	.+14     	; 0x2c08 <vfprintf+0x274>
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	0c 5f       	subi	r16, 0xFC	; 252
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	06 c0       	rjmp	.+12     	; 0x2c14 <vfprintf+0x280>
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 5f       	subi	r16, 0xFE	; 254
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	a4 01       	movw	r20, r8
    2c16:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__ultoa_invert>
    2c1a:	a8 2e       	mov	r10, r24
    2c1c:	a8 18       	sub	r10, r8
    2c1e:	fb 2d       	mov	r31, r11
    2c20:	ff 77       	andi	r31, 0x7F	; 127
    2c22:	bf 2e       	mov	r11, r31
    2c24:	b6 fe       	sbrs	r11, 6
    2c26:	0b c0       	rjmp	.+22     	; 0x2c3e <vfprintf+0x2aa>
    2c28:	2b 2d       	mov	r18, r11
    2c2a:	2e 7f       	andi	r18, 0xFE	; 254
    2c2c:	a5 14       	cp	r10, r5
    2c2e:	50 f4       	brcc	.+20     	; 0x2c44 <vfprintf+0x2b0>
    2c30:	b4 fe       	sbrs	r11, 4
    2c32:	0a c0       	rjmp	.+20     	; 0x2c48 <vfprintf+0x2b4>
    2c34:	b2 fc       	sbrc	r11, 2
    2c36:	08 c0       	rjmp	.+16     	; 0x2c48 <vfprintf+0x2b4>
    2c38:	2b 2d       	mov	r18, r11
    2c3a:	2e 7e       	andi	r18, 0xEE	; 238
    2c3c:	05 c0       	rjmp	.+10     	; 0x2c48 <vfprintf+0x2b4>
    2c3e:	7a 2c       	mov	r7, r10
    2c40:	2b 2d       	mov	r18, r11
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <vfprintf+0x2b6>
    2c44:	7a 2c       	mov	r7, r10
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <vfprintf+0x2b6>
    2c48:	75 2c       	mov	r7, r5
    2c4a:	24 ff       	sbrs	r18, 4
    2c4c:	0d c0       	rjmp	.+26     	; 0x2c68 <vfprintf+0x2d4>
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ea 0d       	add	r30, r10
    2c52:	f1 1d       	adc	r31, r1
    2c54:	80 81       	ld	r24, Z
    2c56:	80 33       	cpi	r24, 0x30	; 48
    2c58:	11 f4       	brne	.+4      	; 0x2c5e <vfprintf+0x2ca>
    2c5a:	29 7e       	andi	r18, 0xE9	; 233
    2c5c:	09 c0       	rjmp	.+18     	; 0x2c70 <vfprintf+0x2dc>
    2c5e:	22 ff       	sbrs	r18, 2
    2c60:	06 c0       	rjmp	.+12     	; 0x2c6e <vfprintf+0x2da>
    2c62:	73 94       	inc	r7
    2c64:	73 94       	inc	r7
    2c66:	04 c0       	rjmp	.+8      	; 0x2c70 <vfprintf+0x2dc>
    2c68:	82 2f       	mov	r24, r18
    2c6a:	86 78       	andi	r24, 0x86	; 134
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <vfprintf+0x2dc>
    2c6e:	73 94       	inc	r7
    2c70:	23 fd       	sbrc	r18, 3
    2c72:	13 c0       	rjmp	.+38     	; 0x2c9a <vfprintf+0x306>
    2c74:	20 ff       	sbrs	r18, 0
    2c76:	06 c0       	rjmp	.+12     	; 0x2c84 <vfprintf+0x2f0>
    2c78:	5a 2c       	mov	r5, r10
    2c7a:	73 14       	cp	r7, r3
    2c7c:	18 f4       	brcc	.+6      	; 0x2c84 <vfprintf+0x2f0>
    2c7e:	53 0c       	add	r5, r3
    2c80:	57 18       	sub	r5, r7
    2c82:	73 2c       	mov	r7, r3
    2c84:	73 14       	cp	r7, r3
    2c86:	68 f4       	brcc	.+26     	; 0x2ca2 <vfprintf+0x30e>
    2c88:	b7 01       	movw	r22, r14
    2c8a:	80 e2       	ldi	r24, 0x20	; 32
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	2c 87       	std	Y+12, r18	; 0x0c
    2c90:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2c94:	73 94       	inc	r7
    2c96:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c98:	f5 cf       	rjmp	.-22     	; 0x2c84 <vfprintf+0x2f0>
    2c9a:	73 14       	cp	r7, r3
    2c9c:	10 f4       	brcc	.+4      	; 0x2ca2 <vfprintf+0x30e>
    2c9e:	37 18       	sub	r3, r7
    2ca0:	01 c0       	rjmp	.+2      	; 0x2ca4 <vfprintf+0x310>
    2ca2:	31 2c       	mov	r3, r1
    2ca4:	24 ff       	sbrs	r18, 4
    2ca6:	12 c0       	rjmp	.+36     	; 0x2ccc <vfprintf+0x338>
    2ca8:	b7 01       	movw	r22, r14
    2caa:	80 e3       	ldi	r24, 0x30	; 48
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	2c 87       	std	Y+12, r18	; 0x0c
    2cb0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2cb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cb6:	22 ff       	sbrs	r18, 2
    2cb8:	17 c0       	rjmp	.+46     	; 0x2ce8 <vfprintf+0x354>
    2cba:	21 ff       	sbrs	r18, 1
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <vfprintf+0x330>
    2cbe:	88 e5       	ldi	r24, 0x58	; 88
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <vfprintf+0x334>
    2cc4:	88 e7       	ldi	r24, 0x78	; 120
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	b7 01       	movw	r22, r14
    2cca:	0c c0       	rjmp	.+24     	; 0x2ce4 <vfprintf+0x350>
    2ccc:	82 2f       	mov	r24, r18
    2cce:	86 78       	andi	r24, 0x86	; 134
    2cd0:	59 f0       	breq	.+22     	; 0x2ce8 <vfprintf+0x354>
    2cd2:	21 fd       	sbrc	r18, 1
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <vfprintf+0x346>
    2cd6:	80 e2       	ldi	r24, 0x20	; 32
    2cd8:	01 c0       	rjmp	.+2      	; 0x2cdc <vfprintf+0x348>
    2cda:	8b e2       	ldi	r24, 0x2B	; 43
    2cdc:	27 fd       	sbrc	r18, 7
    2cde:	8d e2       	ldi	r24, 0x2D	; 45
    2ce0:	b7 01       	movw	r22, r14
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2ce8:	a5 14       	cp	r10, r5
    2cea:	38 f4       	brcc	.+14     	; 0x2cfa <vfprintf+0x366>
    2cec:	b7 01       	movw	r22, r14
    2cee:	80 e3       	ldi	r24, 0x30	; 48
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2cf6:	5a 94       	dec	r5
    2cf8:	f7 cf       	rjmp	.-18     	; 0x2ce8 <vfprintf+0x354>
    2cfa:	aa 94       	dec	r10
    2cfc:	f4 01       	movw	r30, r8
    2cfe:	ea 0d       	add	r30, r10
    2d00:	f1 1d       	adc	r31, r1
    2d02:	80 81       	ld	r24, Z
    2d04:	b7 01       	movw	r22, r14
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2d0c:	a1 10       	cpse	r10, r1
    2d0e:	f5 cf       	rjmp	.-22     	; 0x2cfa <vfprintf+0x366>
    2d10:	33 20       	and	r3, r3
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <vfprintf+0x382>
    2d14:	51 ce       	rjmp	.-862    	; 0x29b8 <vfprintf+0x24>
    2d16:	b7 01       	movw	r22, r14
    2d18:	80 e2       	ldi	r24, 0x20	; 32
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <fputc>
    2d20:	3a 94       	dec	r3
    2d22:	f6 cf       	rjmp	.-20     	; 0x2d10 <vfprintf+0x37c>
    2d24:	f7 01       	movw	r30, r14
    2d26:	86 81       	ldd	r24, Z+6	; 0x06
    2d28:	97 81       	ldd	r25, Z+7	; 0x07
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <vfprintf+0x39c>
    2d2c:	8f ef       	ldi	r24, 0xFF	; 255
    2d2e:	9f ef       	ldi	r25, 0xFF	; 255
    2d30:	2c 96       	adiw	r28, 0x0c	; 12
    2d32:	e2 e1       	ldi	r30, 0x12	; 18
    2d34:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__epilogue_restores__>

00002d38 <strnlen_P>:
    2d38:	fc 01       	movw	r30, r24
    2d3a:	05 90       	lpm	r0, Z+
    2d3c:	61 50       	subi	r22, 0x01	; 1
    2d3e:	70 40       	sbci	r23, 0x00	; 0
    2d40:	01 10       	cpse	r0, r1
    2d42:	d8 f7       	brcc	.-10     	; 0x2d3a <strnlen_P+0x2>
    2d44:	80 95       	com	r24
    2d46:	90 95       	com	r25
    2d48:	8e 0f       	add	r24, r30
    2d4a:	9f 1f       	adc	r25, r31
    2d4c:	08 95       	ret

00002d4e <strnlen>:
    2d4e:	fc 01       	movw	r30, r24
    2d50:	61 50       	subi	r22, 0x01	; 1
    2d52:	70 40       	sbci	r23, 0x00	; 0
    2d54:	01 90       	ld	r0, Z+
    2d56:	01 10       	cpse	r0, r1
    2d58:	d8 f7       	brcc	.-10     	; 0x2d50 <strnlen+0x2>
    2d5a:	80 95       	com	r24
    2d5c:	90 95       	com	r25
    2d5e:	8e 0f       	add	r24, r30
    2d60:	9f 1f       	adc	r25, r31
    2d62:	08 95       	ret

00002d64 <fputc>:
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	18 2f       	mov	r17, r24
    2d6e:	09 2f       	mov	r16, r25
    2d70:	eb 01       	movw	r28, r22
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	81 fd       	sbrc	r24, 1
    2d76:	03 c0       	rjmp	.+6      	; 0x2d7e <fputc+0x1a>
    2d78:	8f ef       	ldi	r24, 0xFF	; 255
    2d7a:	9f ef       	ldi	r25, 0xFF	; 255
    2d7c:	20 c0       	rjmp	.+64     	; 0x2dbe <fputc+0x5a>
    2d7e:	82 ff       	sbrs	r24, 2
    2d80:	10 c0       	rjmp	.+32     	; 0x2da2 <fputc+0x3e>
    2d82:	4e 81       	ldd	r20, Y+6	; 0x06
    2d84:	5f 81       	ldd	r21, Y+7	; 0x07
    2d86:	2c 81       	ldd	r18, Y+4	; 0x04
    2d88:	3d 81       	ldd	r19, Y+5	; 0x05
    2d8a:	42 17       	cp	r20, r18
    2d8c:	53 07       	cpc	r21, r19
    2d8e:	7c f4       	brge	.+30     	; 0x2dae <fputc+0x4a>
    2d90:	e8 81       	ld	r30, Y
    2d92:	f9 81       	ldd	r31, Y+1	; 0x01
    2d94:	9f 01       	movw	r18, r30
    2d96:	2f 5f       	subi	r18, 0xFF	; 255
    2d98:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9a:	39 83       	std	Y+1, r19	; 0x01
    2d9c:	28 83       	st	Y, r18
    2d9e:	10 83       	st	Z, r17
    2da0:	06 c0       	rjmp	.+12     	; 0x2dae <fputc+0x4a>
    2da2:	e8 85       	ldd	r30, Y+8	; 0x08
    2da4:	f9 85       	ldd	r31, Y+9	; 0x09
    2da6:	81 2f       	mov	r24, r17
    2da8:	09 95       	icall
    2daa:	89 2b       	or	r24, r25
    2dac:	29 f7       	brne	.-54     	; 0x2d78 <fputc+0x14>
    2dae:	2e 81       	ldd	r18, Y+6	; 0x06
    2db0:	3f 81       	ldd	r19, Y+7	; 0x07
    2db2:	2f 5f       	subi	r18, 0xFF	; 255
    2db4:	3f 4f       	sbci	r19, 0xFF	; 255
    2db6:	3f 83       	std	Y+7, r19	; 0x07
    2db8:	2e 83       	std	Y+6, r18	; 0x06
    2dba:	81 2f       	mov	r24, r17
    2dbc:	90 2f       	mov	r25, r16
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret

00002dc8 <__ultoa_invert>:
    2dc8:	fa 01       	movw	r30, r20
    2dca:	aa 27       	eor	r26, r26
    2dcc:	28 30       	cpi	r18, 0x08	; 8
    2dce:	51 f1       	breq	.+84     	; 0x2e24 <__ultoa_invert+0x5c>
    2dd0:	20 31       	cpi	r18, 0x10	; 16
    2dd2:	81 f1       	breq	.+96     	; 0x2e34 <__ultoa_invert+0x6c>
    2dd4:	e8 94       	clt
    2dd6:	6f 93       	push	r22
    2dd8:	6e 7f       	andi	r22, 0xFE	; 254
    2dda:	6e 5f       	subi	r22, 0xFE	; 254
    2ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dde:	8f 4f       	sbci	r24, 0xFF	; 255
    2de0:	9f 4f       	sbci	r25, 0xFF	; 255
    2de2:	af 4f       	sbci	r26, 0xFF	; 255
    2de4:	b1 e0       	ldi	r27, 0x01	; 1
    2de6:	3e d0       	rcall	.+124    	; 0x2e64 <__ultoa_invert+0x9c>
    2de8:	b4 e0       	ldi	r27, 0x04	; 4
    2dea:	3c d0       	rcall	.+120    	; 0x2e64 <__ultoa_invert+0x9c>
    2dec:	67 0f       	add	r22, r23
    2dee:	78 1f       	adc	r23, r24
    2df0:	89 1f       	adc	r24, r25
    2df2:	9a 1f       	adc	r25, r26
    2df4:	a1 1d       	adc	r26, r1
    2df6:	68 0f       	add	r22, r24
    2df8:	79 1f       	adc	r23, r25
    2dfa:	8a 1f       	adc	r24, r26
    2dfc:	91 1d       	adc	r25, r1
    2dfe:	a1 1d       	adc	r26, r1
    2e00:	6a 0f       	add	r22, r26
    2e02:	71 1d       	adc	r23, r1
    2e04:	81 1d       	adc	r24, r1
    2e06:	91 1d       	adc	r25, r1
    2e08:	a1 1d       	adc	r26, r1
    2e0a:	20 d0       	rcall	.+64     	; 0x2e4c <__ultoa_invert+0x84>
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <__ultoa_invert+0x48>
    2e0e:	68 94       	set
    2e10:	3f 91       	pop	r19
    2e12:	2a e0       	ldi	r18, 0x0A	; 10
    2e14:	26 9f       	mul	r18, r22
    2e16:	11 24       	eor	r1, r1
    2e18:	30 19       	sub	r19, r0
    2e1a:	30 5d       	subi	r19, 0xD0	; 208
    2e1c:	31 93       	st	Z+, r19
    2e1e:	de f6       	brtc	.-74     	; 0x2dd6 <__ultoa_invert+0xe>
    2e20:	cf 01       	movw	r24, r30
    2e22:	08 95       	ret
    2e24:	46 2f       	mov	r20, r22
    2e26:	47 70       	andi	r20, 0x07	; 7
    2e28:	40 5d       	subi	r20, 0xD0	; 208
    2e2a:	41 93       	st	Z+, r20
    2e2c:	b3 e0       	ldi	r27, 0x03	; 3
    2e2e:	0f d0       	rcall	.+30     	; 0x2e4e <__ultoa_invert+0x86>
    2e30:	c9 f7       	brne	.-14     	; 0x2e24 <__ultoa_invert+0x5c>
    2e32:	f6 cf       	rjmp	.-20     	; 0x2e20 <__ultoa_invert+0x58>
    2e34:	46 2f       	mov	r20, r22
    2e36:	4f 70       	andi	r20, 0x0F	; 15
    2e38:	40 5d       	subi	r20, 0xD0	; 208
    2e3a:	4a 33       	cpi	r20, 0x3A	; 58
    2e3c:	18 f0       	brcs	.+6      	; 0x2e44 <__ultoa_invert+0x7c>
    2e3e:	49 5d       	subi	r20, 0xD9	; 217
    2e40:	31 fd       	sbrc	r19, 1
    2e42:	40 52       	subi	r20, 0x20	; 32
    2e44:	41 93       	st	Z+, r20
    2e46:	02 d0       	rcall	.+4      	; 0x2e4c <__ultoa_invert+0x84>
    2e48:	a9 f7       	brne	.-22     	; 0x2e34 <__ultoa_invert+0x6c>
    2e4a:	ea cf       	rjmp	.-44     	; 0x2e20 <__ultoa_invert+0x58>
    2e4c:	b4 e0       	ldi	r27, 0x04	; 4
    2e4e:	a6 95       	lsr	r26
    2e50:	97 95       	ror	r25
    2e52:	87 95       	ror	r24
    2e54:	77 95       	ror	r23
    2e56:	67 95       	ror	r22
    2e58:	ba 95       	dec	r27
    2e5a:	c9 f7       	brne	.-14     	; 0x2e4e <__ultoa_invert+0x86>
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	61 05       	cpc	r22, r1
    2e60:	71 05       	cpc	r23, r1
    2e62:	08 95       	ret
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	0a 2e       	mov	r0, r26
    2e6a:	06 94       	lsr	r0
    2e6c:	57 95       	ror	r21
    2e6e:	47 95       	ror	r20
    2e70:	37 95       	ror	r19
    2e72:	27 95       	ror	r18
    2e74:	ba 95       	dec	r27
    2e76:	c9 f7       	brne	.-14     	; 0x2e6a <__ultoa_invert+0xa2>
    2e78:	62 0f       	add	r22, r18
    2e7a:	73 1f       	adc	r23, r19
    2e7c:	84 1f       	adc	r24, r20
    2e7e:	95 1f       	adc	r25, r21
    2e80:	a0 1d       	adc	r26, r0
    2e82:	08 95       	ret

00002e84 <__prologue_saves__>:
    2e84:	2f 92       	push	r2
    2e86:	3f 92       	push	r3
    2e88:	4f 92       	push	r4
    2e8a:	5f 92       	push	r5
    2e8c:	6f 92       	push	r6
    2e8e:	7f 92       	push	r7
    2e90:	8f 92       	push	r8
    2e92:	9f 92       	push	r9
    2e94:	af 92       	push	r10
    2e96:	bf 92       	push	r11
    2e98:	cf 92       	push	r12
    2e9a:	df 92       	push	r13
    2e9c:	ef 92       	push	r14
    2e9e:	ff 92       	push	r15
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	ca 1b       	sub	r28, r26
    2eae:	db 0b       	sbc	r29, r27
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	09 94       	ijmp

00002ebc <__epilogue_restores__>:
    2ebc:	2a 88       	ldd	r2, Y+18	; 0x12
    2ebe:	39 88       	ldd	r3, Y+17	; 0x11
    2ec0:	48 88       	ldd	r4, Y+16	; 0x10
    2ec2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ec4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ec6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ec8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eca:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ecc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ece:	b9 84       	ldd	r11, Y+9	; 0x09
    2ed0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ed2:	df 80       	ldd	r13, Y+7	; 0x07
    2ed4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ed6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ed8:	0c 81       	ldd	r16, Y+4	; 0x04
    2eda:	1b 81       	ldd	r17, Y+3	; 0x03
    2edc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ede:	b9 81       	ldd	r27, Y+1	; 0x01
    2ee0:	ce 0f       	add	r28, r30
    2ee2:	d1 1d       	adc	r29, r1
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	ed 01       	movw	r28, r26
    2ef0:	08 95       	ret

00002ef2 <_exit>:
    2ef2:	f8 94       	cli

00002ef4 <__stop_program>:
    2ef4:	ff cf       	rjmp	.-2      	; 0x2ef4 <__stop_program>
