
node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000218  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000158  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000010be  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000706  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007df  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000034c  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005c3  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000007ee  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000118  00000000  00000000  00003441  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_2>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ea       	ldi	r30, 0xA4	; 164
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  a6:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_1>:
	
		//Data Length
		temp.length = (MCP_read(MCP_RXB0DLC));
		
		//Data batch
		for (int i = 0; i < temp.length; i++) temp.data[i] = MCP_read(MCP_RXB0DM + i);
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 01 01 	sts	0x0101, r25
  c4:	80 93 00 01 	sts	0x0100, r24
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_2>:
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
	
	return pos;
}
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 03 01 	sts	0x0103, r25
  ec:	80 93 02 01 	sts	0x0102, r24
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
}

ISR(INT1_vect)
{
	finished = 1;
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <music_start_transmission>:

}

void music_start_transmission()
{
	SELECT_PORT |= (1 << SELECT_PIN); //Sends interrupt to node 3
  fe:	c0 9a       	sbi	0x18, 0	; 24
 100:	08 95       	ret

00000102 <music_end_transmission>:
}

void music_end_transmission()
{
	SELECT_PORT &= ~(1 << SELECT_PIN); //Pulls it low
 102:	c0 98       	cbi	0x18, 0	; 24
 104:	08 95       	ret

00000106 <music_init>:
void music_function_pin(int PIN, int v);

void music_init()
{
	//Sets up ports
	DDRB |= (1 << PB0);
 106:	b8 9a       	sbi	0x17, 0	; 23
	DDRD |= (1 << PD4)|(1 << PD5);
 108:	81 b3       	in	r24, 0x11	; 17
 10a:	80 63       	ori	r24, 0x30	; 48
 10c:	81 bb       	out	0x11, r24	; 17
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
	else if (v == 0) FUNCTION_PORT &= ~(1 << PIN);
 10e:	94 98       	cbi	0x12, 4	; 18
 110:	95 98       	cbi	0x12, 5	; 18
	//Initializes pin values
	music_function_pin(CTRL_MODE_PIN,0);
	music_function_pin(DIRECTION_PIN,0);
	
	//Completes setup
	music_start_transmission();
 112:	0e 94 7f 00 	call	0xfe	; 0xfe <music_start_transmission>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <music_init+0x16>
 124:	00 c0       	rjmp	.+0      	; 0x126 <music_init+0x20>
 126:	00 c0       	rjmp	.+0      	; 0x128 <music_init+0x22>
	_delay_ms(200);
	music_end_transmission();
 128:	0e 94 81 00 	call	0x102	; 0x102 <music_end_transmission>
 12c:	08 95       	ret

0000012e <music_next_song>:
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
	else if (v == 0) FUNCTION_PORT &= ~(1 << PIN);
 12e:	94 98       	cbi	0x12, 4	; 18
{
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
 130:	95 9a       	sbi	0x12, 5	; 18

void music_next_song()
{
	music_function_pin(CTRL_MODE_PIN,0);
	music_function_pin(DIRECTION_PIN,1);
	music_start_transmission();
 132:	0e 94 7f 00 	call	0xfe	; 0xfe <music_start_transmission>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <music_next_song+0xe>
 144:	00 c0       	rjmp	.+0      	; 0x146 <music_next_song+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <music_next_song+0x1a>
	_delay_ms(200);
	music_end_transmission();
 148:	0e 94 81 00 	call	0x102	; 0x102 <music_end_transmission>
 14c:	08 95       	ret

0000014e <music_prev_song>:
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
	else if (v == 0) FUNCTION_PORT &= ~(1 << PIN);
 14e:	94 98       	cbi	0x12, 4	; 18
 150:	95 98       	cbi	0x12, 5	; 18

void music_prev_song()
{
	music_function_pin(CTRL_MODE_PIN,0);
	music_function_pin(DIRECTION_PIN,0);
	music_start_transmission();
 152:	0e 94 7f 00 	call	0xfe	; 0xfe <music_start_transmission>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <music_prev_song+0xe>
 164:	00 c0       	rjmp	.+0      	; 0x166 <music_prev_song+0x18>
 166:	00 c0       	rjmp	.+0      	; 0x168 <music_prev_song+0x1a>
	_delay_ms(200);
	music_end_transmission();
 168:	0e 94 81 00 	call	0x102	; 0x102 <music_end_transmission>
 16c:	08 95       	ret

0000016e <main>:
	//	if (!app_endscreen()) break; //Shows score asks if player wants to replay

	//app_goodbye_message(); //Thanks player for playing
	*/

	music_init();
 16e:	0e 94 83 00 	call	0x106	; 0x106 <music_init>
	
	while (1)
	{
		music_next_song();
 172:	0e 94 97 00 	call	0x12e	; 0x12e <music_next_song>
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	95 e9       	ldi	r25, 0x95	; 149
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xe>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x18>
 186:	00 00       	nop
		_delay_ms(10000);
		music_prev_song();
 188:	0e 94 a7 00 	call	0x14e	; 0x14e <music_prev_song>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	95 e9       	ldi	r25, 0x95	; 149
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x24>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x2e>
 19c:	00 00       	nop
 19e:	e9 cf       	rjmp	.-46     	; 0x172 <main+0x4>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
