
node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  000034be  00003552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  008002ae  008002ae  00003700  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000420  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000507c  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001502  00000000  00000000  00008bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001802  00000000  00000000  0000a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bd4  00000000  00000000  0000b8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d9b  00000000  00000000  0000c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002807  00000000  00000000  0000d26b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003c0  00000000  00000000  0000fa72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_1>
       8:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__vector_2>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ee eb       	ldi	r30, 0xBE	; 190
     6d4:	f4 e3       	ldi	r31, 0x34	; 52
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	ae 3a       	cpi	r26, 0xAE	; 174
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	ae ea       	ldi	r26, 0xAE	; 174
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a6 37       	cpi	r26, 0x76	; 118
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 1e 14 	call	0x283c	; 0x283c <main>
     6f6:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <CAN_init>:
//Se .h file for function explanations

volatile int message_received = 0;

void CAN_init(char mode)
{
     6fe:	cf 93       	push	r28
     700:	c8 2f       	mov	r28, r24
	//Resets MCP-Values
	MCP_init();
     702:	0e 94 5c 05 	call	0xab8	; 0xab8 <MCP_init>
	
	//Sets receive control register, disables rollover for RX-buffer 0
	MCP_bit_modify(MCP_RXB0CTRL,0b01100000,0xFF);
     706:	4f ef       	ldi	r20, 0xFF	; 255
     708:	60 e6       	ldi	r22, 0x60	; 96
     70a:	80 e6       	ldi	r24, 0x60	; 96
     70c:	0e 94 61 05 	call	0xac2	; 0xac2 <MCP_bit_modify>

	//Interrupt when message is received
	MCP_bit_modify(MCP_CANINTE, 0x01, 0x01);
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	8b e2       	ldi	r24, 0x2B	; 43
     716:	0e 94 61 05 	call	0xac2	; 0xac2 <MCP_bit_modify>
	
	//Sets mode of operation
	switch (mode)
     71a:	cc 23       	and	r28, r28
     71c:	19 f0       	breq	.+6      	; 0x724 <CAN_init+0x26>
     71e:	c1 30       	cpi	r28, 0x01	; 1
     720:	39 f0       	breq	.+14     	; 0x730 <CAN_init+0x32>
     722:	0b c0       	rjmp	.+22     	; 0x73a <CAN_init+0x3c>
	{
		case CAN_MODE_LOOPBACK: //Loopback mode
		{
			MCP_bit_modify(MCP_CANCTRL,0xE0,(0x40));
     724:	40 e4       	ldi	r20, 0x40	; 64
     726:	60 ee       	ldi	r22, 0xE0	; 224
     728:	8f e0       	ldi	r24, 0x0F	; 15
     72a:	0e 94 61 05 	call	0xac2	; 0xac2 <MCP_bit_modify>
			break;
     72e:	05 c0       	rjmp	.+10     	; 0x73a <CAN_init+0x3c>
		}
		
		case CAN_MODE_NORMAL: //Normal operations
		{
			MCP_bit_modify(MCP_CANCTRL,0xE0,(0x00));
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	60 ee       	ldi	r22, 0xE0	; 224
     734:	8f e0       	ldi	r24, 0x0F	; 15
     736:	0e 94 61 05 	call	0xac2	; 0xac2 <MCP_bit_modify>
	}
	
	//Initializing interrupt
	#ifdef __AVR_ATmega162__
	
	MCUCR |= (1<<ISC01); 
     73a:	85 b7       	in	r24, 0x35	; 53
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     740:	8b b7       	in	r24, 0x3b	; 59
     742:	80 64       	ori	r24, 0x40	; 64
     744:	8b bf       	out	0x3b, r24	; 59
	
	EICRB |= (1<<ISC51); //Falling edge causes interrupt
	EIMSK |= (1<<INT5); //Sets PE5 as input for interrupts
	
	#endif
}
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <CAN_send_frame>:

void CAN_send_frame(struct can_frame* message)
{
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	7c 01       	movw	r14, r24
	
	//Sets ID
	MCP_write((message->id >> 3), MCP_TXB0SIDH); //Higher ID-bits 10 - 3
     758:	fc 01       	movw	r30, r24
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	95 95       	asr	r25
     764:	87 95       	ror	r24
     766:	95 95       	asr	r25
     768:	87 95       	ror	r24
     76a:	61 e3       	ldi	r22, 0x31	; 49
     76c:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_write>
	MCP_write((message->id << 5), MCP_TXB0SIDL); //Lower ID-bits 2-0
     770:	f7 01       	movw	r30, r14
     772:	80 81       	ld	r24, Z
     774:	62 e3       	ldi	r22, 0x32	; 50
     776:	82 95       	swap	r24
     778:	88 0f       	add	r24, r24
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_write>
	
	//Sets Data length
	MCP_write(message->length, MCP_TXB0DLC);
     780:	65 e3       	ldi	r22, 0x35	; 53
     782:	f7 01       	movw	r30, r14
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_write>
	
	//Sets Data bytes
	for (int i = 0; i < message->length; i++)
     78a:	f7 01       	movw	r30, r14
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	18 16       	cp	r1, r24
     790:	ac f4       	brge	.+42     	; 0x7bc <CAN_send_frame+0x72>
     792:	87 01       	movw	r16, r14
     794:	0d 5f       	subi	r16, 0xFD	; 253
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	6c 2f       	mov	r22, r28
     79e:	6a 5c       	subi	r22, 0xCA	; 202
	{
		MCP_write(message->data[i], MCP_TXB0D0 + i);
     7a0:	f8 01       	movw	r30, r16
     7a2:	81 91       	ld	r24, Z+
     7a4:	8f 01       	movw	r16, r30
     7a6:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_write>
	
	//Sets Data length
	MCP_write(message->length, MCP_TXB0DLC);
	
	//Sets Data bytes
	for (int i = 0; i < message->length; i++)
     7aa:	21 96       	adiw	r28, 0x01	; 1
     7ac:	f7 01       	movw	r30, r14
     7ae:	22 81       	ldd	r18, Z+2	; 0x02
     7b0:	33 27       	eor	r19, r19
     7b2:	27 fd       	sbrc	r18, 7
     7b4:	30 95       	com	r19
     7b6:	c2 17       	cp	r28, r18
     7b8:	d3 07       	cpc	r29, r19
     7ba:	84 f3       	brlt	.-32     	; 0x79c <CAN_send_frame+0x52>
	{
		MCP_write(message->data[i], MCP_TXB0D0 + i);
	}
	
	//Sends
	MCP_RTS(0);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 35 05 	call	0xa6a	; 0xa6a <MCP_RTS>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	08 95       	ret

000007d0 <__vector_1>:

//Enables interrupt vector

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
}

int CAN_int_vector()
{
	//Tell rest of the program we have mail
	message_received = 1;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	90 93 af 02 	sts	0x02AF, r25
     7e6:	80 93 ae 02 	sts	0x02AE, r24

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
	CAN_int_vector();
}
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <CAN_receive_transmission>:
	CAN_int_vector();
}
#endif

struct can_frame CAN_receive_transmission()
{
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	2b 97       	sbiw	r28, 0x0b	; 11
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	7c 01       	movw	r14, r24
     822:	9e 01       	movw	r18, r28
     824:	25 5f       	subi	r18, 0xF5	; 245
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	fe 01       	movw	r30, r28
     82a:	34 96       	adiw	r30, 0x04	; 4
	
	//Temporary message
	struct can_frame temp;
	for (int i = 0; i < 7; i++) temp.data[i] = 0;
     82c:	11 92       	st	Z+, r1
     82e:	e2 17       	cp	r30, r18
     830:	f3 07       	cpc	r31, r19
     832:	e1 f7       	brne	.-8      	; 0x82c <CAN_receive_transmission+0x34>
	temp.id = -1;
	temp.length = 0;
	
	//Checks if we've got mail
	if (!message_received) return temp;
     834:	80 91 ae 02 	lds	r24, 0x02AE
     838:	90 91 af 02 	lds	r25, 0x02AF
     83c:	89 2b       	or	r24, r25
     83e:	71 f4       	brne	.+28     	; 0x85c <CAN_receive_transmission+0x64>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	9f ef       	ldi	r25, 0xFF	; 255
     844:	9a 83       	std	Y+2, r25	; 0x02
     846:	89 83       	std	Y+1, r24	; 0x01
     848:	1b 82       	std	Y+3, r1	; 0x03
     84a:	8b e0       	ldi	r24, 0x0B	; 11
     84c:	fe 01       	movw	r30, r28
     84e:	31 96       	adiw	r30, 0x01	; 1
     850:	d7 01       	movw	r26, r14
     852:	01 90       	ld	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	8a 95       	dec	r24
     858:	e1 f7       	brne	.-8      	; 0x852 <CAN_receive_transmission+0x5a>
     85a:	4a c0       	rjmp	.+148    	; 0x8f0 <CAN_receive_transmission+0xf8>
	else
	{
		message_received = 0;
     85c:	10 92 af 02 	sts	0x02AF, r1
     860:	10 92 ae 02 	sts	0x02AE, r1

		//Check ID
		temp.id = (MCP_read(MCP_RXB0SIDH) << 3);
     864:	81 e6       	ldi	r24, 0x61	; 97
     866:	0e 94 1f 05 	call	0xa3e	; 0xa3e <MCP_read>
     86a:	a8 2e       	mov	r10, r24
		temp.id += (MCP_read(MCP_RXB0SIDL) >> 5);
     86c:	82 e6       	ldi	r24, 0x62	; 98
     86e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <MCP_read>
	else
	{
		message_received = 0;

		//Check ID
		temp.id = (MCP_read(MCP_RXB0SIDH) << 3);
     872:	b1 2c       	mov	r11, r1
     874:	aa 0c       	add	r10, r10
     876:	bb 1c       	adc	r11, r11
     878:	aa 0c       	add	r10, r10
     87a:	bb 1c       	adc	r11, r11
     87c:	aa 0c       	add	r10, r10
     87e:	bb 1c       	adc	r11, r11
		temp.id += (MCP_read(MCP_RXB0SIDL) >> 5);
     880:	82 95       	swap	r24
     882:	86 95       	lsr	r24
     884:	87 70       	andi	r24, 0x07	; 7
     886:	a8 0e       	add	r10, r24
     888:	b1 1c       	adc	r11, r1
	
		//Data Length
		temp.length = (MCP_read(MCP_RXB0DLC));
     88a:	85 e6       	ldi	r24, 0x65	; 101
     88c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <MCP_read>
     890:	88 2e       	mov	r8, r24
		
		//Data batch
		for (int i = 0; i < temp.length; i++) temp.data[i] = MCP_read(MCP_RXB0DM + i);
     892:	18 16       	cp	r1, r24
     894:	ec f4       	brge	.+58     	; 0x8d0 <CAN_receive_transmission+0xd8>
     896:	cc 24       	eor	r12, r12
     898:	c3 94       	inc	r12
     89a:	d1 2c       	mov	r13, r1
     89c:	cc 0e       	add	r12, r28
     89e:	dd 1e       	adc	r13, r29
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	c8 0e       	add	r12, r24
     8a4:	d1 1c       	adc	r13, r1
     8a6:	c8 0c       	add	r12, r8
     8a8:	d1 1c       	adc	r13, r1
     8aa:	87 fc       	sbrc	r8, 7
     8ac:	da 94       	dec	r13
     8ae:	8e 01       	movw	r16, r28
     8b0:	0c 5f       	subi	r16, 0xFC	; 252
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
     8b4:	0f 2e       	mov	r0, r31
     8b6:	f6 e6       	ldi	r31, 0x66	; 102
     8b8:	9f 2e       	mov	r9, r31
     8ba:	f0 2d       	mov	r31, r0
     8bc:	89 2d       	mov	r24, r9
     8be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <MCP_read>
     8c2:	f8 01       	movw	r30, r16
     8c4:	81 93       	st	Z+, r24
     8c6:	8f 01       	movw	r16, r30
     8c8:	93 94       	inc	r9
     8ca:	ec 15       	cp	r30, r12
     8cc:	fd 05       	cpc	r31, r13
     8ce:	b1 f7       	brne	.-20     	; 0x8bc <CAN_receive_transmission+0xc4>

		MCP_bit_modify(MCP_CANINTF,0x01, 0x00);
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	8c e2       	ldi	r24, 0x2C	; 44
     8d6:	0e 94 61 05 	call	0xac2	; 0xac2 <MCP_bit_modify>
		return temp;
     8da:	ba 82       	std	Y+2, r11	; 0x02
     8dc:	a9 82       	std	Y+1, r10	; 0x01
     8de:	8b 82       	std	Y+3, r8	; 0x03
     8e0:	8b e0       	ldi	r24, 0x0B	; 11
     8e2:	fe 01       	movw	r30, r28
     8e4:	31 96       	adiw	r30, 0x01	; 1
     8e6:	d7 01       	movw	r26, r14
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	8a 95       	dec	r24
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <CAN_receive_transmission+0xf0>
	}
}
     8f0:	c7 01       	movw	r24, r14
     8f2:	2b 96       	adiw	r28, 0x0b	; 11
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	9f 90       	pop	r9
     914:	8f 90       	pop	r8
     916:	08 95       	ret

00000918 <CAN_frame_init>:

struct can_frame CAN_frame_init(int id, uint8_t len)
{
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	2b 97       	sbiw	r28, 0x0b	; 11
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
	struct can_frame t;
	t.id = id;
	t.length = len;
	for (int i = 0; i < t.length; i++) t.data[i] = 0; //Initial value = 0
     92c:	14 16       	cp	r1, r20
     92e:	5c f4       	brge	.+22     	; 0x946 <CAN_frame_init+0x2e>
     930:	fe 01       	movw	r30, r28
     932:	34 96       	adiw	r30, 0x04	; 4
     934:	9f 01       	movw	r18, r30
     936:	24 0f       	add	r18, r20
     938:	31 1d       	adc	r19, r1
     93a:	47 fd       	sbrc	r20, 7
     93c:	3a 95       	dec	r19
     93e:	11 92       	st	Z+, r1
     940:	e2 17       	cp	r30, r18
     942:	f3 07       	cpc	r31, r19
     944:	e1 f7       	brne	.-8      	; 0x93e <CAN_frame_init+0x26>
	return t;
     946:	7a 83       	std	Y+2, r23	; 0x02
     948:	69 83       	std	Y+1, r22	; 0x01
     94a:	4b 83       	std	Y+3, r20	; 0x03
     94c:	2b e0       	ldi	r18, 0x0B	; 11
     94e:	fe 01       	movw	r30, r28
     950:	31 96       	adiw	r30, 0x01	; 1
     952:	dc 01       	movw	r26, r24
     954:	01 90       	ld	r0, Z+
     956:	0d 92       	st	X+, r0
     958:	2a 95       	dec	r18
     95a:	e1 f7       	brne	.-8      	; 0x954 <CAN_frame_init+0x3c>
}
     95c:	2b 96       	adiw	r28, 0x0b	; 11
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <CAN_handle_message>:
}



int CAN_handle_message()
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	2b 97       	sbiw	r28, 0x0b	; 11
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
	
	//Collects the message
	struct can_frame message = CAN_receive_transmission();
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_receive_transmission>

	switch (message.id)
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	91 05       	cpc	r25, r1
     992:	11 f0       	breq	.+4      	; 0x998 <CAN_handle_message+0x2a>
			break;
		}
		#endif
	}
	
	return 0;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
	
}
     998:	2b 96       	adiw	r28, 0x0b	; 11
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <CAN_send_parameter>:

void CAN_send_parameter(int id, float parameter)
{
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	2b 97       	sbiw	r28, 0x0b	; 11
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	8c 01       	movw	r16, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	ba 01       	movw	r22, r20
	//We need to send a valid regulator parameter
	if (id != ID_REGULATOR_KI && id != ID_REGULATOR_KP) return;
     9c8:	98 01       	movw	r18, r16
     9ca:	22 50       	subi	r18, 0x02	; 2
     9cc:	31 09       	sbc	r19, r1
     9ce:	22 30       	cpi	r18, 0x02	; 2
     9d0:	31 05       	cpc	r19, r1
     9d2:	90 f4       	brcc	.+36     	; 0x9f8 <CAN_send_parameter+0x4e>

	//Multiplies by 1000 and splits into lower and higher bits
	uint16_t total_par = (uint16_t)(parameter * 1000);
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	4a e7       	ldi	r20, 0x7A	; 122
     9da:	54 e4       	ldi	r21, 0x44	; 68
     9dc:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__mulsf3>
     9e0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__fixunssfsi>
	uint8_t lowerbits = total_par;
	uint8_t higherbits = (total_par >> 8);

	//Constructs frame
	struct can_frame message;
	message.length = 2;
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	8b 83       	std	Y+3, r24	; 0x03
	message.data[0] = higherbits;
     9e8:	7c 83       	std	Y+4, r23	; 0x04
	message.data[1] = lowerbits;
     9ea:	6d 83       	std	Y+5, r22	; 0x05
	message.id = id;
     9ec:	1a 83       	std	Y+2, r17	; 0x02
     9ee:	09 83       	std	Y+1, r16	; 0x01

	CAN_send_frame(&message);
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_send_frame>

     9f8:	2b 96       	adiw	r28, 0x0b	; 11
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	08 95       	ret

00000a0e <MCP_write>:
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	c8 2f       	mov	r28, r24
     a14:	d6 2f       	mov	r29, r22
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     a24:	8d 2f       	mov	r24, r29
     a26:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     a2a:	8c 2f       	mov	r24, r28
     a2c:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <MCP_read>:
     a3e:	cf 93       	push	r28
     a40:	c8 2f       	mov	r28, r24
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     a50:	8c 2f       	mov	r24, r28
     a52:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     a56:	0e 94 8d 05 	call	0xb1a	; 0xb1a <SPI_receive_byte>
     a5a:	c8 2f       	mov	r28, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     a64:	8c 2f       	mov	r24, r28
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <MCP_RTS>:
     a6a:	cf 93       	push	r28
     a6c:	88 23       	and	r24, r24
     a6e:	31 f0       	breq	.+12     	; 0xa7c <MCP_RTS+0x12>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	31 f0       	breq	.+12     	; 0xa80 <MCP_RTS+0x16>
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	31 f0       	breq	.+12     	; 0xa84 <MCP_RTS+0x1a>
     a78:	c0 e8       	ldi	r28, 0x80	; 128
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <MCP_RTS+0x1c>
     a7c:	c1 e8       	ldi	r28, 0x81	; 129
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <MCP_RTS+0x1c>
     a80:	c2 e8       	ldi	r28, 0x82	; 130
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <MCP_RTS+0x1c>
     a84:	c4 e8       	ldi	r28, 0x84	; 132
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     a8e:	8c 2f       	mov	r24, r28
     a90:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <MCP_reset>:
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     aa8:	80 ec       	ldi	r24, 0xC0	; 192
     aaa:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     ab6:	08 95       	ret

00000ab8 <MCP_init>:
     ab8:	0e 94 7f 05 	call	0xafe	; 0xafe <SPI_init>
     abc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <MCP_reset>
     ac0:	08 95       	ret

00000ac2 <MCP_bit_modify>:
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	18 2f       	mov	r17, r24
     aca:	d6 2f       	mov	r29, r22
     acc:	c4 2f       	mov	r28, r20
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     ad6:	85 e0       	ldi	r24, 0x05	; 5
     ad8:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     adc:	81 2f       	mov	r24, r17
     ade:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     ae2:	8d 2f       	mov	r24, r29
     ae4:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     ae8:	8c 2f       	mov	r24, r28
     aea:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 95 05 	call	0xb2a	; 0xb2a <SPI_select_slave>
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	08 95       	ret

00000afe <SPI_init>:
     afe:	bd 9a       	sbi	0x17, 5	; 23
     b00:	bf 9a       	sbi	0x17, 7	; 23
     b02:	bc 9a       	sbi	0x17, 4	; 23
     b04:	be 98       	cbi	0x17, 6	; 23
     b06:	6c 9a       	sbi	0x0d, 4	; 13
     b08:	69 9a       	sbi	0x0d, 1	; 13
     b0a:	6e 9a       	sbi	0x0d, 6	; 13
     b0c:	08 95       	ret

00000b0e <SPI_send_byte>:
     b0e:	8f b9       	out	0x0f, r24	; 15
     b10:	77 9b       	sbis	0x0e, 7	; 14
     b12:	fe cf       	rjmp	.-4      	; 0xb10 <SPI_send_byte+0x2>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	08 95       	ret

00000b1a <SPI_receive_byte>:
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_send_byte>
     b20:	77 9b       	sbis	0x0e, 7	; 14
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <SPI_receive_byte+0x6>
     b24:	8f b1       	in	r24, 0x0f	; 15
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	08 95       	ret

00000b2a <SPI_select_slave>:
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	91 05       	cpc	r25, r1
     b2e:	11 f4       	brne	.+4      	; 0xb34 <SPI_select_slave+0xa>
     b30:	c4 98       	cbi	0x18, 4	; 24
     b32:	08 95       	ret
     b34:	89 2b       	or	r24, r25
     b36:	09 f4       	brne	.+2      	; 0xb3a <SPI_select_slave+0x10>
     b38:	c4 9a       	sbi	0x18, 4	; 24
     b3a:	08 95       	ret

00000b3c <UART_send>:
     b3c:	5d 9b       	sbis	0x0b, 5	; 11
     b3e:	fe cf       	rjmp	.-4      	; 0xb3c <UART_send>
     b40:	8c b9       	out	0x0c, r24	; 12
     b42:	08 95       	ret

00000b44 <UART_init>:
     b44:	9c 01       	movw	r18, r24
     b46:	44 27       	eor	r20, r20
     b48:	37 fd       	sbrc	r19, 7
     b4a:	40 95       	com	r20
     b4c:	54 2f       	mov	r21, r20
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 eb       	ldi	r23, 0xB0	; 176
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodsi4>
     b5a:	21 50       	subi	r18, 0x01	; 1
     b5c:	31 09       	sbc	r19, r1
     b5e:	30 bd       	out	0x20, r19	; 32
     b60:	29 b9       	out	0x09, r18	; 9
     b62:	88 e1       	ldi	r24, 0x18	; 24
     b64:	8a b9       	out	0x0a, r24	; 10
     b66:	86 e8       	ldi	r24, 0x86	; 134
     b68:	80 bd       	out	0x20, r24	; 32
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	90 93 73 03 	sts	0x0373, r25
     b72:	80 93 72 03 	sts	0x0372, r24
     b76:	08 95       	ret

00000b78 <app_setup>:
	adc_joy_calibrate();
}

void app_setup()
{
	opt_select_name(); 
     b78:	0e 94 3b 0a 	call	0x1476	; 0x1476 <opt_select_name>
	opt_select_tuning();
     b7c:	0e 94 08 0b 	call	0x1610	; 0x1610 <opt_select_tuning>
	opt_select_music(); 
     b80:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <opt_select_music>
     b84:	08 95       	ret

00000b86 <app_logo>:
	
}

void app_logo()
{
	oled_go_to(1,1);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write("Made by:",2);
     b8e:	62 e0       	ldi	r22, 0x02	; 2
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	89 e6       	ldi	r24, 0x69	; 105
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	
	//L
	oled_write_line(10,20,10,40);
     b9a:	28 e2       	ldi	r18, 0x28	; 40
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e0       	ldi	r20, 0x0A	; 10
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	64 e1       	ldi	r22, 0x14	; 20
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	8a e0       	ldi	r24, 0x0A	; 10
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(10,40,20,40);
     bae:	28 e2       	ldi	r18, 0x28	; 40
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	44 e1       	ldi	r20, 0x14	; 20
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	68 e2       	ldi	r22, 0x28	; 40
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	8a e0       	ldi	r24, 0x0A	; 10
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	
	//A
	oled_write_line(20,40,25,20);
     bc2:	24 e1       	ldi	r18, 0x14	; 20
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	49 e1       	ldi	r20, 0x19	; 25
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	68 e2       	ldi	r22, 0x28	; 40
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(23,30,27,30);
     bd6:	2e e1       	ldi	r18, 0x1E	; 30
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4b e1       	ldi	r20, 0x1B	; 27
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	6e e1       	ldi	r22, 0x1E	; 30
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	87 e1       	ldi	r24, 0x17	; 23
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(25,20,30,40);
     bea:	28 e2       	ldi	r18, 0x28	; 40
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	4e e1       	ldi	r20, 0x1E	; 30
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	64 e1       	ldi	r22, 0x14	; 20
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	89 e1       	ldi	r24, 0x19	; 25
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	
	//R
	oled_write_line(30,40,30,20);
     bfe:	24 e1       	ldi	r18, 0x14	; 20
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	4e e1       	ldi	r20, 0x1E	; 30
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	68 e2       	ldi	r22, 0x28	; 40
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	8e e1       	ldi	r24, 0x1E	; 30
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(30,20,35,20);
     c12:	24 e1       	ldi	r18, 0x14	; 20
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	43 e2       	ldi	r20, 0x23	; 35
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	64 e1       	ldi	r22, 0x14	; 20
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	8e e1       	ldi	r24, 0x1E	; 30
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(35,20,35,25);
     c26:	29 e1       	ldi	r18, 0x19	; 25
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	43 e2       	ldi	r20, 0x23	; 35
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	64 e1       	ldi	r22, 0x14	; 20
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	83 e2       	ldi	r24, 0x23	; 35
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(35,25,30,25);
     c3a:	29 e1       	ldi	r18, 0x19	; 25
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4e e1       	ldi	r20, 0x1E	; 30
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	69 e1       	ldi	r22, 0x19	; 25
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	83 e2       	ldi	r24, 0x23	; 35
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(30,25,35,40);
     c4e:	28 e2       	ldi	r18, 0x28	; 40
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	43 e2       	ldi	r20, 0x23	; 35
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	69 e1       	ldi	r22, 0x19	; 25
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	8e e1       	ldi	r24, 0x1E	; 30
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	
	//S
	oled_write_line(37,40,47,40);
     c62:	28 e2       	ldi	r18, 0x28	; 40
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	4f e2       	ldi	r20, 0x2F	; 47
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	68 e2       	ldi	r22, 0x28	; 40
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	85 e2       	ldi	r24, 0x25	; 37
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(47,40,47,30);
     c76:	2e e1       	ldi	r18, 0x1E	; 30
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4f e2       	ldi	r20, 0x2F	; 47
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	68 e2       	ldi	r22, 0x28	; 40
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	8f e2       	ldi	r24, 0x2F	; 47
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(47,30,35,30);
     c8a:	2e e1       	ldi	r18, 0x1E	; 30
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	43 e2       	ldi	r20, 0x23	; 35
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	6e e1       	ldi	r22, 0x1E	; 30
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	8f e2       	ldi	r24, 0x2F	; 47
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(37,30,37,20);
     c9e:	24 e1       	ldi	r18, 0x14	; 20
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	45 e2       	ldi	r20, 0x25	; 37
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	6e e1       	ldi	r22, 0x1E	; 30
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	85 e2       	ldi	r24, 0x25	; 37
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(37,20,47,20);
     cb2:	24 e1       	ldi	r18, 0x14	; 20
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4f e2       	ldi	r20, 0x2F	; 47
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	64 e1       	ldi	r22, 0x14	; 20
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	85 e2       	ldi	r24, 0x25	; 37
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	
	oled_go_to(52,4);
     cc6:	64 e0       	ldi	r22, 0x04	; 4
     cc8:	84 e3       	ldi	r24, 0x34	; 52
     cca:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write("&",2);
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	82 e7       	ldi	r24, 0x72	; 114
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	
	//P
	oled_write_line(65,40,65,20);
     cda:	24 e1       	ldi	r18, 0x14	; 20
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	41 e4       	ldi	r20, 0x41	; 65
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	68 e2       	ldi	r22, 0x28	; 40
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	81 e4       	ldi	r24, 0x41	; 65
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(65,20,75,20);
     cee:	24 e1       	ldi	r18, 0x14	; 20
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	4b e4       	ldi	r20, 0x4B	; 75
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	64 e1       	ldi	r22, 0x14	; 20
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	81 e4       	ldi	r24, 0x41	; 65
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(75,20,75,30);
     d02:	2e e1       	ldi	r18, 0x1E	; 30
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4b e4       	ldi	r20, 0x4B	; 75
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	64 e1       	ldi	r22, 0x14	; 20
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	8b e4       	ldi	r24, 0x4B	; 75
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(75,30,65,30);
     d16:	2e e1       	ldi	r18, 0x1E	; 30
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	41 e4       	ldi	r20, 0x41	; 65
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	6e e1       	ldi	r22, 0x1E	; 30
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	8b e4       	ldi	r24, 0x4B	; 75
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	
	//E
	oled_write_line(77,40,77,20);
     d2a:	24 e1       	ldi	r18, 0x14	; 20
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4d e4       	ldi	r20, 0x4D	; 77
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	68 e2       	ldi	r22, 0x28	; 40
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	8d e4       	ldi	r24, 0x4D	; 77
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(77,20,85,20);
     d3e:	24 e1       	ldi	r18, 0x14	; 20
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	45 e5       	ldi	r20, 0x55	; 85
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	64 e1       	ldi	r22, 0x14	; 20
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	8d e4       	ldi	r24, 0x4D	; 77
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(77,30,85,30);
     d52:	2e e1       	ldi	r18, 0x1E	; 30
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	45 e5       	ldi	r20, 0x55	; 85
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	6e e1       	ldi	r22, 0x1E	; 30
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	8d e4       	ldi	r24, 0x4D	; 77
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(77,40,85,40);
     d66:	28 e2       	ldi	r18, 0x28	; 40
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	45 e5       	ldi	r20, 0x55	; 85
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	68 e2       	ldi	r22, 0x28	; 40
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	8d e4       	ldi	r24, 0x4D	; 77
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	
	//R
	oled_write_line(87,40,87,20);
     d7a:	24 e1       	ldi	r18, 0x14	; 20
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	47 e5       	ldi	r20, 0x57	; 87
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	68 e2       	ldi	r22, 0x28	; 40
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	87 e5       	ldi	r24, 0x57	; 87
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(87,20,95,20);
     d8e:	24 e1       	ldi	r18, 0x14	; 20
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4f e5       	ldi	r20, 0x5F	; 95
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	64 e1       	ldi	r22, 0x14	; 20
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	87 e5       	ldi	r24, 0x57	; 87
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(95,20,95,25);
     da2:	29 e1       	ldi	r18, 0x19	; 25
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4f e5       	ldi	r20, 0x5F	; 95
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	64 e1       	ldi	r22, 0x14	; 20
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	8f e5       	ldi	r24, 0x5F	; 95
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(95,25,87,25);
     db6:	29 e1       	ldi	r18, 0x19	; 25
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	47 e5       	ldi	r20, 0x57	; 87
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	69 e1       	ldi	r22, 0x19	; 25
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	8f e5       	ldi	r24, 0x5F	; 95
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	oled_write_line(87,25,95,40);
     dca:	28 e2       	ldi	r18, 0x28	; 40
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4f e5       	ldi	r20, 0x5F	; 95
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	69 e1       	ldi	r22, 0x19	; 25
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	87 e5       	ldi	r24, 0x57	; 87
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
	
	//Course name
	oled_go_to(50,7);
     dde:	67 e0       	ldi	r22, 0x07	; 7
     de0:	82 e3       	ldi	r24, 0x32	; 50
     de2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write("TTK4155, H2017",1);
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	84 e7       	ldi	r24, 0x74	; 116
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>

	//Update oled and waits
	oled_update_from_SRAM();
     df2:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df6:	2f ef       	ldi	r18, 0xFF	; 255
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9c e2       	ldi	r25, 0x2C	; 44
     dfc:	21 50       	subi	r18, 0x01	; 1
     dfe:	80 40       	sbci	r24, 0x00	; 0
     e00:	90 40       	sbci	r25, 0x00	; 0
     e02:	e1 f7       	brne	.-8      	; 0xdfc <app_logo+0x276>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <app_logo+0x280>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <app_logo+0x282>
     e08:	08 95       	ret

00000e0a <app_goodbye_message>:
}


void app_goodbye_message()
{
	oled_clear_SRAM();
     e0a:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_update_from_SRAM();
     e0e:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	oled_go_to(20,3);
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	84 e1       	ldi	r24, 0x14	; 20
     e16:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write("THANKS FOR",2);
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	83 e8       	ldi	r24, 0x83	; 131
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_go_to(25,4);
     e26:	64 e0       	ldi	r22, 0x04	; 4
     e28:	89 e1       	ldi	r24, 0x19	; 25
     e2a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write("PLAYING!",2);
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	8e e8       	ldi	r24, 0x8E	; 142
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_update_from_SRAM();
     e3a:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
     e3e:	2f ef       	ldi	r18, 0xFF	; 255
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9a e4       	ldi	r25, 0x4A	; 74
     e44:	21 50       	subi	r18, 0x01	; 1
     e46:	80 40       	sbci	r24, 0x00	; 0
     e48:	90 40       	sbci	r25, 0x00	; 0
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <app_goodbye_message+0x3a>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <app_goodbye_message+0x44>
     e4e:	00 00       	nop
	_delay_ms(5000);
	oled_clear_SRAM();
     e50:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_update_from_SRAM();
     e54:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
     e58:	08 95       	ret

00000e5a <int_to_cstring>:
		return 0;
	}
}

char* int_to_cstring(int t)
{
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	2c 97       	sbiw	r28, 0x0c	; 12
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
	char str[12];
	sprintf(str, "%d", t);
     e72:	9f 93       	push	r25
     e74:	8f 93       	push	r24
     e76:	87 e9       	ldi	r24, 0x97	; 151
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	8e 01       	movw	r16, r28
     e80:	0f 5f       	subi	r16, 0xFF	; 255
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	1f 93       	push	r17
     e86:	0f 93       	push	r16
     e88:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <sprintf>
	return str;
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
}
     e98:	c8 01       	movw	r24, r16
     e9a:	2c 96       	adiw	r28, 0x0c	; 12
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <app_show_gamescreen>:
	_delay_ms(3000);
}

void app_show_gamescreen()
{
	oled_home();
     eb0:	0e 94 de 10 	call	0x21bc	; 0x21bc <oled_home>
	oled_clear_SRAM();
     eb4:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_cstring_write("The game has started", 1);
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	8a e9       	ldi	r24, 0x9A	; 154
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_go_to(0,3);
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write("Current score: " ,1);
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	8f ea       	ldi	r24, 0xAF	; 175
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_go_to(80,3);
     ed8:	63 e0       	ldi	r22, 0x03	; 3
     eda:	80 e5       	ldi	r24, 0x50	; 80
     edc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write(int_to_cstring(CURRENT_SCORE/SCORE_DIVIDER) ,1);
     ee0:	60 91 0a 03 	lds	r22, 0x030A
     ee4:	70 91 0b 03 	lds	r23, 0x030B
     ee8:	80 91 0c 03 	lds	r24, 0x030C
     eec:	90 91 0d 03 	lds	r25, 0x030D
     ef0:	22 e3       	ldi	r18, 0x32	; 50
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__divmodsi4>
     efc:	c9 01       	movw	r24, r18
     efe:	0e 94 2d 07 	call	0xe5a	; 0xe5a <int_to_cstring>
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_update_from_SRAM();
     f0a:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
     f0e:	08 95       	ret

00000f10 <app_run>:


	
void app_run()
{
	NEXT_MENU = 0;
     f10:	10 92 19 03 	sts	0x0319, r1
     f14:	10 92 18 03 	sts	0x0318, r1
	//Game loop
	while (1)
	{
		
		//Update input, if the change from the last transmitted value is large enough we transmit the new values
		if(adc_update_current_input() != 0) send_current_input();
     f18:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <adc_update_current_input>
     f1c:	89 2b       	or	r24, r25
     f1e:	11 f0       	breq	.+4      	; 0xf24 <app_run+0x14>
     f20:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <send_current_input>
		
		//Show game screen
		app_show_gamescreen();
     f24:	0e 94 58 07 	call	0xeb0	; 0xeb0 <app_show_gamescreen>
		
		//Handle input, checks for game over
		if (CAN_handle_message()) return;
     f28:	0e 94 b7 04 	call	0x96e	; 0x96e <CAN_handle_message>
     f2c:	89 2b       	or	r24, r25
     f2e:	d1 f4       	brne	.+52     	; 0xf64 <app_run+0x54>
		
		//Update score
		if (CURRENT_SCORE < MAX_SCORE) CURRENT_SCORE++;
     f30:	80 91 0a 03 	lds	r24, 0x030A
     f34:	90 91 0b 03 	lds	r25, 0x030B
     f38:	a0 91 0c 03 	lds	r26, 0x030C
     f3c:	b0 91 0d 03 	lds	r27, 0x030D
     f40:	8e 3c       	cpi	r24, 0xCE	; 206
     f42:	21 e3       	ldi	r18, 0x31	; 49
     f44:	92 07       	cpc	r25, r18
     f46:	a1 05       	cpc	r26, r1
     f48:	b1 05       	cpc	r27, r1
     f4a:	34 f7       	brge	.-52     	; 0xf18 <app_run+0x8>
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	a1 1d       	adc	r26, r1
     f50:	b1 1d       	adc	r27, r1
     f52:	80 93 0a 03 	sts	0x030A, r24
     f56:	90 93 0b 03 	sts	0x030B, r25
     f5a:	a0 93 0c 03 	sts	0x030C, r26
     f5e:	b0 93 0d 03 	sts	0x030D, r27
     f62:	da cf       	rjmp	.-76     	; 0xf18 <app_run+0x8>
     f64:	08 95       	ret

00000f66 <update_highscore>:
	sprintf(str, "%d", t);
	return str;
}

void update_highscore()
{
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
	//If score is 0 you dont get on highscore
	if (CURRENT_SCORE == 0) return;
     f6e:	60 91 0a 03 	lds	r22, 0x030A
     f72:	70 91 0b 03 	lds	r23, 0x030B
     f76:	80 91 0c 03 	lds	r24, 0x030C
     f7a:	90 91 0d 03 	lds	r25, 0x030D
     f7e:	61 15       	cp	r22, r1
     f80:	71 05       	cpc	r23, r1
     f82:	81 05       	cpc	r24, r1
     f84:	91 05       	cpc	r25, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <update_highscore+0x24>
     f88:	7f c0       	rjmp	.+254    	; 0x1088 <update_highscore+0x122>
	
	//Finds your spot on the list
	int i = 0;
	while (CURRENT_SCORE/SCORE_DIVIDER < HIGHSCORE_LIST[i] && i < 6)	i++;
     f8a:	22 e3       	ldi	r18, 0x32	; 50
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__divmodsi4>
     f96:	82 2f       	mov	r24, r18
     f98:	93 2f       	mov	r25, r19
     f9a:	a4 2f       	mov	r26, r20
     f9c:	b5 2f       	mov	r27, r21
     f9e:	40 91 36 01 	lds	r20, 0x0136
     fa2:	50 91 37 01 	lds	r21, 0x0137
     fa6:	66 27       	eor	r22, r22
     fa8:	57 fd       	sbrc	r21, 7
     faa:	60 95       	com	r22
     fac:	76 2f       	mov	r23, r22
     fae:	84 17       	cp	r24, r20
     fb0:	95 07       	cpc	r25, r21
     fb2:	a6 07       	cpc	r26, r22
     fb4:	b7 07       	cpc	r27, r23
     fb6:	0c f0       	brlt	.+2      	; 0xfba <update_highscore+0x54>
     fb8:	40 c0       	rjmp	.+128    	; 0x103a <update_highscore+0xd4>
     fba:	e8 e3       	ldi	r30, 0x38	; 56
     fbc:	f1 e0       	ldi	r31, 0x01	; 1
     fbe:	c0 e0       	ldi	r28, 0x00	; 0
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
     fc2:	21 96       	adiw	r28, 0x01	; 1
     fc4:	41 91       	ld	r20, Z+
     fc6:	51 91       	ld	r21, Z+
     fc8:	66 27       	eor	r22, r22
     fca:	57 fd       	sbrc	r21, 7
     fcc:	60 95       	com	r22
     fce:	76 2f       	mov	r23, r22
     fd0:	84 17       	cp	r24, r20
     fd2:	95 07       	cpc	r25, r21
     fd4:	a6 07       	cpc	r26, r22
     fd6:	b7 07       	cpc	r27, r23
     fd8:	24 f4       	brge	.+8      	; 0xfe2 <update_highscore+0x7c>
     fda:	c6 30       	cpi	r28, 0x06	; 6
     fdc:	d1 05       	cpc	r29, r1
     fde:	89 f7       	brne	.-30     	; 0xfc2 <update_highscore+0x5c>
     fe0:	53 c0       	rjmp	.+166    	; 0x1088 <update_highscore+0x122>

	//Check if you are off the list
	if (i > 5) return;
     fe2:	c6 30       	cpi	r28, 0x06	; 6
     fe4:	d1 05       	cpc	r29, r1
     fe6:	2c f1       	brlt	.+74     	; 0x1032 <update_highscore+0xcc>
     fe8:	4f c0       	rjmp	.+158    	; 0x1088 <update_highscore+0x122>
	
	//Put score on highscore list and move all other down
	for (int q = 5; q > i; q--)
	{
		HIGHSCORE_LIST[q] = HIGHSCORE_LIST[q-1];
     fea:	d8 01       	movw	r26, r16
     fec:	9e 91       	ld	r25, -X
     fee:	8e 91       	ld	r24, -X
     ff0:	8d 01       	movw	r16, r26
     ff2:	13 96       	adiw	r26, 0x03	; 3
     ff4:	9c 93       	st	X, r25
     ff6:	8e 93       	st	-X, r24
     ff8:	12 97       	sbiw	r26, 0x02	; 2
     ffa:	cf 01       	movw	r24, r30
     ffc:	07 97       	sbiw	r24, 0x07	; 7
		for (int t = 0; t < 4; t++) HIGHSCORE_LIST_NAMES[q][t] = HIGHSCORE_LIST_NAMES[q-1][t];
     ffe:	dc 01       	movw	r26, r24
    1000:	6c 91       	ld	r22, X
    1002:	04 96       	adiw	r24, 0x04	; 4
    1004:	dc 01       	movw	r26, r24
    1006:	6c 93       	st	X, r22
    1008:	03 97       	sbiw	r24, 0x03	; 3
    100a:	dc 01       	movw	r26, r24
    100c:	6c 91       	ld	r22, X
    100e:	04 96       	adiw	r24, 0x04	; 4
    1010:	dc 01       	movw	r26, r24
    1012:	6c 93       	st	X, r22
    1014:	03 97       	sbiw	r24, 0x03	; 3
    1016:	dc 01       	movw	r26, r24
    1018:	6c 91       	ld	r22, X
    101a:	04 96       	adiw	r24, 0x04	; 4
    101c:	dc 01       	movw	r26, r24
    101e:	6c 93       	st	X, r22
    1020:	03 97       	sbiw	r24, 0x03	; 3
    1022:	dc 01       	movw	r26, r24
    1024:	6c 91       	ld	r22, X
    1026:	60 83       	st	Z, r22
    1028:	fc 01       	movw	r30, r24

	//Check if you are off the list
	if (i > 5) return;
	
	//Put score on highscore list and move all other down
	for (int q = 5; q > i; q--)
    102a:	04 17       	cp	r16, r20
    102c:	15 07       	cpc	r17, r21
    102e:	e9 f6       	brne	.-70     	; 0xfea <update_highscore+0x84>
    1030:	10 c0       	rjmp	.+32     	; 0x1052 <update_highscore+0xec>
    1032:	c5 30       	cpi	r28, 0x05	; 5
    1034:	d1 05       	cpc	r29, r1
    1036:	1c f0       	brlt	.+6      	; 0x103e <update_highscore+0xd8>
    1038:	0c c0       	rjmp	.+24     	; 0x1052 <update_highscore+0xec>
	//If score is 0 you dont get on highscore
	if (CURRENT_SCORE == 0) return;
	
	//Finds your spot on the list
	int i = 0;
	while (CURRENT_SCORE/SCORE_DIVIDER < HIGHSCORE_LIST[i] && i < 6)	i++;
    103a:	c0 e0       	ldi	r28, 0x00	; 0
    103c:	d0 e0       	ldi	r29, 0x00	; 0
    103e:	00 e4       	ldi	r16, 0x40	; 64
    1040:	11 e0       	ldi	r17, 0x01	; 1
    1042:	e5 e2       	ldi	r30, 0x25	; 37
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	ae 01       	movw	r20, r28
    1048:	44 0f       	add	r20, r20
    104a:	55 1f       	adc	r21, r21
    104c:	4a 5c       	subi	r20, 0xCA	; 202
    104e:	5e 4f       	sbci	r21, 0xFE	; 254
    1050:	cc cf       	rjmp	.-104    	; 0xfea <update_highscore+0x84>
	for (int q = 5; q > i; q--)
	{
		HIGHSCORE_LIST[q] = HIGHSCORE_LIST[q-1];
		for (int t = 0; t < 4; t++) HIGHSCORE_LIST_NAMES[q][t] = HIGHSCORE_LIST_NAMES[q-1][t];
	}
	HIGHSCORE_LIST[i] = CURRENT_SCORE/SCORE_DIVIDER;
    1052:	fe 01       	movw	r30, r28
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ea 5c       	subi	r30, 0xCA	; 202
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
    105c:	82 2f       	mov	r24, r18
    105e:	93 2f       	mov	r25, r19
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
	for (int t = 0; t < 4; t++) HIGHSCORE_LIST_NAMES[i][t] = PLAYER_NAME[t];
    1064:	cc 0f       	add	r28, r28
    1066:	dd 1f       	adc	r29, r29
    1068:	cc 0f       	add	r28, r28
    106a:	dd 1f       	adc	r29, r29
    106c:	c2 5f       	subi	r28, 0xF2	; 242
    106e:	de 4f       	sbci	r29, 0xFE	; 254
    1070:	80 91 4c 01 	lds	r24, 0x014C
    1074:	88 83       	st	Y, r24
    1076:	80 91 4d 01 	lds	r24, 0x014D
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	80 91 4e 01 	lds	r24, 0x014E
    1080:	8a 83       	std	Y+2, r24	; 0x02
    1082:	80 91 4f 01 	lds	r24, 0x014F
    1086:	8b 83       	std	Y+3, r24	; 0x03
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <app_reset_node2>:

void app_reset_node2()
{
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	2b 97       	sbiw	r28, 0x0b	; 11
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
	struct can_frame message = CAN_frame_init(ID_RESTART,1);
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	65 e0       	ldi	r22, 0x05	; 5
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	0e 94 8c 04 	call	0x918	; 0x918 <CAN_frame_init>
	CAN_send_frame(&message);
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_send_frame>
}
    10bc:	2b 96       	adiw	r28, 0x0b	; 11
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <app_init>:
int EXIT_APPLICATION = 0;



void app_init()
{
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
	//Initialize drivers
	UART_init(9600);
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	95 e2       	ldi	r25, 0x25	; 37
    10d6:	0e 94 a2 05 	call	0xb44	; 0xb44 <UART_init>
	oled_init();
    10da:	0e 94 c6 11 	call	0x238c	; 0x238c <oled_init>
	adc_init();
    10de:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <adc_init>
	music_init();
    10e2:	0e 94 24 10 	call	0x2048	; 0x2048 <music_init>
	CAN_init(CAN_MODE_NORMAL);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <CAN_init>
	
	//Current score
	CURRENT_SCORE = 0;
    10ec:	10 92 0a 03 	sts	0x030A, r1
    10f0:	10 92 0b 03 	sts	0x030B, r1
    10f4:	10 92 0c 03 	sts	0x030C, r1
    10f8:	10 92 0d 03 	sts	0x030D, r1
	
	//Shows logo
	music_start_up_sound();
    10fc:	0e 94 38 10 	call	0x2070	; 0x2070 <music_start_up_sound>
	app_logo();
    1100:	0e 94 c3 05 	call	0xb86	; 0xb86 <app_logo>
	
	//Resets node 2
	app_reset_node2();
    1104:	0e 94 49 08 	call	0x1092	; 0x1092 <app_reset_node2>
	
	//Creating menus
	menu_constr(&setup_menu, "Settings");
    1108:	6f eb       	ldi	r22, 0xBF	; 191
    110a:	71 e0       	ldi	r23, 0x01	; 1
    110c:	84 e2       	ldi	r24, 0x24	; 36
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 3b 14 	call	0x2876	; 0x2876 <menu_constr>
	setup_menu.parent_menu = &main_menu;
    1114:	8a e1       	ldi	r24, 0x1A	; 26
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	90 93 2d 03 	sts	0x032D, r25
    111c:	80 93 2c 03 	sts	0x032C, r24
	opt_constr(&enter_name,"Enter Name", opt_select_name);
    1120:	4b e3       	ldi	r20, 0x3B	; 59
    1122:	5a e0       	ldi	r21, 0x0A	; 10
    1124:	68 ec       	ldi	r22, 0xC8	; 200
    1126:	71 e0       	ldi	r23, 0x01	; 1
    1128:	82 ed       	ldi	r24, 0xD2	; 210
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	setup_menu.root_option = &enter_name;
    1130:	82 ed       	ldi	r24, 0xD2	; 210
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	90 93 27 03 	sts	0x0327, r25
    1138:	80 93 26 03 	sts	0x0326, r24
	enter_name.parent = &setup_menu;
    113c:	c4 e2       	ldi	r28, 0x24	; 36
    113e:	d3 e0       	ldi	r29, 0x03	; 3
    1140:	d0 93 d9 02 	sts	0x02D9, r29
    1144:	c0 93 d8 02 	sts	0x02D8, r28
	opt_constr(&enter_music,"Music Selection", opt_select_music);
    1148:	47 ee       	ldi	r20, 0xE7	; 231
    114a:	5b e0       	ldi	r21, 0x0B	; 11
    114c:	63 ed       	ldi	r22, 0xD3	; 211
    114e:	71 e0       	ldi	r23, 0x01	; 1
    1150:	84 eb       	ldi	r24, 0xB4	; 180
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	enter_name.next = &enter_music;
    1158:	84 eb       	ldi	r24, 0xB4	; 180
    115a:	92 e0       	ldi	r25, 0x02	; 2
    115c:	90 93 d7 02 	sts	0x02D7, r25
    1160:	80 93 d6 02 	sts	0x02D6, r24
	opt_constr(&enter_tuning_option,"Tuning", opt_select_tuning);
    1164:	48 e0       	ldi	r20, 0x08	; 8
    1166:	5b e0       	ldi	r21, 0x0B	; 11
    1168:	63 ee       	ldi	r22, 0xE3	; 227
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	8e e0       	ldi	r24, 0x0E	; 14
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	enter_music.next = &enter_tuning_option;
    1174:	8e e0       	ldi	r24, 0x0E	; 14
    1176:	93 e0       	ldi	r25, 0x03	; 3
    1178:	90 93 b9 02 	sts	0x02B9, r25
    117c:	80 93 b8 02 	sts	0x02B8, r24
	opt_constr(&highscore, "Highscores", view_highscore);
    1180:	4c eb       	ldi	r20, 0xBC	; 188
    1182:	5c e0       	ldi	r21, 0x0C	; 12
    1184:	6a ee       	ldi	r22, 0xEA	; 234
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	80 e3       	ldi	r24, 0x30	; 48
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	enter_tuning_option.next = &highscore;
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	90 93 13 03 	sts	0x0313, r25
    1198:	80 93 12 03 	sts	0x0312, r24
	menu_constr(&main_menu, "Main Menu");
    119c:	65 ef       	ldi	r22, 0xF5	; 245
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	8a e1       	ldi	r24, 0x1A	; 26
    11a2:	93 e0       	ldi	r25, 0x03	; 3
    11a4:	0e 94 3b 14 	call	0x2876	; 0x2876 <menu_constr>
	opt_constr(&start_game, "Start Game", opt_run_game); 
    11a8:	44 e7       	ldi	r20, 0x74	; 116
    11aa:	5d e0       	ldi	r21, 0x0D	; 13
    11ac:	6f ef       	ldi	r22, 0xFF	; 255
    11ae:	71 e0       	ldi	r23, 0x01	; 1
    11b0:	86 ee       	ldi	r24, 0xE6	; 230
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	main_menu.root_option = &start_game;
    11b8:	86 ee       	ldi	r24, 0xE6	; 230
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	90 93 1d 03 	sts	0x031D, r25
    11c0:	80 93 1c 03 	sts	0x031C, r24
	opt_constr(&go_to_settings, "Settings", NULL);
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	6f eb       	ldi	r22, 0xBF	; 191
    11ca:	71 e0       	ldi	r23, 0x01	; 1
    11cc:	8e eb       	ldi	r24, 0xBE	; 190
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	main_menu.root_option->next = &go_to_settings;
    11d4:	e0 91 1c 03 	lds	r30, 0x031C
    11d8:	f0 91 1d 03 	lds	r31, 0x031D
    11dc:	8e eb       	ldi	r24, 0xBE	; 190
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	95 83       	std	Z+5, r25	; 0x05
    11e2:	84 83       	std	Z+4, r24	; 0x04
	go_to_settings.submenu = &setup_menu;
    11e4:	d0 93 c7 02 	sts	0x02C7, r29
    11e8:	c0 93 c6 02 	sts	0x02C6, r28
	opt_constr(&exit_application, "Exit game", opt_exit_application);
    11ec:	47 e8       	ldi	r20, 0x87	; 135
    11ee:	5d e0       	ldi	r21, 0x0D	; 13
    11f0:	6a e0       	ldi	r22, 0x0A	; 10
    11f2:	72 e0       	ldi	r23, 0x02	; 2
    11f4:	8c ed       	ldi	r24, 0xDC	; 220
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	go_to_settings.next = &exit_application; 
    11fc:	8c ed       	ldi	r24, 0xDC	; 220
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	90 93 c3 02 	sts	0x02C3, r25
    1204:	80 93 c2 02 	sts	0x02C2, r24
	menu_constr(&restart_menu, "ROUND OVER");
    1208:	64 e1       	ldi	r22, 0x14	; 20
    120a:	72 e0       	ldi	r23, 0x02	; 2
    120c:	8a e3       	ldi	r24, 0x3A	; 58
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	0e 94 3b 14 	call	0x2876	; 0x2876 <menu_constr>
	opt_constr(&restart_game,"Continue",opt_continue_game);
    1214:	42 e8       	ldi	r20, 0x82	; 130
    1216:	5d e0       	ldi	r21, 0x0D	; 13
    1218:	6f e1       	ldi	r22, 0x1F	; 31
    121a:	72 e0       	ldi	r23, 0x02	; 2
    121c:	88 ec       	ldi	r24, 0xC8	; 200
    121e:	92 e0       	ldi	r25, 0x02	; 2
    1220:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	opt_constr(&end_game, "End game",opt_end_game);
    1224:	4b e7       	ldi	r20, 0x7B	; 123
    1226:	5d e0       	ldi	r21, 0x0D	; 13
    1228:	68 e2       	ldi	r22, 0x28	; 40
    122a:	72 e0       	ldi	r23, 0x02	; 2
    122c:	80 ef       	ldi	r24, 0xF0	; 240
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	0e 94 31 14 	call	0x2862	; 0x2862 <opt_constr>
	restart_menu.root_option = &restart_game;
    1234:	88 ec       	ldi	r24, 0xC8	; 200
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	90 93 3d 03 	sts	0x033D, r25
    123c:	80 93 3c 03 	sts	0x033C, r24
	restart_game.next = &end_game;
    1240:	80 ef       	ldi	r24, 0xF0	; 240
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	90 93 cd 02 	sts	0x02CD, r25
    1248:	80 93 cc 02 	sts	0x02CC, r24
	
	//Enable interrupts
	sei();
    124c:	78 94       	sei
	
	//Calibrate joystick
	adc_joy_calibrate();
    124e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <adc_joy_calibrate>
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <app_round_review>:
	oled_clear_SRAM();
	oled_update_from_SRAM();
}

int app_round_review()
{
    1258:	cf 92       	push	r12
    125a:	df 92       	push	r13
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
	//Plays end game soundeffect
	music_ending_sound();
    1260:	0e 94 48 10 	call	0x2090	; 0x2090 <music_ending_sound>
	
	//Clears and prints menu
	oled_clear_SRAM();
    1264:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	menu_print(&restart_menu);
    1268:	8a e3       	ldi	r24, 0x3A	; 58
    126a:	93 e0       	ldi	r25, 0x03	; 3
    126c:	0e 94 47 14 	call	0x288e	; 0x288e <menu_print>
	oled_update_from_SRAM();
    1270:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	NEXT_MENU = 3;
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	90 93 19 03 	sts	0x0319, r25
    127c:	80 93 18 03 	sts	0x0318, r24
		adc_update_current_input();
		menu_control(&restart_menu);
		oled_write_line(1,64,127,64);
		oled_go_to(5,6);
		oled_cstring_write("YOUR SCORE: ",2);
		oled_cstring_write(int_to_cstring(CURRENT_SCORE/SCORE_DIVIDER),1);
    1280:	0f 2e       	mov	r0, r31
    1282:	f2 e3       	ldi	r31, 0x32	; 50
    1284:	cf 2e       	mov	r12, r31
    1286:	d1 2c       	mov	r13, r1
    1288:	e1 2c       	mov	r14, r1
    128a:	f1 2c       	mov	r15, r1
    128c:	f0 2d       	mov	r31, r0
	NEXT_MENU = 3;
	
	//Print score and await player choice
	while (NEXT_MENU == 3)
	{
		adc_update_current_input();
    128e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <adc_update_current_input>
		menu_control(&restart_menu);
    1292:	8a e3       	ldi	r24, 0x3A	; 58
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	0e 94 a1 14 	call	0x2942	; 0x2942 <menu_control>
		oled_write_line(1,64,127,64);
    129a:	20 e4       	ldi	r18, 0x40	; 64
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	4f e7       	ldi	r20, 0x7F	; 127
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	60 e4       	ldi	r22, 0x40	; 64
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <oled_write_line>
		oled_go_to(5,6);
    12ae:	66 e0       	ldi	r22, 0x06	; 6
    12b0:	85 e0       	ldi	r24, 0x05	; 5
    12b2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
		oled_cstring_write("YOUR SCORE: ",2);
    12b6:	62 e0       	ldi	r22, 0x02	; 2
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	81 e3       	ldi	r24, 0x31	; 49
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
		oled_cstring_write(int_to_cstring(CURRENT_SCORE/SCORE_DIVIDER),1);
    12c2:	60 91 0a 03 	lds	r22, 0x030A
    12c6:	70 91 0b 03 	lds	r23, 0x030B
    12ca:	80 91 0c 03 	lds	r24, 0x030C
    12ce:	90 91 0d 03 	lds	r25, 0x030D
    12d2:	a7 01       	movw	r20, r14
    12d4:	96 01       	movw	r18, r12
    12d6:	0e 94 6d 17 	call	0x2eda	; 0x2eda <__divmodsi4>
    12da:	c9 01       	movw	r24, r18
    12dc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <int_to_cstring>
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
		oled_update_from_SRAM();
    12e8:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	menu_print(&restart_menu);
	oled_update_from_SRAM();
	NEXT_MENU = 3;
	
	//Print score and await player choice
	while (NEXT_MENU == 3)
    12ec:	80 91 18 03 	lds	r24, 0x0318
    12f0:	90 91 19 03 	lds	r25, 0x0319
    12f4:	03 97       	sbiw	r24, 0x03	; 3
    12f6:	59 f2       	breq	.-106    	; 0x128e <app_round_review+0x36>
		oled_update_from_SRAM();
		
	}
	
	//Update highscore
	update_highscore();
    12f8:	0e 94 b3 07 	call	0xf66	; 0xf66 <update_highscore>
	CURRENT_SCORE = 0;
    12fc:	10 92 0a 03 	sts	0x030A, r1
    1300:	10 92 0b 03 	sts	0x030B, r1
    1304:	10 92 0c 03 	sts	0x030C, r1
    1308:	10 92 0d 03 	sts	0x030D, r1
	
	//Executes player choice
	if (NEXT_MENU) return 1;
    130c:	80 91 18 03 	lds	r24, 0x0318
    1310:	90 91 19 03 	lds	r25, 0x0319
    1314:	89 2b       	or	r24, r25
    1316:	69 f4       	brne	.+26     	; 0x1332 <app_round_review+0xda>
	else
	{
		oled_clear_SRAM();
    1318:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
		oled_update_from_SRAM();
    131c:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
		app_reset_node2();
    1320:	0e 94 49 08 	call	0x1092	; 0x1092 <app_reset_node2>
		menu_print(&main_menu);
    1324:	8a e1       	ldi	r24, 0x1A	; 26
    1326:	93 e0       	ldi	r25, 0x03	; 3
    1328:	0e 94 47 14 	call	0x288e	; 0x288e <menu_print>
		return 0;
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <app_round_review+0xde>
	//Update highscore
	update_highscore();
	CURRENT_SCORE = 0;
	
	//Executes player choice
	if (NEXT_MENU) return 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
		oled_update_from_SRAM();
		app_reset_node2();
		menu_print(&main_menu);
		return 0;
	}
}
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	08 95       	ret

00001340 <app_get_ready_screen>:

void app_get_ready_screen()
{
	
	//Counts down on screen
	oled_clear_SRAM();
    1340:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_go_to(30,4);
    1344:	64 e0       	ldi	r22, 0x04	; 4
    1346:	8e e1       	ldi	r24, 0x1E	; 30
    1348:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
	oled_cstring_write("3 ..",0);
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	8e e3       	ldi	r24, 0x3E	; 62
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_update_from_SRAM();
    1358:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
    135c:	2f ef       	ldi	r18, 0xFF	; 255
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9e e0       	ldi	r25, 0x0E	; 14
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	80 40       	sbci	r24, 0x00	; 0
    1366:	90 40       	sbci	r25, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <app_get_ready_screen+0x22>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <app_get_ready_screen+0x2c>
    136c:	00 00       	nop
	_delay_ms(1000);
	oled_cstring_write("2 ..",1);
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	83 e4       	ldi	r24, 0x43	; 67
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_update_from_SRAM();
    137a:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
    137e:	2f ef       	ldi	r18, 0xFF	; 255
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	9e e0       	ldi	r25, 0x0E	; 14
    1384:	21 50       	subi	r18, 0x01	; 1
    1386:	80 40       	sbci	r24, 0x00	; 0
    1388:	90 40       	sbci	r25, 0x00	; 0
    138a:	e1 f7       	brne	.-8      	; 0x1384 <app_get_ready_screen+0x44>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <app_get_ready_screen+0x4e>
    138e:	00 00       	nop
	_delay_ms(1000);
	oled_cstring_write("1 ..",1);
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	88 e4       	ldi	r24, 0x48	; 72
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_update_from_SRAM();
    139c:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
    13a0:	2f ef       	ldi	r18, 0xFF	; 255
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	9e e0       	ldi	r25, 0x0E	; 14
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	80 40       	sbci	r24, 0x00	; 0
    13aa:	90 40       	sbci	r25, 0x00	; 0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <app_get_ready_screen+0x66>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <app_get_ready_screen+0x70>
    13b0:	00 00       	nop
	_delay_ms(1000);
	oled_cstring_write("GO!",2);
    13b2:	62 e0       	ldi	r22, 0x02	; 2
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	8d e4       	ldi	r24, 0x4D	; 77
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	oled_update_from_SRAM();
    13be:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
    13c2:	2f ef       	ldi	r18, 0xFF	; 255
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	9e e0       	ldi	r25, 0x0E	; 14
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	80 40       	sbci	r24, 0x00	; 0
    13cc:	90 40       	sbci	r25, 0x00	; 0
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <app_get_ready_screen+0x88>
    13d0:	00 c0       	rjmp	.+0      	; 0x13d2 <app_get_ready_screen+0x92>
    13d2:	00 00       	nop
    13d4:	08 95       	ret

000013d6 <app_main_menu>:
}

int app_main_menu()
{
	//Clears screen and prints menu
	NEXT_MENU = 0; 
    13d6:	10 92 19 03 	sts	0x0319, r1
    13da:	10 92 18 03 	sts	0x0318, r1
	oled_clear_SRAM();
    13de:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_update_from_SRAM();
    13e2:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	menu_print(&main_menu);
    13e6:	8a e1       	ldi	r24, 0x1A	; 26
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	0e 94 47 14 	call	0x288e	; 0x288e <menu_print>
	
	//Reads player input in menu
	while (!NEXT_MENU)
    13ee:	80 91 18 03 	lds	r24, 0x0318
    13f2:	90 91 19 03 	lds	r25, 0x0319
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	71 f4       	brne	.+28     	; 0x1416 <app_main_menu+0x40>
	{
		adc_update_current_input();
    13fa:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <adc_update_current_input>
		menu_control(&main_menu);
    13fe:	8a e1       	ldi	r24, 0x1A	; 26
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 a1 14 	call	0x2942	; 0x2942 <menu_control>
		oled_update_from_SRAM();
    1406:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	oled_clear_SRAM();
	oled_update_from_SRAM();
	menu_print(&main_menu);
	
	//Reads player input in menu
	while (!NEXT_MENU)
    140a:	80 91 18 03 	lds	r24, 0x0318
    140e:	90 91 19 03 	lds	r25, 0x0319
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	91 f3       	breq	.-28     	; 0x13fa <app_main_menu+0x24>
		menu_control(&main_menu);
		oled_update_from_SRAM();
	}
	
	//Checks if player quit the game or started a round
	if (NEXT_MENU == 2) 
    1416:	02 97       	sbiw	r24, 0x02	; 2
    1418:	49 f0       	breq	.+18     	; 0x142c <app_main_menu+0x56>
		return 1;
	}
	else
	{
		
		app_get_ready_screen();
    141a:	0e 94 a0 09 	call	0x1340	; 0x1340 <app_get_ready_screen>
		
		NEXT_MENU = 0;
    141e:	10 92 19 03 	sts	0x0319, r1
    1422:	10 92 18 03 	sts	0x0318, r1
		return 0;
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	08 95       	ret
	}
	
	//Checks if player quit the game or started a round
	if (NEXT_MENU == 2) 
	{
		return 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
		app_get_ready_screen();
		
		NEXT_MENU = 0;
		return 0;
	}
}
    1430:	08 95       	ret

00001432 <app_update_reference_div>:
	oled_update_from_SRAM();
	_delay_ms(1000);
}

void app_update_reference_div(int new_value)
{
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	2b 97       	sbiw	r28, 0x0b	; 11
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	18 2f       	mov	r17, r24
	struct can_frame message = CAN_frame_init(ID_RESTART,1);
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	65 e0       	ldi	r22, 0x05	; 5
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	0e 94 8c 04 	call	0x918	; 0x918 <CAN_frame_init>
	message.data[0] = new_value;
    1458:	1c 83       	std	Y+4, r17	; 0x04
	CAN_send_frame(&message);
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_send_frame>
}
    1462:	2b 96       	adiw	r28, 0x0b	; 11
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	08 95       	ret

00001476 <opt_select_name>:
#include <util\delay.h>



void opt_select_name()
{
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
	//Sets up screen for functions
	oled_clear_SRAM();
    148e:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_home();
    1492:	0e 94 de 10 	call	0x21bc	; 0x21bc <oled_home>
	oled_cstring_write("Enter name: ",2);
    1496:	62 e0       	ldi	r22, 0x02	; 2
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	81 e5       	ldi	r24, 0x51	; 81
    149c:	92 e0       	ldi	r25, 0x02	; 2
    149e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
	int i = 0;
    14a2:	c0 e0       	ldi	r28, 0x00	; 0
    14a4:	d0 e0       	ldi	r29, 0x00	; 0
		//Read ADC
		adc_update_current_input();
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
    14a6:	0f 2e       	mov	r0, r31
    14a8:	f1 e4       	ldi	r31, 0x41	; 65
    14aa:	8f 2e       	mov	r8, r31
    14ac:	f0 2d       	mov	r31, r0
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
    14ae:	0f 2e       	mov	r0, r31
    14b0:	fa e5       	ldi	r31, 0x5A	; 90
    14b2:	9f 2e       	mov	r9, r31
    14b4:	f0 2d       	mov	r31, r0
    14b6:	c1 2c       	mov	r12, r1
    14b8:	d1 2c       	mov	r13, r1
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
    14ba:	aa 24       	eor	r10, r10
    14bc:	a3 94       	inc	r10
    14be:	b1 2c       	mov	r11, r1
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
    14c0:	68 94       	set
    14c2:	ee 24       	eor	r14, r14
    14c4:	e1 f8       	bld	r14, 1
    14c6:	f1 2c       	mov	r15, r1
	int ToSettings = 0; 
	
	while(ToSettings == 0)
	{
		//Read ADC
		adc_update_current_input();
    14c8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <adc_update_current_input>
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
    14cc:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <joystick_down>
    14d0:	89 2b       	or	r24, r25
    14d2:	61 f0       	breq	.+24     	; 0x14ec <opt_select_name+0x76>
    14d4:	fe 01       	movw	r30, r28
    14d6:	e4 5b       	subi	r30, 0xB4	; 180
    14d8:	fe 4f       	sbci	r31, 0xFE	; 254
    14da:	80 81       	ld	r24, Z
    14dc:	8a 35       	cpi	r24, 0x5A	; 90
    14de:	30 f4       	brcc	.+12     	; 0x14ec <opt_select_name+0x76>
    14e0:	fe 01       	movw	r30, r28
    14e2:	e4 5b       	subi	r30, 0xB4	; 180
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	80 83       	st	Z, r24
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <opt_select_name+0x86>
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
    14ec:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <joystick_down>
    14f0:	89 2b       	or	r24, r25
    14f2:	21 f0       	breq	.+8      	; 0x14fc <opt_select_name+0x86>
    14f4:	fe 01       	movw	r30, r28
    14f6:	e4 5b       	subi	r30, 0xB4	; 180
    14f8:	fe 4f       	sbci	r31, 0xFE	; 254
    14fa:	80 82       	st	Z, r8
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
    14fc:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <joystick_up>
    1500:	89 2b       	or	r24, r25
    1502:	61 f0       	breq	.+24     	; 0x151c <opt_select_name+0xa6>
    1504:	fe 01       	movw	r30, r28
    1506:	e4 5b       	subi	r30, 0xB4	; 180
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	80 81       	ld	r24, Z
    150c:	82 34       	cpi	r24, 0x42	; 66
    150e:	30 f0       	brcs	.+12     	; 0x151c <opt_select_name+0xa6>
    1510:	fe 01       	movw	r30, r28
    1512:	e4 5b       	subi	r30, 0xB4	; 180
    1514:	fe 4f       	sbci	r31, 0xFE	; 254
    1516:	81 50       	subi	r24, 0x01	; 1
    1518:	80 83       	st	Z, r24
    151a:	08 c0       	rjmp	.+16     	; 0x152c <opt_select_name+0xb6>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
    151c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <joystick_up>
    1520:	89 2b       	or	r24, r25
    1522:	21 f0       	breq	.+8      	; 0x152c <opt_select_name+0xb6>
    1524:	fe 01       	movw	r30, r28
    1526:	e4 5b       	subi	r30, 0xB4	; 180
    1528:	fe 4f       	sbci	r31, 0xFE	; 254
    152a:	90 82       	st	Z, r9
		if (joystick_right() && i < 3) i++;
    152c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    1530:	89 2b       	or	r24, r25
    1532:	21 f0       	breq	.+8      	; 0x153c <opt_select_name+0xc6>
    1534:	c3 30       	cpi	r28, 0x03	; 3
    1536:	d1 05       	cpc	r29, r1
    1538:	0c f4       	brge	.+2      	; 0x153c <opt_select_name+0xc6>
    153a:	21 96       	adiw	r28, 0x01	; 1
		if (joystick_left() && i >= 0) i--;
    153c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <joystick_left>
    1540:	89 2b       	or	r24, r25
    1542:	19 f0       	breq	.+6      	; 0x154a <opt_select_name+0xd4>
    1544:	dd 23       	and	r29, r29
    1546:	0c f0       	brlt	.+2      	; 0x154a <opt_select_name+0xd4>
    1548:	21 97       	sbiw	r28, 0x01	; 1
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
    154a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <joystick_left>
    154e:	89 2b       	or	r24, r25
    1550:	21 f0       	breq	.+8      	; 0x155a <opt_select_name+0xe4>
    1552:	cf 3f       	cpi	r28, 0xFF	; 255
    1554:	2f ef       	ldi	r18, 0xFF	; 255
    1556:	d2 07       	cpc	r29, r18
    1558:	61 f0       	breq	.+24     	; 0x1572 <opt_select_name+0xfc>
    155a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    155e:	89 2b       	or	r24, r25
    1560:	69 f0       	breq	.+26     	; 0x157c <opt_select_name+0x106>
    1562:	c3 30       	cpi	r28, 0x03	; 3
    1564:	d1 05       	cpc	r29, r1
    1566:	69 f4       	brne	.+26     	; 0x1582 <opt_select_name+0x10c>
		{
			ToSettings = 1;
    1568:	0a 2d       	mov	r16, r10
    156a:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
    156c:	ce 2d       	mov	r28, r14
    156e:	df 2d       	mov	r29, r15
    1570:	0a c0       	rjmp	.+20     	; 0x1586 <opt_select_name+0x110>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
    1572:	0a 2d       	mov	r16, r10
    1574:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
    1576:	cc 2d       	mov	r28, r12
    1578:	dd 2d       	mov	r29, r13
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <opt_select_name+0x110>
    157c:	0c 2d       	mov	r16, r12
    157e:	1d 2d       	mov	r17, r13
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <opt_select_name+0x110>
    1582:	0c 2d       	mov	r16, r12
    1584:	1d 2d       	mov	r17, r13
			if(i == 3) i = 2; 
		}
		
		//Print current Letter
		oled_go_to(60,3);
    1586:	63 e0       	ldi	r22, 0x03	; 3
    1588:	8c e3       	ldi	r24, 0x3C	; 60
    158a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
		oled_cstring_write(PLAYER_NAME,2);
    158e:	6e 2d       	mov	r22, r14
    1590:	7f 2d       	mov	r23, r15
    1592:	8c e4       	ldi	r24, 0x4C	; 76
    1594:	91 e0       	ldi	r25, 0x01	; 1
    1596:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
		
		oled_update_from_SRAM();
    159a:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
		
		
		
		if(!joystick_down() && !joystick_left() && !joystick_right() && !joystick_up())
    159e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <joystick_down>
    15a2:	89 2b       	or	r24, r25
    15a4:	29 f5       	brne	.+74     	; 0x15f0 <opt_select_name+0x17a>
    15a6:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <joystick_left>
    15aa:	89 2b       	or	r24, r25
    15ac:	09 f5       	brne	.+66     	; 0x15f0 <opt_select_name+0x17a>
    15ae:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    15b2:	89 2b       	or	r24, r25
    15b4:	e9 f4       	brne	.+58     	; 0x15f0 <opt_select_name+0x17a>
    15b6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <joystick_up>
    15ba:	89 2b       	or	r24, r25
    15bc:	c9 f4       	brne	.+50     	; 0x15f0 <opt_select_name+0x17a>
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	2f e7       	ldi	r18, 0x7F	; 127
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	91 50       	subi	r25, 0x01	; 1
    15c6:	20 40       	sbci	r18, 0x00	; 0
    15c8:	80 40       	sbci	r24, 0x00	; 0
    15ca:	e1 f7       	brne	.-8      	; 0x15c4 <opt_select_name+0x14e>
    15cc:	00 c0       	rjmp	.+0      	; 0x15ce <opt_select_name+0x158>
    15ce:	00 c0       	rjmp	.+0      	; 0x15d0 <opt_select_name+0x15a>
		{
			
			_delay_ms(100);
			oled_go_to(60+(8*i),3);
    15d0:	63 e0       	ldi	r22, 0x03	; 3
    15d2:	8c 2f       	mov	r24, r28
    15d4:	88 0f       	add	r24, r24
    15d6:	88 0f       	add	r24, r24
    15d8:	88 0f       	add	r24, r24
    15da:	84 5c       	subi	r24, 0xC4	; 196
    15dc:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
			oled_cstring_write("_",2);
    15e0:	6e 2d       	mov	r22, r14
    15e2:	7f 2d       	mov	r23, r15
    15e4:	8e e5       	ldi	r24, 0x5E	; 94
    15e6:	92 e0       	ldi	r25, 0x02	; 2
    15e8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_update_from_SRAM();
    15ec:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	oled_home();
	oled_cstring_write("Enter name: ",2);
	int i = 0;
	int ToSettings = 0; 
	
	while(ToSettings == 0)
    15f0:	01 2b       	or	r16, r17
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <opt_select_name+0x180>
    15f4:	69 cf       	rjmp	.-302    	; 0x14c8 <opt_select_name+0x52>
			oled_update_from_SRAM();
		}
		
	}
		
	}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	9f 90       	pop	r9
    160c:	8f 90       	pop	r8
    160e:	08 95       	ret

00001610 <opt_select_tuning>:
		
void opt_select_tuning()
{
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
		
		oled_clear_SRAM();
    1620:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
		oled_home(); 
    1624:	0e 94 de 10 	call	0x21bc	; 0x21bc <oled_home>
		oled_cstring_write("Tuning:", 2);
    1628:	62 e0       	ldi	r22, 0x02	; 2
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	80 e6       	ldi	r24, 0x60	; 96
    162e:	92 e0       	ldi	r25, 0x02	; 2
    1630:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
		
		int change = 1; 
    1634:	01 e0       	ldi	r16, 0x01	; 1
    1636:	10 e0       	ldi	r17, 0x00	; 0
			
			//Read ADC
			adc_update_current_input();
			
			//Reads input and decides min and max levels
			if(joystick_left()) completed = 1;
    1638:	ee 24       	eor	r14, r14
    163a:	e3 94       	inc	r14
    163c:	f1 2c       	mov	r15, r1
    163e:	c1 2c       	mov	r12, r1
    1640:	d1 2c       	mov	r13, r1

		while(completed == 0) 
		{
			
			//Read ADC
			adc_update_current_input();
    1642:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <adc_update_current_input>
			
			//Reads input and decides min and max levels
			if(joystick_left()) completed = 1;
    1646:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <joystick_left>
    164a:	3e 2d       	mov	r19, r14
    164c:	2f 2d       	mov	r18, r15
    164e:	89 2b       	or	r24, r25
    1650:	11 f4       	brne	.+4      	; 0x1656 <opt_select_tuning+0x46>
    1652:	3c 2d       	mov	r19, r12
    1654:	2d 2d       	mov	r18, r13
    1656:	c3 2f       	mov	r28, r19
    1658:	d2 2f       	mov	r29, r18
			if(joystick_right()) completed = 1;
    165a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    165e:	89 2b       	or	r24, r25
    1660:	11 f0       	breq	.+4      	; 0x1666 <opt_select_tuning+0x56>
    1662:	ce 2d       	mov	r28, r14
    1664:	df 2d       	mov	r29, r15
			if (joystick_up() && CURRENT_TUNING < MAX_DIFFICULTY)
    1666:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <joystick_up>
    166a:	89 2b       	or	r24, r25
    166c:	71 f0       	breq	.+28     	; 0x168a <opt_select_tuning+0x7a>
    166e:	80 91 b0 02 	lds	r24, 0x02B0
    1672:	90 91 b1 02 	lds	r25, 0x02B1
    1676:	82 30       	cpi	r24, 0x02	; 2
    1678:	91 05       	cpc	r25, r1
    167a:	3c f4       	brge	.+14     	; 0x168a <opt_select_tuning+0x7a>
			{
				 CURRENT_TUNING++;
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	90 93 b1 02 	sts	0x02B1, r25
    1682:	80 93 b0 02 	sts	0x02B0, r24
				 change = 1; 
    1686:	0e 2d       	mov	r16, r14
    1688:	1f 2d       	mov	r17, r15
			} 
			if (joystick_down() && CURRENT_TUNING > 0)
    168a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <joystick_down>
    168e:	89 2b       	or	r24, r25
    1690:	21 f1       	breq	.+72     	; 0x16da <opt_select_tuning+0xca>
    1692:	80 91 b0 02 	lds	r24, 0x02B0
    1696:	90 91 b1 02 	lds	r25, 0x02B1
    169a:	18 16       	cp	r1, r24
    169c:	19 06       	cpc	r1, r25
    169e:	ec f4       	brge	.+58     	; 0x16da <opt_select_tuning+0xca>
			{
				 CURRENT_TUNING--;
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	90 93 b1 02 	sts	0x02B1, r25
    16a6:	80 93 b0 02 	sts	0x02B0, r24
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
    16aa:	63 e0       	ldi	r22, 0x03	; 3
    16ac:	8c e3       	ldi	r24, 0x3C	; 60
    16ae:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
			oled_cstring_write(TUNING_NAME[CURRENT_TUNING],2);
    16b2:	80 91 b0 02 	lds	r24, 0x02B0
    16b6:	90 91 b1 02 	lds	r25, 0x02B1
    16ba:	9c 01       	movw	r18, r24
    16bc:	22 0f       	add	r18, r18
    16be:	33 1f       	adc	r19, r19
    16c0:	22 0f       	add	r18, r18
    16c2:	33 1f       	adc	r19, r19
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	62 e0       	ldi	r22, 0x02	; 2
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	80 5b       	subi	r24, 0xB0	; 176
    16ce:	9e 4f       	sbci	r25, 0xFE	; 254
    16d0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_update_from_SRAM();
    16d4:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
    16d8:	19 c0       	rjmp	.+50     	; 0x170c <opt_select_tuning+0xfc>
				 CURRENT_TUNING--;
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
    16da:	63 e0       	ldi	r22, 0x03	; 3
    16dc:	8c e3       	ldi	r24, 0x3C	; 60
    16de:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
			oled_cstring_write(TUNING_NAME[CURRENT_TUNING],2);
    16e2:	80 91 b0 02 	lds	r24, 0x02B0
    16e6:	90 91 b1 02 	lds	r25, 0x02B1
    16ea:	9c 01       	movw	r18, r24
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	82 0f       	add	r24, r18
    16f6:	93 1f       	adc	r25, r19
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	80 5b       	subi	r24, 0xB0	; 176
    16fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1700:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_update_from_SRAM();
    1704:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
			
			if (change!= 0)
    1708:	01 2b       	or	r16, r17
    170a:	49 f0       	breq	.+18     	; 0x171e <opt_select_tuning+0x10e>
    170c:	9f ef       	ldi	r25, 0xFF	; 255
    170e:	2f ef       	ldi	r18, 0xFF	; 255
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	91 50       	subi	r25, 0x01	; 1
    1714:	20 40       	sbci	r18, 0x00	; 0
    1716:	80 40       	sbci	r24, 0x00	; 0
    1718:	e1 f7       	brne	.-8      	; 0x1712 <opt_select_tuning+0x102>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <opt_select_tuning+0x10c>
    171c:	00 c0       	rjmp	.+0      	; 0x171e <opt_select_tuning+0x10e>
		oled_cstring_write("Tuning:", 2);
		
		int change = 1; 
		int completed= 0; 

		while(completed == 0) 
    171e:	cd 2b       	or	r28, r29
    1720:	19 f4       	brne	.+6      	; 0x1728 <opt_select_tuning+0x118>
    1722:	0c 2d       	mov	r16, r12
    1724:	1d 2d       	mov	r17, r13
    1726:	8d cf       	rjmp	.-230    	; 0x1642 <opt_select_tuning+0x32>
				_delay_ms(200);
			}
		}
		
		//Send parameters to Node 2
		switch (CURRENT_TUNING)
    1728:	80 91 b0 02 	lds	r24, 0x02B0
    172c:	90 91 b1 02 	lds	r25, 0x02B1
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	91 05       	cpc	r25, r1
    1734:	d1 f0       	breq	.+52     	; 0x176a <opt_select_tuning+0x15a>
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	91 05       	cpc	r25, r1
    173a:	61 f1       	breq	.+88     	; 0x1794 <opt_select_tuning+0x184>
    173c:	89 2b       	or	r24, r25
    173e:	f1 f5       	brne	.+124    	; 0x17bc <opt_select_tuning+0x1ac>
		{
			case (0): //Norm
			{
				CAN_send_parameter(ID_REGULATOR_KP, 9.0);
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	60 e1       	ldi	r22, 0x10	; 16
    1746:	71 e4       	ldi	r23, 0x41	; 65
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <CAN_send_parameter>
				CAN_send_parameter(ID_REGULATOR_KI, 0.385);
    1750:	48 eb       	ldi	r20, 0xB8	; 184
    1752:	5e e1       	ldi	r21, 0x1E	; 30
    1754:	65 ec       	ldi	r22, 0xC5	; 197
    1756:	7e e3       	ldi	r23, 0x3E	; 62
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <CAN_send_parameter>
				app_update_reference_div(16);
    1760:	80 e1       	ldi	r24, 0x10	; 16
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 19 0a 	call	0x1432	; 0x1432 <app_update_reference_div>
				break;
    1768:	29 c0       	rjmp	.+82     	; 0x17bc <opt_select_tuning+0x1ac>
			}
			case (1): //Fast
			{
				CAN_send_parameter(ID_REGULATOR_KP, 9.5);
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	68 e1       	ldi	r22, 0x18	; 24
    1770:	71 e4       	ldi	r23, 0x41	; 65
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 d5 04 	call	0x9aa	; 0x9aa <CAN_send_parameter>
				CAN_send_parameter(ID_REGULATOR_KI, 0.5);
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	7f e3       	ldi	r23, 0x3F	; 63
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 d5 04 	call	0x9aa	; 0x9aa <CAN_send_parameter>
				app_update_reference_div(14);
    178a:	8e e0       	ldi	r24, 0x0E	; 14
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 19 0a 	call	0x1432	; 0x1432 <app_update_reference_div>
				break;
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <opt_select_tuning+0x1ac>
			}
			case (2): //Ice
			{
				CAN_send_parameter(ID_REGULATOR_KP, 3.5);
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	60 e6       	ldi	r22, 0x60	; 96
    179a:	70 e4       	ldi	r23, 0x40	; 64
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <CAN_send_parameter>
				CAN_send_parameter(ID_REGULATOR_KI, 0.3);
    17a4:	4a e9       	ldi	r20, 0x9A	; 154
    17a6:	59 e9       	ldi	r21, 0x99	; 153
    17a8:	69 e9       	ldi	r22, 0x99	; 153
    17aa:	7e e3       	ldi	r23, 0x3E	; 62
    17ac:	83 e0       	ldi	r24, 0x03	; 3
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <CAN_send_parameter>
				app_update_reference_div(15);
    17b4:	8f e0       	ldi	r24, 0x0F	; 15
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 19 0a 	call	0x1432	; 0x1432 <app_update_reference_div>
			}
			
		}
		
	
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	08 95       	ret

000017ce <opt_select_music>:

void opt_select_music()
{
    17ce:	af 92       	push	r10
    17d0:	bf 92       	push	r11
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	6e 97       	sbiw	r28, 0x1e	; 30
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
	
	
	int change = 1;
	char *song_list[15] = {"Imperial March ", "Star wars theme", "No music       "}; 
    17f2:	fe 01       	movw	r30, r28
    17f4:	31 96       	adiw	r30, 0x01	; 1
    17f6:	8e e1       	ldi	r24, 0x1E	; 30
    17f8:	df 01       	movw	r26, r30
    17fa:	1d 92       	st	X+, r1
    17fc:	8a 95       	dec	r24
    17fe:	e9 f7       	brne	.-6      	; 0x17fa <opt_select_music+0x2c>
    1800:	88 e6       	ldi	r24, 0x68	; 104
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	88 e7       	ldi	r24, 0x78	; 120
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
    1810:	88 e8       	ldi	r24, 0x88	; 136
    1812:	92 e0       	ldi	r25, 0x02	; 2
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
	int ToSettings= 0;
	
	oled_clear_SRAM();
    1818:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_home();
    181c:	0e 94 de 10 	call	0x21bc	; 0x21bc <oled_home>
	oled_cstring_write("Music:", 2);
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	88 e9       	ldi	r24, 0x98	; 152
    1826:	92 e0       	ldi	r25, 0x02	; 2
    1828:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>

void opt_select_music()
{
	
	
	int change = 1;
    182c:	01 e0       	ldi	r16, 0x01	; 1
    182e:	10 e0       	ldi	r17, 0x00	; 0
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
    1830:	aa 24       	eor	r10, r10
    1832:	a3 94       	inc	r10
    1834:	b1 2c       	mov	r11, r1
    1836:	c1 2c       	mov	r12, r1
    1838:	d1 2c       	mov	r13, r1

	while(ToSettings == 0)
	{
		
		//Read ADC
		adc_update_current_input();
    183a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <adc_update_current_input>
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
    183e:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <joystick_left>
    1842:	89 2b       	or	r24, r25
    1844:	29 f0       	breq	.+10     	; 0x1850 <opt_select_music+0x82>
    1846:	01 15       	cp	r16, r1
    1848:	11 05       	cpc	r17, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <opt_select_music+0x80>
    184c:	77 c0       	rjmp	.+238    	; 0x193c <opt_select_music+0x16e>
    184e:	7e c0       	rjmp	.+252    	; 0x194c <opt_select_music+0x17e>
		if(joystick_right() && !change) ToSettings = 1;
    1850:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    1854:	89 2b       	or	r24, r25
    1856:	31 f0       	breq	.+12     	; 0x1864 <opt_select_music+0x96>
    1858:	01 15       	cp	r16, r1
    185a:	11 05       	cpc	r17, r1
    185c:	31 f4       	brne	.+12     	; 0x186a <opt_select_music+0x9c>
    185e:	ea 2c       	mov	r14, r10
    1860:	fb 2c       	mov	r15, r11
    1862:	05 c0       	rjmp	.+10     	; 0x186e <opt_select_music+0xa0>
    1864:	ec 2c       	mov	r14, r12
    1866:	fd 2c       	mov	r15, r13
    1868:	02 c0       	rjmp	.+4      	; 0x186e <opt_select_music+0xa0>
    186a:	ec 2c       	mov	r14, r12
    186c:	fd 2c       	mov	r15, r13
		if (joystick_up() && CURRENT_SONG < 2)
    186e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <joystick_up>
    1872:	89 2b       	or	r24, r25
    1874:	81 f0       	breq	.+32     	; 0x1896 <opt_select_music+0xc8>
    1876:	80 91 4a 01 	lds	r24, 0x014A
    187a:	90 91 4b 01 	lds	r25, 0x014B
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	91 05       	cpc	r25, r1
    1882:	4c f4       	brge	.+18     	; 0x1896 <opt_select_music+0xc8>
		{
			CURRENT_SONG++;
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	90 93 4b 01 	sts	0x014B, r25
    188a:	80 93 4a 01 	sts	0x014A, r24
			music_next_song();
    188e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <music_next_song>
			change = 1;
    1892:	0a 2d       	mov	r16, r10
    1894:	1b 2d       	mov	r17, r11
		}
		if (joystick_down() && CURRENT_SONG > 0)
    1896:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <joystick_down>
    189a:	89 2b       	or	r24, r25
    189c:	39 f1       	breq	.+78     	; 0x18ec <opt_select_music+0x11e>
    189e:	80 91 4a 01 	lds	r24, 0x014A
    18a2:	90 91 4b 01 	lds	r25, 0x014B
    18a6:	18 16       	cp	r1, r24
    18a8:	19 06       	cpc	r1, r25
    18aa:	04 f5       	brge	.+64     	; 0x18ec <opt_select_music+0x11e>
		{
			CURRENT_SONG--;
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	90 93 4b 01 	sts	0x014B, r25
    18b2:	80 93 4a 01 	sts	0x014A, r24
			music_prev_song();
    18b6:	0e 94 68 10 	call	0x20d0	; 0x20d0 <music_prev_song>
			change = 1;
		}
		
		oled_go_to(30,3);
    18ba:	63 e0       	ldi	r22, 0x03	; 3
    18bc:	8e e1       	ldi	r24, 0x1E	; 30
    18be:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
    18c2:	e0 91 4a 01 	lds	r30, 0x014A
    18c6:	f0 91 4b 01 	lds	r31, 0x014B
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	8c 0f       	add	r24, r28
    18d4:	9d 1f       	adc	r25, r29
    18d6:	e8 0f       	add	r30, r24
    18d8:	f9 1f       	adc	r31, r25
    18da:	6a 2d       	mov	r22, r10
    18dc:	7b 2d       	mov	r23, r11
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
		oled_update_from_SRAM();
    18e6:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
    18ea:	1a c0       	rjmp	.+52     	; 0x1920 <opt_select_music+0x152>
			CURRENT_SONG--;
			music_prev_song();
			change = 1;
		}
		
		oled_go_to(30,3);
    18ec:	63 e0       	ldi	r22, 0x03	; 3
    18ee:	8e e1       	ldi	r24, 0x1E	; 30
    18f0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
    18f4:	e0 91 4a 01 	lds	r30, 0x014A
    18f8:	f0 91 4b 01 	lds	r31, 0x014B
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	a1 e0       	ldi	r26, 0x01	; 1
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	ac 0f       	add	r26, r28
    1906:	bd 1f       	adc	r27, r29
    1908:	ea 0f       	add	r30, r26
    190a:	fb 1f       	adc	r31, r27
    190c:	6a 2d       	mov	r22, r10
    190e:	7b 2d       	mov	r23, r11
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
		oled_update_from_SRAM();
    1918:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
		
		if (change!= 0)
    191c:	01 2b       	or	r16, r17
    191e:	49 f0       	breq	.+18     	; 0x1932 <opt_select_music+0x164>
    1920:	bf ef       	ldi	r27, 0xFF	; 255
    1922:	2f ef       	ldi	r18, 0xFF	; 255
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	b1 50       	subi	r27, 0x01	; 1
    1928:	20 40       	sbci	r18, 0x00	; 0
    192a:	80 40       	sbci	r24, 0x00	; 0
    192c:	e1 f7       	brne	.-8      	; 0x1926 <opt_select_music+0x158>
    192e:	00 c0       	rjmp	.+0      	; 0x1930 <opt_select_music+0x162>
    1930:	00 c0       	rjmp	.+0      	; 0x1932 <opt_select_music+0x164>
	
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("Music:", 2);

	while(ToSettings == 0)
    1932:	ef 28       	or	r14, r15
    1934:	81 f4       	brne	.+32     	; 0x1956 <opt_select_music+0x188>
    1936:	0c 2d       	mov	r16, r12
    1938:	1d 2d       	mov	r17, r13
    193a:	7f cf       	rjmp	.-258    	; 0x183a <opt_select_music+0x6c>
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
    193c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    1940:	89 2b       	or	r24, r25
    1942:	09 f0       	breq	.+2      	; 0x1946 <opt_select_music+0x178>
    1944:	8c cf       	rjmp	.-232    	; 0x185e <opt_select_music+0x90>
		//Read ADC
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
    1946:	ea 2c       	mov	r14, r10
    1948:	fb 2c       	mov	r15, r11
    194a:	91 cf       	rjmp	.-222    	; 0x186e <opt_select_music+0xa0>
		if(joystick_right() && !change) ToSettings = 1;
    194c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    1950:	ec 2c       	mov	r14, r12
    1952:	fd 2c       	mov	r15, r13
    1954:	8c cf       	rjmp	.-232    	; 0x186e <opt_select_music+0xa0>
			
		}
		
		
	}
}
    1956:	6e 96       	adiw	r28, 0x1e	; 30
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	08 95       	ret

00001978 <view_highscore>:

void view_highscore()
{
    1978:	4f 92       	push	r4
    197a:	5f 92       	push	r5
    197c:	6f 92       	push	r6
    197e:	7f 92       	push	r7
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
	oled_clear_SRAM();
    1998:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
	oled_home();
    199c:	0e 94 de 10 	call	0x21bc	; 0x21bc <oled_home>
	oled_cstring_write("High score:", 2);
    19a0:	62 e0       	ldi	r22, 0x02	; 2
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	8f e9       	ldi	r24, 0x9F	; 159
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    19ac:	0f 2e       	mov	r0, r31
    19ae:	fe e0       	ldi	r31, 0x0E	; 14
    19b0:	8f 2e       	mov	r8, r31
    19b2:	f1 e0       	ldi	r31, 0x01	; 1
    19b4:	9f 2e       	mov	r9, r31
    19b6:	f0 2d       	mov	r31, r0
    19b8:	0f 2e       	mov	r0, r31
    19ba:	f6 e3       	ldi	r31, 0x36	; 54
    19bc:	6f 2e       	mov	r6, r31
    19be:	f1 e0       	ldi	r31, 0x01	; 1
    19c0:	7f 2e       	mov	r7, r31
    19c2:	f0 2d       	mov	r31, r0
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
		if(joystick_left())
    19c4:	68 94       	set
    19c6:	44 24       	eor	r4, r4
    19c8:	41 f8       	bld	r4, 1
    19ca:	51 2c       	mov	r5, r1
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
    19cc:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <adc_update_current_input>
		if(joystick_left())
    19d0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <joystick_left>
    19d4:	5c 01       	movw	r10, r24
    19d6:	74 01       	movw	r14, r8
    19d8:	83 01       	movw	r16, r6
    19da:	c4 2d       	mov	r28, r4
    19dc:	d5 2d       	mov	r29, r5
		}
		
		for (int i = 0; i < 5; i += 2)
		{
			//Prints i highscore
			oled_go_to(1,2+i);
    19de:	6c 2f       	mov	r22, r28
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
			oled_cstring_write(int_to_cstring(i+1),1);
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	0e 94 2d 07 	call	0xe5a	; 0xe5a <int_to_cstring>
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_cstring_write(". ",1);
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	8b ea       	ldi	r24, 0xAB	; 171
    19fc:	92 e0       	ldi	r25, 0x02	; 2
    19fe:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i],1);
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	c7 01       	movw	r24, r14
    1a08:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_cstring_write(": ",1);
    1a0c:	61 e0       	ldi	r22, 0x01	; 1
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	8b e3       	ldi	r24, 0x3B	; 59
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    1a18:	68 01       	movw	r12, r16
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i]),1);
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	0e 94 2d 07 	call	0xe5a	; 0xe5a <int_to_cstring>
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			
			//Adapts next line
			if (HIGHSCORE_LIST[i] > 99) oled_cstring_write(" ",1);
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	84 36       	cpi	r24, 0x64	; 100
    1a34:	91 05       	cpc	r25, r1
    1a36:	3c f0       	brlt	.+14     	; 0x1a46 <view_highscore+0xce>
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	86 e9       	ldi	r24, 0x96	; 150
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <view_highscore+0xec>
			else if (HIGHSCORE_LIST[i] > 9) oled_cstring_write("  ",1);
    1a46:	0a 97       	sbiw	r24, 0x0a	; 10
    1a48:	3c f0       	brlt	.+14     	; 0x1a58 <view_highscore+0xe0>
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	85 e9       	ldi	r24, 0x95	; 149
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <view_highscore+0xec>
			else oled_cstring_write("   ",1);
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	84 e9       	ldi	r24, 0x94	; 148
    1a5e:	92 e0       	ldi	r25, 0x02	; 2
    1a60:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			
			//Prints i+1 highscore
			oled_cstring_write(int_to_cstring(i+2),1);
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 94 2d 07 	call	0xe5a	; 0xe5a <int_to_cstring>
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_cstring_write(". ",1);
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	8b ea       	ldi	r24, 0xAB	; 171
    1a78:	92 e0       	ldi	r25, 0x02	; 2
    1a7a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	c7 01       	movw	r24, r14
    1a84:	04 96       	adiw	r24, 0x04	; 4
    1a86:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_cstring_write(": ",1);
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	8b e3       	ldi	r24, 0x3B	; 59
    1a90:	92 e0       	ldi	r25, 0x02	; 2
    1a92:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
    1a96:	f6 01       	movw	r30, r12
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <int_to_cstring>
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    1aa8:	22 96       	adiw	r28, 0x02	; 2
    1aaa:	f8 e0       	ldi	r31, 0x08	; 8
    1aac:	ef 0e       	add	r14, r31
    1aae:	f1 1c       	adc	r15, r1
    1ab0:	0c 5f       	subi	r16, 0xFC	; 252
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			 ToSettings = 1;
			 
		}
		
		for (int i = 0; i < 5; i += 2)
    1ab4:	c8 30       	cpi	r28, 0x08	; 8
    1ab6:	d1 05       	cpc	r29, r1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <view_highscore+0x144>
    1aba:	91 cf       	rjmp	.-222    	; 0x19de <view_highscore+0x66>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
			oled_cstring_write(": ",1);
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
			
		}
		oled_update_from_SRAM();
    1abc:	0e 94 8b 11 	call	0x2316	; 0x2316 <oled_update_from_SRAM>
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
    1ac0:	ab 28       	or	r10, r11
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <view_highscore+0x14e>
    1ac4:	83 cf       	rjmp	.-250    	; 0x19cc <view_highscore+0x54>
		oled_update_from_SRAM();
		
		
	}

}
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	9f 90       	pop	r9
    1adc:	8f 90       	pop	r8
    1ade:	7f 90       	pop	r7
    1ae0:	6f 90       	pop	r6
    1ae2:	5f 90       	pop	r5
    1ae4:	4f 90       	pop	r4
    1ae6:	08 95       	ret

00001ae8 <opt_run_game>:

void opt_run_game(){ NEXT_MENU = 1; }
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	90 93 19 03 	sts	0x0319, r25
    1af0:	80 93 18 03 	sts	0x0318, r24
    1af4:	08 95       	ret

00001af6 <opt_end_game>:
void opt_end_game(){ NEXT_MENU = 1; }
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	90 93 19 03 	sts	0x0319, r25
    1afe:	80 93 18 03 	sts	0x0318, r24
    1b02:	08 95       	ret

00001b04 <opt_continue_game>:
void opt_continue_game(){ NEXT_MENU = 0; }
    1b04:	10 92 19 03 	sts	0x0319, r1
    1b08:	10 92 18 03 	sts	0x0318, r1
    1b0c:	08 95       	ret

00001b0e <opt_exit_application>:
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	90 93 19 03 	sts	0x0319, r25
    1b16:	80 93 18 03 	sts	0x0318, r24
    1b1a:	08 95       	ret

00001b1c <adc_read>:
{
	//unsigned char *p;	
	volatile char *p = (char *) 0x1400;
	
	//Selects correct address for chosen channel
	p[0] =  0x1403 + channel;
    1b1c:	8d 5f       	subi	r24, 0xFD	; 253
    1b1e:	80 93 00 14 	sts	0x1400, r24
	
	//Wait for result
	while(!finished){}
    1b22:	80 91 b2 02 	lds	r24, 0x02B2
    1b26:	90 91 b3 02 	lds	r25, 0x02B3
    1b2a:	89 2b       	or	r24, r25
    1b2c:	d1 f3       	breq	.-12     	; 0x1b22 <adc_read+0x6>
	finished = 0;
    1b2e:	10 92 b3 02 	sts	0x02B3, r1
    1b32:	10 92 b2 02 	sts	0x02B2, r1
	
	//Gather data
	return *p;
    1b36:	80 91 00 14 	lds	r24, 0x1400
}
    1b3a:	08 95       	ret

00001b3c <__vector_2>:
	
	
}

ISR(INT1_vect)
{
    1b3c:	1f 92       	push	r1
    1b3e:	0f 92       	push	r0
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	0f 92       	push	r0
    1b44:	11 24       	eor	r1, r1
    1b46:	8f 93       	push	r24
    1b48:	9f 93       	push	r25
	finished = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	90 93 b3 02 	sts	0x02B3, r25
    1b52:	80 93 b2 02 	sts	0x02B2, r24
}
    1b56:	9f 91       	pop	r25
    1b58:	8f 91       	pop	r24
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <adc_joy_calibrate>:

void adc_joy_calibrate()
{
	//Reads midpoint & defines it as zero level
	x_mid_point = adc_read(1);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <adc_read>
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	90 93 09 03 	sts	0x0309, r25
    1b72:	80 93 08 03 	sts	0x0308, r24
	y_mid_point = adc_read(2);
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <adc_read>
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	90 93 2f 03 	sts	0x032F, r25
    1b84:	80 93 2e 03 	sts	0x032E, r24
    1b88:	08 95       	ret

00001b8a <adc_init>:
}

void adc_init()
{
	
	sei();
    1b8a:	78 94       	sei
	//Sets MCU control register, for falling edge
	MCUCR |= (1<<ISC11);
    1b8c:	85 b7       	in	r24, 0x35	; 53
    1b8e:	88 60       	ori	r24, 0x08	; 8
    1b90:	85 bf       	out	0x35, r24	; 53
	
	//Enables interrupt on pin
	GICR |= (1 << INT1);
    1b92:	8b b7       	in	r24, 0x3b	; 59
    1b94:	80 68       	ori	r24, 0x80	; 128
    1b96:	8b bf       	out	0x3b, r24	; 59
	
	//Enable pin inputs
	DDRB &= ~((1 << PB1)|(1 << PB2)|(1 << PB3));
    1b98:	87 b3       	in	r24, 0x17	; 23
    1b9a:	81 7f       	andi	r24, 0xF1	; 241
    1b9c:	87 bb       	out	0x17, r24	; 23
	
	//Calibrates joystick
	adc_joy_calibrate();
    1b9e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <adc_joy_calibrate>
	cli();
    1ba2:	f8 94       	cli
    1ba4:	08 95       	ret

00001ba6 <adc_joy_position>:
	x_mid_point = adc_read(1);
	y_mid_point = adc_read(2);
}

struct j_pos adc_joy_position()
{
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <adc_joy_position+0x12>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <adc_joy_position+0x14>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <adc_joy_position+0x16>
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	uint8_t joystick_y_analog = 0;
	int joystick_x_perc = 0;
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <adc_read>
    1bc8:	08 2f       	mov	r16, r24
	joystick_y_analog = adc_read(2);
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <adc_read>
    1bd2:	c8 2e       	mov	r12, r24
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    1bd4:	20 91 08 03 	lds	r18, 0x0308
    1bd8:	30 91 09 03 	lds	r19, 0x0309
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    1bdc:	e0 90 2e 03 	lds	r14, 0x032E
    1be0:	f0 90 2f 03 	lds	r15, 0x032F
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    1be4:	16 b3       	in	r17, 0x16	; 22
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
	joystick_y_analog = adc_read(2);
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    1be6:	80 2f       	mov	r24, r16
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	82 1b       	sub	r24, r18
    1bec:	93 0b       	sbc	r25, r19
    1bee:	0f 2e       	mov	r0, r31
    1bf0:	f4 e6       	ldi	r31, 0x64	; 100
    1bf2:	df 2e       	mov	r13, r31
    1bf4:	f0 2d       	mov	r31, r0
    1bf6:	d8 9e       	mul	r13, r24
    1bf8:	b0 01       	movw	r22, r0
    1bfa:	d9 9e       	mul	r13, r25
    1bfc:	70 0d       	add	r23, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	88 27       	eor	r24, r24
    1c02:	77 fd       	sbrc	r23, 7
    1c04:	80 95       	com	r24
    1c06:	98 2f       	mov	r25, r24
    1c08:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4e ef       	ldi	r20, 0xFE	; 254
    1c12:	52 e4       	ldi	r21, 0x42	; 66
    1c14:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__divsf3>
    1c18:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
    1c1c:	06 2f       	mov	r16, r22
    1c1e:	86 2f       	mov	r24, r22
    1c20:	97 2f       	mov	r25, r23
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    1c26:	8c 2d       	mov	r24, r12
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	8e 19       	sub	r24, r14
    1c2c:	9f 09       	sbc	r25, r15
    1c2e:	d8 9e       	mul	r13, r24
    1c30:	b0 01       	movw	r22, r0
    1c32:	d9 9e       	mul	r13, r25
    1c34:	70 0d       	add	r23, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	88 27       	eor	r24, r24
    1c3a:	77 fd       	sbrc	r23, 7
    1c3c:	80 95       	com	r24
    1c3e:	98 2f       	mov	r25, r24
    1c40:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4e ef       	ldi	r20, 0xFE	; 254
    1c4a:	52 e4       	ldi	r21, 0x42	; 66
    1c4c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__divsf3>
    1c50:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
    1c54:	86 2f       	mov	r24, r22
    1c56:	97 2f       	mov	r25, r23
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    1c5c:	16 95       	lsr	r17
    1c5e:	16 95       	lsr	r17
    1c60:	16 95       	lsr	r17
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	18 27       	eor	r17, r24
    1c66:	11 70       	andi	r17, 0x01	; 1
	
	return pos;
    1c68:	1d 83       	std	Y+5, r17	; 0x05
    1c6a:	1e 82       	std	Y+6, r1	; 0x06
    1c6c:	20 2f       	mov	r18, r16
    1c6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c70:	46 2f       	mov	r20, r22
    1c72:	5c 81       	ldd	r21, Y+4	; 0x04
    1c74:	61 2f       	mov	r22, r17
    1c76:	70 e0       	ldi	r23, 0x00	; 0
}
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	26 96       	adiw	r28, 0x06	; 6
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	08 95       	ret

00001c9a <adc_slider_position_left>:

int adc_slider_position_left()
{
	return 100*adc_read(3)/((float)255); //Returns slider position [0-100]
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <adc_read>
    1ca2:	24 e6       	ldi	r18, 0x64	; 100
    1ca4:	82 9f       	mul	r24, r18
    1ca6:	c0 01       	movw	r24, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	bc 01       	movw	r22, r24
    1cac:	88 27       	eor	r24, r24
    1cae:	77 fd       	sbrc	r23, 7
    1cb0:	80 95       	com	r24
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	53 e4       	ldi	r21, 0x43	; 67
    1cc0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__divsf3>
    1cc4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
}
    1cc8:	cb 01       	movw	r24, r22
    1cca:	08 95       	ret

00001ccc <adc_slider_position_right>:

int adc_slider_position_right() 
{
	
	return 100*adc_read(4)/((float)255); //Returns slider position [0-100]
    1ccc:	84 e0       	ldi	r24, 0x04	; 4
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <adc_read>
    1cd4:	24 e6       	ldi	r18, 0x64	; 100
    1cd6:	82 9f       	mul	r24, r18
    1cd8:	c0 01       	movw	r24, r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	bc 01       	movw	r22, r24
    1cde:	88 27       	eor	r24, r24
    1ce0:	77 fd       	sbrc	r23, 7
    1ce2:	80 95       	com	r24
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	53 e4       	ldi	r21, 0x43	; 67
    1cf2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__divsf3>
    1cf6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
}
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	08 95       	ret

00001cfe <joystick_down>:
	return difference;
}

int joystick_down()
{
	return (PREV_INPUT.joystick.y_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p < -JOYSTICK_MENU_DEADZONE); //Returns 1 if joystick was moved this frame
    1cfe:	80 91 46 03 	lds	r24, 0x0346
    1d02:	90 91 47 03 	lds	r25, 0x0347
    1d06:	85 3c       	cpi	r24, 0xC5	; 197
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	5c f0       	brlt	.+22     	; 0x1d22 <joystick_down+0x24>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	20 91 fc 02 	lds	r18, 0x02FC
    1d14:	30 91 fd 02 	lds	r19, 0x02FD
    1d18:	24 3c       	cpi	r18, 0xC4	; 196
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	24 f0       	brlt	.+8      	; 0x1d26 <joystick_down+0x28>
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	08 95       	ret
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
}
    1d26:	08 95       	ret

00001d28 <joystick_up>:

int joystick_up()
{
	return (PREV_INPUT.joystick.y_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p > JOYSTICK_MENU_DEADZONE); //Returns 1 if joystick was moved this frame
    1d28:	80 91 46 03 	lds	r24, 0x0346
    1d2c:	90 91 47 03 	lds	r25, 0x0347
    1d30:	cc 97       	sbiw	r24, 0x3c	; 60
    1d32:	5c f4       	brge	.+22     	; 0x1d4a <joystick_up+0x22>
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	20 91 fc 02 	lds	r18, 0x02FC
    1d3c:	30 91 fd 02 	lds	r19, 0x02FD
    1d40:	2d 33       	cpi	r18, 0x3D	; 61
    1d42:	31 05       	cpc	r19, r1
    1d44:	24 f4       	brge	.+8      	; 0x1d4e <joystick_up+0x26>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	08 95       	ret
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
}
    1d4e:	08 95       	ret

00001d50 <joystick_left>:

int joystick_left()
{
	return (PREV_INPUT.joystick.x_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p < -JOYSTICK_MENU_DEADZONE); //Returns 1 if joystick was moved this frame
    1d50:	80 91 44 03 	lds	r24, 0x0344
    1d54:	90 91 45 03 	lds	r25, 0x0345
    1d58:	85 3c       	cpi	r24, 0xC5	; 197
    1d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5c:	5c f0       	brlt	.+22     	; 0x1d74 <joystick_left+0x24>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	20 91 fa 02 	lds	r18, 0x02FA
    1d66:	30 91 fb 02 	lds	r19, 0x02FB
    1d6a:	24 3c       	cpi	r18, 0xC4	; 196
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	24 f0       	brlt	.+8      	; 0x1d78 <joystick_left+0x28>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	08 95       	ret
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
}
    1d78:	08 95       	ret

00001d7a <joystick_right>:

int joystick_right()
{
	return (PREV_INPUT.joystick.x_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p > JOYSTICK_MENU_DEADZONE); //Returns 1 if joystick was moved this frame
    1d7a:	80 91 44 03 	lds	r24, 0x0344
    1d7e:	90 91 45 03 	lds	r25, 0x0345
    1d82:	cc 97       	sbiw	r24, 0x3c	; 60
    1d84:	5c f4       	brge	.+22     	; 0x1d9c <joystick_right+0x22>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	20 91 fa 02 	lds	r18, 0x02FA
    1d8e:	30 91 fb 02 	lds	r19, 0x02FB
    1d92:	2d 33       	cpi	r18, 0x3D	; 61
    1d94:	31 05       	cpc	r19, r1
    1d96:	24 f4       	brge	.+8      	; 0x1da0 <joystick_right+0x26>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	08 95       	ret
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
}
    1da0:	08 95       	ret

00001da2 <send_current_input>:

void send_current_input()
{
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	2b 97       	sbiw	r28, 0x0b	; 11
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
	//Creates CAN frame and fills it with input data
	struct can_frame message = CAN_frame_init(ID_INPUT_UPDATE,4);
    1db6:	44 e0       	ldi	r20, 0x04	; 4
    1db8:	64 e0       	ldi	r22, 0x04	; 4
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	0e 94 8c 04 	call	0x918	; 0x918 <CAN_frame_init>
	message.data[0] = CURRENT_INPUT.joystick.x_p;
    1dc4:	80 91 fa 02 	lds	r24, 0x02FA
    1dc8:	8c 83       	std	Y+4, r24	; 0x04
	message.data[1] = CURRENT_INPUT.joystick.x_p;
    1dca:	8d 83       	std	Y+5, r24	; 0x05
	message.data[2] = CURRENT_INPUT.joystick.button;
    1dcc:	80 91 fe 02 	lds	r24, 0x02FE
    1dd0:	8e 83       	std	Y+6, r24	; 0x06
	message.data[3] = CURRENT_INPUT.slider_l;
    1dd2:	80 91 00 03 	lds	r24, 0x0300
    1dd6:	8f 83       	std	Y+7, r24	; 0x07
	
	//Sends CAN frame and updates last transmitted data
	CAN_send_frame(&message);
    1dd8:	ce 01       	movw	r24, r28
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_send_frame>
	LAST_TRANSMITTED_INPUT = CURRENT_INPUT;
    1de0:	8e e0       	ldi	r24, 0x0E	; 14
    1de2:	ea ef       	ldi	r30, 0xFA	; 250
    1de4:	f2 e0       	ldi	r31, 0x02	; 2
    1de6:	a2 e5       	ldi	r26, 0x52	; 82
    1de8:	b3 e0       	ldi	r27, 0x03	; 3
    1dea:	01 90       	ld	r0, Z+
    1dec:	0d 92       	st	X+, r0
    1dee:	8a 95       	dec	r24
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <send_current_input+0x48>
}
    1df2:	2b 96       	adiw	r28, 0x0b	; 11
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <compare_new_input>:

int compare_new_input(struct input new_input)
{
    1e04:	cf 92       	push	r12
    1e06:	df 92       	push	r13
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	2e 97       	sbiw	r28, 0x0e	; 14
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
	int difference = 0;
	
	//Compare binary values
	if (PREV_INPUT.button_l != LAST_TRANSMITTED_INPUT.button_l) return 1;
    1e24:	20 91 4e 03 	lds	r18, 0x034E
    1e28:	30 91 4f 03 	lds	r19, 0x034F
    1e2c:	80 91 5c 03 	lds	r24, 0x035C
    1e30:	90 91 5d 03 	lds	r25, 0x035D
    1e34:	28 17       	cp	r18, r24
    1e36:	39 07       	cpc	r19, r25
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <compare_new_input+0x38>
    1e3a:	70 c0       	rjmp	.+224    	; 0x1f1c <compare_new_input+0x118>
	if (PREV_INPUT.button_r != LAST_TRANSMITTED_INPUT.button_r) return 10;
    1e3c:	20 91 50 03 	lds	r18, 0x0350
    1e40:	30 91 51 03 	lds	r19, 0x0351
    1e44:	80 91 5e 03 	lds	r24, 0x035E
    1e48:	90 91 5f 03 	lds	r25, 0x035F
    1e4c:	28 17       	cp	r18, r24
    1e4e:	39 07       	cpc	r19, r25
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <compare_new_input+0x50>
    1e52:	67 c0       	rjmp	.+206    	; 0x1f22 <compare_new_input+0x11e>
	if (PREV_INPUT.joystick.button) return 100;
    1e54:	80 91 48 03 	lds	r24, 0x0348
    1e58:	90 91 49 03 	lds	r25, 0x0349
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <compare_new_input+0x5e>
    1e60:	63 c0       	rjmp	.+198    	; 0x1f28 <compare_new_input+0x124>
	
	//Compare sliders
	if (PREV_INPUT.slider_l > LAST_TRANSMITTED_INPUT.slider_l + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_l < LAST_TRANSMITTED_INPUT.slider_l - SLIDER_TRANSMIT_DEADZONE) return 200;
    1e62:	20 91 4a 03 	lds	r18, 0x034A
    1e66:	30 91 4b 03 	lds	r19, 0x034B
    1e6a:	40 91 58 03 	lds	r20, 0x0358
    1e6e:	50 91 59 03 	lds	r21, 0x0359
    1e72:	ba 01       	movw	r22, r20
    1e74:	6c 5f       	subi	r22, 0xFC	; 252
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	62 17       	cp	r22, r18
    1e7a:	73 07       	cpc	r23, r19
    1e7c:	0c f4       	brge	.+2      	; 0x1e80 <compare_new_input+0x7c>
    1e7e:	57 c0       	rjmp	.+174    	; 0x1f2e <compare_new_input+0x12a>
    1e80:	44 50       	subi	r20, 0x04	; 4
    1e82:	51 09       	sbc	r21, r1
    1e84:	24 17       	cp	r18, r20
    1e86:	35 07       	cpc	r19, r21
    1e88:	0c f4       	brge	.+2      	; 0x1e8c <compare_new_input+0x88>
    1e8a:	54 c0       	rjmp	.+168    	; 0x1f34 <compare_new_input+0x130>
	if (PREV_INPUT.slider_r > LAST_TRANSMITTED_INPUT.slider_r + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_r < LAST_TRANSMITTED_INPUT.slider_r - SLIDER_TRANSMIT_DEADZONE) return 250;
    1e8c:	20 91 4c 03 	lds	r18, 0x034C
    1e90:	30 91 4d 03 	lds	r19, 0x034D
    1e94:	40 91 5a 03 	lds	r20, 0x035A
    1e98:	50 91 5b 03 	lds	r21, 0x035B
    1e9c:	ba 01       	movw	r22, r20
    1e9e:	6c 5f       	subi	r22, 0xFC	; 252
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	62 17       	cp	r22, r18
    1ea4:	73 07       	cpc	r23, r19
    1ea6:	0c f4       	brge	.+2      	; 0x1eaa <compare_new_input+0xa6>
    1ea8:	48 c0       	rjmp	.+144    	; 0x1f3a <compare_new_input+0x136>
    1eaa:	44 50       	subi	r20, 0x04	; 4
    1eac:	51 09       	sbc	r21, r1
    1eae:	24 17       	cp	r18, r20
    1eb0:	35 07       	cpc	r19, r21
    1eb2:	0c f4       	brge	.+2      	; 0x1eb6 <compare_new_input+0xb2>
    1eb4:	45 c0       	rjmp	.+138    	; 0x1f40 <compare_new_input+0x13c>
	
	//Compare joystick
	if (PREV_INPUT.joystick.x_p < LAST_TRANSMITTED_INPUT.joystick.x_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.x_p > LAST_TRANSMITTED_INPUT.joystick.x_p + JOYSTICK_TRANSMIT_DEADZONE) return 280;
    1eb6:	e0 91 44 03 	lds	r30, 0x0344
    1eba:	f0 91 45 03 	lds	r31, 0x0345
    1ebe:	60 91 52 03 	lds	r22, 0x0352
    1ec2:	70 91 53 03 	lds	r23, 0x0353
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	26 50       	subi	r18, 0x06	; 6
    1eca:	31 09       	sbc	r19, r1
    1ecc:	e2 17       	cp	r30, r18
    1ece:	f3 07       	cpc	r31, r19
    1ed0:	d4 f1       	brlt	.+116    	; 0x1f46 <compare_new_input+0x142>
    1ed2:	24 5f       	subi	r18, 0xF4	; 244
    1ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed6:	2e 17       	cp	r18, r30
    1ed8:	3f 07       	cpc	r19, r31
    1eda:	c4 f1       	brlt	.+112    	; 0x1f4c <compare_new_input+0x148>
	if (PREV_INPUT.joystick.y_p < LAST_TRANSMITTED_INPUT.joystick.y_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.y_p > LAST_TRANSMITTED_INPUT.joystick.y_p + JOYSTICK_TRANSMIT_DEADZONE) return 290;
    1edc:	40 91 46 03 	lds	r20, 0x0346
    1ee0:	50 91 47 03 	lds	r21, 0x0347
    1ee4:	20 91 54 03 	lds	r18, 0x0354
    1ee8:	30 91 55 03 	lds	r19, 0x0355
    1eec:	d9 01       	movw	r26, r18
    1eee:	16 97       	sbiw	r26, 0x06	; 6
    1ef0:	4a 17       	cp	r20, r26
    1ef2:	5b 07       	cpc	r21, r27
    1ef4:	74 f1       	brlt	.+92     	; 0x1f52 <compare_new_input+0x14e>
    1ef6:	1c 96       	adiw	r26, 0x0c	; 12
    1ef8:	a4 17       	cp	r26, r20
    1efa:	b5 07       	cpc	r27, r21
    1efc:	6c f1       	brlt	.+90     	; 0x1f58 <compare_new_input+0x154>
	
	//Snap back to zero
	if (PREV_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.x_p != 0) return 300;
    1efe:	37 96       	adiw	r30, 0x07	; 7
    1f00:	3f 97       	sbiw	r30, 0x0f	; 15
    1f02:	10 f4       	brcc	.+4      	; 0x1f08 <compare_new_input+0x104>
    1f04:	67 2b       	or	r22, r23
    1f06:	59 f5       	brne	.+86     	; 0x1f5e <compare_new_input+0x15a>
	if (PREV_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.y_p != 0) return 301;
    1f08:	49 5f       	subi	r20, 0xF9	; 249
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	4f 30       	cpi	r20, 0x0F	; 15
    1f0e:	51 05       	cpc	r21, r1
    1f10:	58 f5       	brcc	.+86     	; 0x1f68 <compare_new_input+0x164>
    1f12:	21 15       	cp	r18, r1
    1f14:	31 05       	cpc	r19, r1
    1f16:	31 f5       	brne	.+76     	; 0x1f64 <compare_new_input+0x160>
	
	return difference;
    1f18:	c9 01       	movw	r24, r18
    1f1a:	26 c0       	rjmp	.+76     	; 0x1f68 <compare_new_input+0x164>
int compare_new_input(struct input new_input)
{
	int difference = 0;
	
	//Compare binary values
	if (PREV_INPUT.button_l != LAST_TRANSMITTED_INPUT.button_l) return 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	23 c0       	rjmp	.+70     	; 0x1f68 <compare_new_input+0x164>
	if (PREV_INPUT.button_r != LAST_TRANSMITTED_INPUT.button_r) return 10;
    1f22:	8a e0       	ldi	r24, 0x0A	; 10
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	20 c0       	rjmp	.+64     	; 0x1f68 <compare_new_input+0x164>
	if (PREV_INPUT.joystick.button) return 100;
    1f28:	84 e6       	ldi	r24, 0x64	; 100
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	1d c0       	rjmp	.+58     	; 0x1f68 <compare_new_input+0x164>
	
	//Compare sliders
	if (PREV_INPUT.slider_l > LAST_TRANSMITTED_INPUT.slider_l + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_l < LAST_TRANSMITTED_INPUT.slider_l - SLIDER_TRANSMIT_DEADZONE) return 200;
    1f2e:	88 ec       	ldi	r24, 0xC8	; 200
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	1a c0       	rjmp	.+52     	; 0x1f68 <compare_new_input+0x164>
    1f34:	88 ec       	ldi	r24, 0xC8	; 200
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	17 c0       	rjmp	.+46     	; 0x1f68 <compare_new_input+0x164>
	if (PREV_INPUT.slider_r > LAST_TRANSMITTED_INPUT.slider_r + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_r < LAST_TRANSMITTED_INPUT.slider_r - SLIDER_TRANSMIT_DEADZONE) return 250;
    1f3a:	8a ef       	ldi	r24, 0xFA	; 250
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <compare_new_input+0x164>
    1f40:	8a ef       	ldi	r24, 0xFA	; 250
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	11 c0       	rjmp	.+34     	; 0x1f68 <compare_new_input+0x164>
	
	//Compare joystick
	if (PREV_INPUT.joystick.x_p < LAST_TRANSMITTED_INPUT.joystick.x_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.x_p > LAST_TRANSMITTED_INPUT.joystick.x_p + JOYSTICK_TRANSMIT_DEADZONE) return 280;
    1f46:	88 e1       	ldi	r24, 0x18	; 24
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	0e c0       	rjmp	.+28     	; 0x1f68 <compare_new_input+0x164>
    1f4c:	88 e1       	ldi	r24, 0x18	; 24
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	0b c0       	rjmp	.+22     	; 0x1f68 <compare_new_input+0x164>
	if (PREV_INPUT.joystick.y_p < LAST_TRANSMITTED_INPUT.joystick.y_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.y_p > LAST_TRANSMITTED_INPUT.joystick.y_p + JOYSTICK_TRANSMIT_DEADZONE) return 290;
    1f52:	82 e2       	ldi	r24, 0x22	; 34
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	08 c0       	rjmp	.+16     	; 0x1f68 <compare_new_input+0x164>
    1f58:	82 e2       	ldi	r24, 0x22	; 34
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <compare_new_input+0x164>
	
	//Snap back to zero
	if (PREV_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.x_p != 0) return 300;
    1f5e:	8c e2       	ldi	r24, 0x2C	; 44
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <compare_new_input+0x164>
	if (PREV_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.y_p != 0) return 301;
    1f64:	8d e2       	ldi	r24, 0x2D	; 45
    1f66:	91 e0       	ldi	r25, 0x01	; 1
	
	return difference;
    1f68:	2e 96       	adiw	r28, 0x0e	; 14
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	08 95       	ret

00001f86 <adc_update_current_input>:
	//Delays for readability
	_delay_ms(50);
}

int adc_update_current_input()
{
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
	//Apply deadzone
	if (CURRENT_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) CURRENT_INPUT.joystick.x_p = 0;
    1f8a:	80 91 fa 02 	lds	r24, 0x02FA
    1f8e:	90 91 fb 02 	lds	r25, 0x02FB
    1f92:	07 96       	adiw	r24, 0x07	; 7
    1f94:	0f 97       	sbiw	r24, 0x0f	; 15
    1f96:	20 f4       	brcc	.+8      	; 0x1fa0 <adc_update_current_input+0x1a>
    1f98:	10 92 fb 02 	sts	0x02FB, r1
    1f9c:	10 92 fa 02 	sts	0x02FA, r1
	if (CURRENT_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) CURRENT_INPUT.joystick.y_p = 0;
    1fa0:	80 91 fc 02 	lds	r24, 0x02FC
    1fa4:	90 91 fd 02 	lds	r25, 0x02FD
    1fa8:	07 96       	adiw	r24, 0x07	; 7
    1faa:	0f 97       	sbiw	r24, 0x0f	; 15
    1fac:	20 f4       	brcc	.+8      	; 0x1fb6 <adc_update_current_input+0x30>
    1fae:	10 92 fd 02 	sts	0x02FD, r1
    1fb2:	10 92 fc 02 	sts	0x02FC, r1
		
	
	//Check if there is a difference
	int difference = compare_new_input();
    1fb6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <compare_new_input>
    1fba:	ec 01       	movw	r28, r24
	
	//CURRENT INPUT IS NOW PREVIOUS INPUT
	PREV_INPUT = CURRENT_INPUT;
    1fbc:	8e e0       	ldi	r24, 0x0E	; 14
    1fbe:	ea ef       	ldi	r30, 0xFA	; 250
    1fc0:	f2 e0       	ldi	r31, 0x02	; 2
    1fc2:	a4 e4       	ldi	r26, 0x44	; 68
    1fc4:	b3 e0       	ldi	r27, 0x03	; 3
    1fc6:	01 90       	ld	r0, Z+
    1fc8:	0d 92       	st	X+, r0
    1fca:	8a 95       	dec	r24
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <adc_update_current_input+0x40>
	
	CURRENT_INPUT.joystick = adc_joy_position();
    1fce:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <adc_joy_position>
    1fd2:	20 93 fa 02 	sts	0x02FA, r18
    1fd6:	30 93 fb 02 	sts	0x02FB, r19
    1fda:	40 93 fc 02 	sts	0x02FC, r20
    1fde:	50 93 fd 02 	sts	0x02FD, r21
    1fe2:	60 93 fe 02 	sts	0x02FE, r22
    1fe6:	70 93 ff 02 	sts	0x02FF, r23
	
	//Checks sliders
	CURRENT_INPUT.slider_l = adc_slider_position_left();
    1fea:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <adc_slider_position_left>
    1fee:	90 93 01 03 	sts	0x0301, r25
    1ff2:	80 93 00 03 	sts	0x0300, r24
	CURRENT_INPUT.slider_r = adc_slider_position_right();
    1ff6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <adc_slider_position_right>
    1ffa:	90 93 03 03 	sts	0x0303, r25
    1ffe:	80 93 02 03 	sts	0x0302, r24
	
	//Checks button
	CURRENT_INPUT.button_l = PINB&(1<<PB1);
    2002:	86 b3       	in	r24, 0x16	; 22
    2004:	82 70       	andi	r24, 0x02	; 2
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	90 93 05 03 	sts	0x0305, r25
    200c:	80 93 04 03 	sts	0x0304, r24
	CURRENT_INPUT.button_r = PINB&(1<<PB2);
    2010:	86 b3       	in	r24, 0x16	; 22
    2012:	84 70       	andi	r24, 0x04	; 4
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	90 93 07 03 	sts	0x0307, r25
    201a:	80 93 06 03 	sts	0x0306, r24
	
	return difference;
}
    201e:	ce 01       	movw	r24, r28
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	08 95       	ret

00002026 <ext_mem_init>:
    2026:	85 b7       	in	r24, 0x35	; 53
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	85 bf       	out	0x35, r24	; 53
    202c:	80 b7       	in	r24, 0x30	; 48
    202e:	80 62       	ori	r24, 0x20	; 32
    2030:	80 bf       	out	0x30, r24	; 48
    2032:	08 95       	ret

00002034 <ext_mem_write>:
    2034:	fc 01       	movw	r30, r24
    2036:	60 83       	st	Z, r22
    2038:	08 95       	ret

0000203a <ext_mem_read>:
    203a:	fc 01       	movw	r30, r24
    203c:	80 81       	ld	r24, Z
    203e:	08 95       	ret

00002040 <music_start_transmission>:
    2040:	c0 9a       	sbi	0x18, 0	; 24
    2042:	08 95       	ret

00002044 <music_end_transmission>:
    2044:	c0 98       	cbi	0x18, 0	; 24
    2046:	08 95       	ret

00002048 <music_init>:
    2048:	b8 9a       	sbi	0x17, 0	; 23
    204a:	81 b3       	in	r24, 0x11	; 17
    204c:	80 63       	ori	r24, 0x30	; 48
    204e:	81 bb       	out	0x11, r24	; 17
    2050:	94 98       	cbi	0x12, 4	; 18
    2052:	95 98       	cbi	0x12, 5	; 18
    2054:	0e 94 20 10 	call	0x2040	; 0x2040 <music_start_transmission>
    2058:	2f ef       	ldi	r18, 0xFF	; 255
    205a:	8f ef       	ldi	r24, 0xFF	; 255
    205c:	92 e0       	ldi	r25, 0x02	; 2
    205e:	21 50       	subi	r18, 0x01	; 1
    2060:	80 40       	sbci	r24, 0x00	; 0
    2062:	90 40       	sbci	r25, 0x00	; 0
    2064:	e1 f7       	brne	.-8      	; 0x205e <music_init+0x16>
    2066:	00 c0       	rjmp	.+0      	; 0x2068 <music_init+0x20>
    2068:	00 c0       	rjmp	.+0      	; 0x206a <music_init+0x22>
    206a:	0e 94 22 10 	call	0x2044	; 0x2044 <music_end_transmission>
    206e:	08 95       	ret

00002070 <music_start_up_sound>:
    2070:	94 9a       	sbi	0x12, 4	; 18
    2072:	95 9a       	sbi	0x12, 5	; 18
    2074:	0e 94 20 10 	call	0x2040	; 0x2040 <music_start_transmission>
    2078:	2f ef       	ldi	r18, 0xFF	; 255
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	92 e0       	ldi	r25, 0x02	; 2
    207e:	21 50       	subi	r18, 0x01	; 1
    2080:	80 40       	sbci	r24, 0x00	; 0
    2082:	90 40       	sbci	r25, 0x00	; 0
    2084:	e1 f7       	brne	.-8      	; 0x207e <music_start_up_sound+0xe>
    2086:	00 c0       	rjmp	.+0      	; 0x2088 <music_start_up_sound+0x18>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <music_start_up_sound+0x1a>
    208a:	0e 94 22 10 	call	0x2044	; 0x2044 <music_end_transmission>
    208e:	08 95       	ret

00002090 <music_ending_sound>:
    2090:	94 9a       	sbi	0x12, 4	; 18
    2092:	95 98       	cbi	0x12, 5	; 18
    2094:	0e 94 20 10 	call	0x2040	; 0x2040 <music_start_transmission>
    2098:	2f ef       	ldi	r18, 0xFF	; 255
    209a:	8f ef       	ldi	r24, 0xFF	; 255
    209c:	92 e0       	ldi	r25, 0x02	; 2
    209e:	21 50       	subi	r18, 0x01	; 1
    20a0:	80 40       	sbci	r24, 0x00	; 0
    20a2:	90 40       	sbci	r25, 0x00	; 0
    20a4:	e1 f7       	brne	.-8      	; 0x209e <music_ending_sound+0xe>
    20a6:	00 c0       	rjmp	.+0      	; 0x20a8 <music_ending_sound+0x18>
    20a8:	00 c0       	rjmp	.+0      	; 0x20aa <music_ending_sound+0x1a>
    20aa:	0e 94 22 10 	call	0x2044	; 0x2044 <music_end_transmission>
    20ae:	08 95       	ret

000020b0 <music_next_song>:
    20b0:	94 98       	cbi	0x12, 4	; 18
    20b2:	95 9a       	sbi	0x12, 5	; 18
    20b4:	0e 94 20 10 	call	0x2040	; 0x2040 <music_start_transmission>
    20b8:	2f ef       	ldi	r18, 0xFF	; 255
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	21 50       	subi	r18, 0x01	; 1
    20c0:	80 40       	sbci	r24, 0x00	; 0
    20c2:	90 40       	sbci	r25, 0x00	; 0
    20c4:	e1 f7       	brne	.-8      	; 0x20be <music_next_song+0xe>
    20c6:	00 c0       	rjmp	.+0      	; 0x20c8 <music_next_song+0x18>
    20c8:	00 c0       	rjmp	.+0      	; 0x20ca <music_next_song+0x1a>
    20ca:	0e 94 22 10 	call	0x2044	; 0x2044 <music_end_transmission>
    20ce:	08 95       	ret

000020d0 <music_prev_song>:
    20d0:	94 98       	cbi	0x12, 4	; 18
    20d2:	95 98       	cbi	0x12, 5	; 18
    20d4:	0e 94 20 10 	call	0x2040	; 0x2040 <music_start_transmission>
    20d8:	2f ef       	ldi	r18, 0xFF	; 255
    20da:	8f ef       	ldi	r24, 0xFF	; 255
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	21 50       	subi	r18, 0x01	; 1
    20e0:	80 40       	sbci	r24, 0x00	; 0
    20e2:	90 40       	sbci	r25, 0x00	; 0
    20e4:	e1 f7       	brne	.-8      	; 0x20de <music_prev_song+0xe>
    20e6:	00 c0       	rjmp	.+0      	; 0x20e8 <music_prev_song+0x18>
    20e8:	00 c0       	rjmp	.+0      	; 0x20ea <music_prev_song+0x1a>
    20ea:	0e 94 22 10 	call	0x2044	; 0x2044 <music_end_transmission>
    20ee:	08 95       	ret

000020f0 <oled_go_to>:
    20f0:	60 93 61 03 	sts	0x0361, r22
    20f4:	80 93 60 03 	sts	0x0360, r24
    20f8:	e0 91 63 01 	lds	r30, 0x0163
    20fc:	f0 91 64 01 	lds	r31, 0x0164
    2100:	80 91 61 03 	lds	r24, 0x0361
    2104:	87 70       	andi	r24, 0x07	; 7
    2106:	80 6b       	ori	r24, 0xB0	; 176
    2108:	80 83       	st	Z, r24
    210a:	e0 91 63 01 	lds	r30, 0x0163
    210e:	f0 91 64 01 	lds	r31, 0x0164
    2112:	80 91 60 03 	lds	r24, 0x0360
    2116:	8f 70       	andi	r24, 0x0F	; 15
    2118:	80 83       	st	Z, r24
    211a:	e0 91 63 01 	lds	r30, 0x0163
    211e:	f0 91 64 01 	lds	r31, 0x0164
    2122:	80 91 60 03 	lds	r24, 0x0360
    2126:	82 95       	swap	r24
    2128:	8f 70       	andi	r24, 0x0F	; 15
    212a:	80 61       	ori	r24, 0x10	; 16
    212c:	80 83       	st	Z, r24
    212e:	08 95       	ret

00002130 <oled_page_write>:
    2130:	e0 91 63 01 	lds	r30, 0x0163
    2134:	f0 91 64 01 	lds	r31, 0x0164
    2138:	90 91 61 03 	lds	r25, 0x0361
    213c:	97 70       	andi	r25, 0x07	; 7
    213e:	90 6b       	ori	r25, 0xB0	; 176
    2140:	90 83       	st	Z, r25
    2142:	e0 91 63 01 	lds	r30, 0x0163
    2146:	f0 91 64 01 	lds	r31, 0x0164
    214a:	90 91 60 03 	lds	r25, 0x0360
    214e:	9f 70       	andi	r25, 0x0F	; 15
    2150:	90 83       	st	Z, r25
    2152:	e0 91 63 01 	lds	r30, 0x0163
    2156:	f0 91 64 01 	lds	r31, 0x0164
    215a:	90 91 60 03 	lds	r25, 0x0360
    215e:	92 95       	swap	r25
    2160:	9f 70       	andi	r25, 0x0F	; 15
    2162:	90 61       	ori	r25, 0x10	; 16
    2164:	90 83       	st	Z, r25
    2166:	e0 91 61 01 	lds	r30, 0x0161
    216a:	f0 91 62 01 	lds	r31, 0x0162
    216e:	80 83       	st	Z, r24
    2170:	08 95       	ret

00002172 <oled_clear_screen>:
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	f0 90 60 03 	lds	r15, 0x0360
    2180:	00 91 61 03 	lds	r16, 0x0361
    2184:	d0 e0       	ldi	r29, 0x00	; 0
    2186:	10 e0       	ldi	r17, 0x00	; 0
    2188:	0d c0       	rjmp	.+26     	; 0x21a4 <oled_clear_screen+0x32>
    218a:	6d 2f       	mov	r22, r29
    218c:	8c 2f       	mov	r24, r28
    218e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    2192:	81 2f       	mov	r24, r17
    2194:	0e 94 98 10 	call	0x2130	; 0x2130 <oled_page_write>
    2198:	cf 5f       	subi	r28, 0xFF	; 255
    219a:	c0 38       	cpi	r28, 0x80	; 128
    219c:	b1 f7       	brne	.-20     	; 0x218a <oled_clear_screen+0x18>
    219e:	df 5f       	subi	r29, 0xFF	; 255
    21a0:	d8 30       	cpi	r29, 0x08	; 8
    21a2:	11 f0       	breq	.+4      	; 0x21a8 <oled_clear_screen+0x36>
    21a4:	c1 2f       	mov	r28, r17
    21a6:	f1 cf       	rjmp	.-30     	; 0x218a <oled_clear_screen+0x18>
    21a8:	f0 92 60 03 	sts	0x0360, r15
    21ac:	00 93 61 03 	sts	0x0361, r16
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	08 95       	ret

000021bc <oled_home>:
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    21c4:	08 95       	ret

000021c6 <oled_write_SRAM>:
    21c6:	90 91 60 03 	lds	r25, 0x0360
    21ca:	20 91 61 03 	lds	r18, 0x0361
    21ce:	40 e8       	ldi	r20, 0x80	; 128
    21d0:	24 9f       	mul	r18, r20
    21d2:	90 01       	movw	r18, r0
    21d4:	11 24       	eor	r1, r1
    21d6:	29 0f       	add	r18, r25
    21d8:	31 1d       	adc	r19, r1
    21da:	21 15       	cp	r18, r1
    21dc:	94 e0       	ldi	r25, 0x04	; 4
    21de:	39 07       	cpc	r19, r25
    21e0:	50 f4       	brcc	.+20     	; 0x21f6 <oled_write_SRAM+0x30>
    21e2:	40 91 5f 01 	lds	r20, 0x015F
    21e6:	50 91 60 01 	lds	r21, 0x0160
    21ea:	68 2f       	mov	r22, r24
    21ec:	ca 01       	movw	r24, r20
    21ee:	82 0f       	add	r24, r18
    21f0:	93 1f       	adc	r25, r19
    21f2:	0e 94 1a 10 	call	0x2034	; 0x2034 <ext_mem_write>
    21f6:	08 95       	ret

000021f8 <oled_char_write_big>:
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	28 e0       	ldi	r18, 0x08	; 8
    2202:	82 9f       	mul	r24, r18
    2204:	c0 01       	movw	r24, r0
    2206:	11 24       	eor	r1, r1
    2208:	ec 01       	movw	r28, r24
    220a:	c9 53       	subi	r28, 0x39	; 57
    220c:	dd 4f       	sbci	r29, 0xFD	; 253
    220e:	00 e0       	ldi	r16, 0x00	; 0
    2210:	10 e0       	ldi	r17, 0x00	; 0
    2212:	fe 01       	movw	r30, r28
    2214:	84 91       	lpm	r24, Z
    2216:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <oled_write_SRAM>
    221a:	60 91 61 03 	lds	r22, 0x0361
    221e:	80 91 60 03 	lds	r24, 0x0360
    2222:	8f 5f       	subi	r24, 0xFF	; 255
    2224:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    2228:	0f 5f       	subi	r16, 0xFF	; 255
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	21 96       	adiw	r28, 0x01	; 1
    222e:	08 30       	cpi	r16, 0x08	; 8
    2230:	11 05       	cpc	r17, r1
    2232:	79 f7       	brne	.-34     	; 0x2212 <oled_char_write_big+0x1a>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	08 95       	ret

00002242 <oled_char_write_normal>:
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	c8 2f       	mov	r28, r24
    224c:	d0 e0       	ldi	r29, 0x00	; 0
    224e:	a0 97       	sbiw	r28, 0x20	; 32
    2250:	ce 01       	movw	r24, r28
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	c8 0f       	add	r28, r24
    225c:	d9 1f       	adc	r29, r25
    225e:	c4 51       	subi	r28, 0x14	; 20
    2260:	de 4f       	sbci	r29, 0xFE	; 254
    2262:	00 e0       	ldi	r16, 0x00	; 0
    2264:	10 e0       	ldi	r17, 0x00	; 0
    2266:	fe 01       	movw	r30, r28
    2268:	84 91       	lpm	r24, Z
    226a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <oled_write_SRAM>
    226e:	60 91 61 03 	lds	r22, 0x0361
    2272:	80 91 60 03 	lds	r24, 0x0360
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    227c:	0f 5f       	subi	r16, 0xFF	; 255
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	21 96       	adiw	r28, 0x01	; 1
    2282:	05 30       	cpi	r16, 0x05	; 5
    2284:	11 05       	cpc	r17, r1
    2286:	79 f7       	brne	.-34     	; 0x2266 <oled_char_write_normal+0x24>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <oled_char_write_small>:
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	24 e0       	ldi	r18, 0x04	; 4
    22a0:	82 9f       	mul	r24, r18
    22a2:	c0 01       	movw	r24, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	ec 01       	movw	r28, r24
    22a8:	c0 51       	subi	r28, 0x10	; 16
    22aa:	d0 40       	sbci	r29, 0x00	; 0
    22ac:	00 e0       	ldi	r16, 0x00	; 0
    22ae:	10 e0       	ldi	r17, 0x00	; 0
    22b0:	fe 01       	movw	r30, r28
    22b2:	84 91       	lpm	r24, Z
    22b4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <oled_write_SRAM>
    22b8:	60 91 61 03 	lds	r22, 0x0361
    22bc:	80 91 60 03 	lds	r24, 0x0360
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    22c6:	0f 5f       	subi	r16, 0xFF	; 255
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	21 96       	adiw	r28, 0x01	; 1
    22cc:	04 30       	cpi	r16, 0x04	; 4
    22ce:	11 05       	cpc	r17, r1
    22d0:	79 f7       	brne	.-34     	; 0x22b0 <oled_char_write_small+0x1a>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <oled_read_SRAM>:
    22e0:	20 91 60 03 	lds	r18, 0x0360
    22e4:	80 91 61 03 	lds	r24, 0x0361
    22e8:	30 e8       	ldi	r19, 0x80	; 128
    22ea:	83 9f       	mul	r24, r19
    22ec:	c0 01       	movw	r24, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	82 0f       	add	r24, r18
    22f2:	91 1d       	adc	r25, r1
    22f4:	9c 01       	movw	r18, r24
    22f6:	21 50       	subi	r18, 0x01	; 1
    22f8:	31 09       	sbc	r19, r1
    22fa:	2f 3f       	cpi	r18, 0xFF	; 255
    22fc:	33 40       	sbci	r19, 0x03	; 3
    22fe:	48 f4       	brcc	.+18     	; 0x2312 <oled_read_SRAM+0x32>
    2300:	20 91 5f 01 	lds	r18, 0x015F
    2304:	30 91 60 01 	lds	r19, 0x0160
    2308:	82 0f       	add	r24, r18
    230a:	93 1f       	adc	r25, r19
    230c:	0e 94 1d 10 	call	0x203a	; 0x203a <ext_mem_read>
    2310:	08 95       	ret
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	08 95       	ret

00002316 <oled_update_from_SRAM>:
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	f0 90 60 03 	lds	r15, 0x0360
    2324:	00 91 61 03 	lds	r16, 0x0361
    2328:	d0 e0       	ldi	r29, 0x00	; 0
    232a:	10 e0       	ldi	r17, 0x00	; 0
    232c:	0e c0       	rjmp	.+28     	; 0x234a <oled_update_from_SRAM+0x34>
    232e:	6c 2f       	mov	r22, r28
    2330:	8d 2f       	mov	r24, r29
    2332:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    2336:	0e 94 70 11 	call	0x22e0	; 0x22e0 <oled_read_SRAM>
    233a:	0e 94 98 10 	call	0x2130	; 0x2130 <oled_page_write>
    233e:	cf 5f       	subi	r28, 0xFF	; 255
    2340:	c8 30       	cpi	r28, 0x08	; 8
    2342:	a9 f7       	brne	.-22     	; 0x232e <oled_update_from_SRAM+0x18>
    2344:	df 5f       	subi	r29, 0xFF	; 255
    2346:	d0 38       	cpi	r29, 0x80	; 128
    2348:	11 f0       	breq	.+4      	; 0x234e <oled_update_from_SRAM+0x38>
    234a:	c1 2f       	mov	r28, r17
    234c:	f0 cf       	rjmp	.-32     	; 0x232e <oled_update_from_SRAM+0x18>
    234e:	f0 92 60 03 	sts	0x0360, r15
    2352:	00 93 61 03 	sts	0x0361, r16
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	08 95       	ret

00002362 <oled_clear_SRAM>:
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	c0 e0       	ldi	r28, 0x00	; 0
    2368:	d0 e0       	ldi	r29, 0x00	; 0
    236a:	80 91 5f 01 	lds	r24, 0x015F
    236e:	90 91 60 01 	lds	r25, 0x0160
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	8c 0f       	add	r24, r28
    2376:	9d 1f       	adc	r25, r29
    2378:	0e 94 1a 10 	call	0x2034	; 0x2034 <ext_mem_write>
    237c:	21 96       	adiw	r28, 0x01	; 1
    237e:	c1 15       	cp	r28, r1
    2380:	84 e0       	ldi	r24, 0x04	; 4
    2382:	d8 07       	cpc	r29, r24
    2384:	91 f7       	brne	.-28     	; 0x236a <oled_clear_SRAM+0x8>
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	08 95       	ret

0000238c <oled_init>:
    238c:	0e 94 13 10 	call	0x2026	; 0x2026 <ext_mem_init>
    2390:	10 92 61 03 	sts	0x0361, r1
    2394:	10 92 60 03 	sts	0x0360, r1
    2398:	e0 91 63 01 	lds	r30, 0x0163
    239c:	f0 91 64 01 	lds	r31, 0x0164
    23a0:	8e ea       	ldi	r24, 0xAE	; 174
    23a2:	80 83       	st	Z, r24
    23a4:	e0 91 63 01 	lds	r30, 0x0163
    23a8:	f0 91 64 01 	lds	r31, 0x0164
    23ac:	81 ea       	ldi	r24, 0xA1	; 161
    23ae:	80 83       	st	Z, r24
    23b0:	e0 91 63 01 	lds	r30, 0x0163
    23b4:	f0 91 64 01 	lds	r31, 0x0164
    23b8:	8a ed       	ldi	r24, 0xDA	; 218
    23ba:	80 83       	st	Z, r24
    23bc:	e0 91 63 01 	lds	r30, 0x0163
    23c0:	f0 91 64 01 	lds	r31, 0x0164
    23c4:	82 e1       	ldi	r24, 0x12	; 18
    23c6:	80 83       	st	Z, r24
    23c8:	e0 91 63 01 	lds	r30, 0x0163
    23cc:	f0 91 64 01 	lds	r31, 0x0164
    23d0:	88 ec       	ldi	r24, 0xC8	; 200
    23d2:	80 83       	st	Z, r24
    23d4:	e0 91 63 01 	lds	r30, 0x0163
    23d8:	f0 91 64 01 	lds	r31, 0x0164
    23dc:	88 ea       	ldi	r24, 0xA8	; 168
    23de:	80 83       	st	Z, r24
    23e0:	e0 91 63 01 	lds	r30, 0x0163
    23e4:	f0 91 64 01 	lds	r31, 0x0164
    23e8:	8f e3       	ldi	r24, 0x3F	; 63
    23ea:	80 83       	st	Z, r24
    23ec:	e0 91 63 01 	lds	r30, 0x0163
    23f0:	f0 91 64 01 	lds	r31, 0x0164
    23f4:	85 ed       	ldi	r24, 0xD5	; 213
    23f6:	80 83       	st	Z, r24
    23f8:	e0 91 63 01 	lds	r30, 0x0163
    23fc:	f0 91 64 01 	lds	r31, 0x0164
    2400:	80 e8       	ldi	r24, 0x80	; 128
    2402:	80 83       	st	Z, r24
    2404:	e0 91 63 01 	lds	r30, 0x0163
    2408:	f0 91 64 01 	lds	r31, 0x0164
    240c:	81 e8       	ldi	r24, 0x81	; 129
    240e:	80 83       	st	Z, r24
    2410:	e0 91 63 01 	lds	r30, 0x0163
    2414:	f0 91 64 01 	lds	r31, 0x0164
    2418:	80 e5       	ldi	r24, 0x50	; 80
    241a:	80 83       	st	Z, r24
    241c:	e0 91 63 01 	lds	r30, 0x0163
    2420:	f0 91 64 01 	lds	r31, 0x0164
    2424:	89 ed       	ldi	r24, 0xD9	; 217
    2426:	80 83       	st	Z, r24
    2428:	e0 91 63 01 	lds	r30, 0x0163
    242c:	f0 91 64 01 	lds	r31, 0x0164
    2430:	81 e2       	ldi	r24, 0x21	; 33
    2432:	80 83       	st	Z, r24
    2434:	e0 91 63 01 	lds	r30, 0x0163
    2438:	f0 91 64 01 	lds	r31, 0x0164
    243c:	82 e2       	ldi	r24, 0x22	; 34
    243e:	80 83       	st	Z, r24
    2440:	e0 91 63 01 	lds	r30, 0x0163
    2444:	f0 91 64 01 	lds	r31, 0x0164
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	80 83       	st	Z, r24
    244c:	e0 91 63 01 	lds	r30, 0x0163
    2450:	f0 91 64 01 	lds	r31, 0x0164
    2454:	8b ed       	ldi	r24, 0xDB	; 219
    2456:	80 83       	st	Z, r24
    2458:	e0 91 63 01 	lds	r30, 0x0163
    245c:	f0 91 64 01 	lds	r31, 0x0164
    2460:	80 e3       	ldi	r24, 0x30	; 48
    2462:	80 83       	st	Z, r24
    2464:	e0 91 63 01 	lds	r30, 0x0163
    2468:	f0 91 64 01 	lds	r31, 0x0164
    246c:	8d ea       	ldi	r24, 0xAD	; 173
    246e:	80 83       	st	Z, r24
    2470:	e0 91 63 01 	lds	r30, 0x0163
    2474:	f0 91 64 01 	lds	r31, 0x0164
    2478:	10 82       	st	Z, r1
    247a:	e0 91 63 01 	lds	r30, 0x0163
    247e:	f0 91 64 01 	lds	r31, 0x0164
    2482:	84 ea       	ldi	r24, 0xA4	; 164
    2484:	80 83       	st	Z, r24
    2486:	e0 91 63 01 	lds	r30, 0x0163
    248a:	f0 91 64 01 	lds	r31, 0x0164
    248e:	86 ea       	ldi	r24, 0xA6	; 166
    2490:	80 83       	st	Z, r24
    2492:	e0 91 63 01 	lds	r30, 0x0163
    2496:	f0 91 64 01 	lds	r31, 0x0164
    249a:	80 e4       	ldi	r24, 0x40	; 64
    249c:	80 83       	st	Z, r24
    249e:	e0 91 63 01 	lds	r30, 0x0163
    24a2:	f0 91 64 01 	lds	r31, 0x0164
    24a6:	8f ea       	ldi	r24, 0xAF	; 175
    24a8:	80 83       	st	Z, r24
    24aa:	0e 94 b9 10 	call	0x2172	; 0x2172 <oled_clear_screen>
    24ae:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
    24b2:	08 95       	ret

000024b4 <oled_cstring_write>:
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	ec 01       	movw	r28, r24
    24ba:	61 15       	cp	r22, r1
    24bc:	71 05       	cpc	r23, r1
    24be:	51 f4       	brne	.+20     	; 0x24d4 <oled_cstring_write+0x20>
    24c0:	88 81       	ld	r24, Y
    24c2:	88 23       	and	r24, r24
    24c4:	01 f1       	breq	.+64     	; 0x2506 <oled_cstring_write+0x52>
    24c6:	21 96       	adiw	r28, 0x01	; 1
    24c8:	0e 94 4b 11 	call	0x2296	; 0x2296 <oled_char_write_small>
    24cc:	89 91       	ld	r24, Y+
    24ce:	81 11       	cpse	r24, r1
    24d0:	fb cf       	rjmp	.-10     	; 0x24c8 <oled_cstring_write+0x14>
    24d2:	19 c0       	rjmp	.+50     	; 0x2506 <oled_cstring_write+0x52>
    24d4:	61 30       	cpi	r22, 0x01	; 1
    24d6:	71 05       	cpc	r23, r1
    24d8:	51 f4       	brne	.+20     	; 0x24ee <oled_cstring_write+0x3a>
    24da:	88 81       	ld	r24, Y
    24dc:	88 23       	and	r24, r24
    24de:	99 f0       	breq	.+38     	; 0x2506 <oled_cstring_write+0x52>
    24e0:	21 96       	adiw	r28, 0x01	; 1
    24e2:	0e 94 21 11 	call	0x2242	; 0x2242 <oled_char_write_normal>
    24e6:	89 91       	ld	r24, Y+
    24e8:	81 11       	cpse	r24, r1
    24ea:	fb cf       	rjmp	.-10     	; 0x24e2 <oled_cstring_write+0x2e>
    24ec:	0c c0       	rjmp	.+24     	; 0x2506 <oled_cstring_write+0x52>
    24ee:	62 30       	cpi	r22, 0x02	; 2
    24f0:	71 05       	cpc	r23, r1
    24f2:	49 f4       	brne	.+18     	; 0x2506 <oled_cstring_write+0x52>
    24f4:	88 81       	ld	r24, Y
    24f6:	88 23       	and	r24, r24
    24f8:	31 f0       	breq	.+12     	; 0x2506 <oled_cstring_write+0x52>
    24fa:	21 96       	adiw	r28, 0x01	; 1
    24fc:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <oled_char_write_big>
    2500:	89 91       	ld	r24, Y+
    2502:	81 11       	cpse	r24, r1
    2504:	fb cf       	rjmp	.-10     	; 0x24fc <oled_cstring_write+0x48>
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	08 95       	ret

0000250c <oled_write_pixel>:
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	ea 01       	movw	r28, r20
    2518:	00 91 60 03 	lds	r16, 0x0360
    251c:	10 91 61 03 	lds	r17, 0x0361
    2520:	9b 01       	movw	r18, r22
    2522:	27 70       	andi	r18, 0x07	; 7
    2524:	30 78       	andi	r19, 0x80	; 128
    2526:	33 23       	and	r19, r19
    2528:	34 f4       	brge	.+12     	; 0x2536 <oled_write_pixel+0x2a>
    252a:	21 50       	subi	r18, 0x01	; 1
    252c:	31 09       	sbc	r19, r1
    252e:	28 6f       	ori	r18, 0xF8	; 248
    2530:	3f 6f       	ori	r19, 0xFF	; 255
    2532:	2f 5f       	subi	r18, 0xFF	; 255
    2534:	3f 4f       	sbci	r19, 0xFF	; 255
    2536:	f2 2e       	mov	r15, r18
    2538:	fb 01       	movw	r30, r22
    253a:	ff 23       	and	r31, r31
    253c:	0c f4       	brge	.+2      	; 0x2540 <oled_write_pixel+0x34>
    253e:	37 96       	adiw	r30, 0x07	; 7
    2540:	bf 01       	movw	r22, r30
    2542:	75 95       	asr	r23
    2544:	67 95       	ror	r22
    2546:	75 95       	asr	r23
    2548:	67 95       	ror	r22
    254a:	75 95       	asr	r23
    254c:	67 95       	ror	r22
    254e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    2552:	cd 2b       	or	r28, r29
    2554:	79 f4       	brne	.+30     	; 0x2574 <oled_write_pixel+0x68>
    2556:	0e 94 70 11 	call	0x22e0	; 0x22e0 <oled_read_SRAM>
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	9a 01       	movw	r18, r20
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <oled_write_pixel+0x5a>
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	fa 94       	dec	r15
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <oled_write_pixel+0x56>
    256a:	20 95       	com	r18
    256c:	82 23       	and	r24, r18
    256e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <oled_write_SRAM>
    2572:	0d c0       	rjmp	.+26     	; 0x258e <oled_write_pixel+0x82>
    2574:	0e 94 70 11 	call	0x22e0	; 0x22e0 <oled_read_SRAM>
    2578:	41 e0       	ldi	r20, 0x01	; 1
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	9a 01       	movw	r18, r20
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <oled_write_pixel+0x78>
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	fa 94       	dec	r15
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <oled_write_pixel+0x74>
    2588:	82 2b       	or	r24, r18
    258a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <oled_write_SRAM>
    258e:	00 93 60 03 	sts	0x0360, r16
    2592:	10 93 61 03 	sts	0x0361, r17
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	08 95       	ret

000025a2 <oled_write_line>:
    25a2:	2f 92       	push	r2
    25a4:	3f 92       	push	r3
    25a6:	4f 92       	push	r4
    25a8:	5f 92       	push	r5
    25aa:	6f 92       	push	r6
    25ac:	7f 92       	push	r7
    25ae:	8f 92       	push	r8
    25b0:	9f 92       	push	r9
    25b2:	af 92       	push	r10
    25b4:	bf 92       	push	r11
    25b6:	cf 92       	push	r12
    25b8:	df 92       	push	r13
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	28 97       	sbiw	r28, 0x08	; 8
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	2c 01       	movw	r4, r24
    25d8:	3b 01       	movw	r6, r22
    25da:	8a 01       	movw	r16, r20
    25dc:	19 01       	movw	r2, r18
    25de:	48 17       	cp	r20, r24
    25e0:	59 07       	cpc	r21, r25
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <oled_write_line+0x44>
    25e4:	ad c0       	rjmp	.+346    	; 0x2740 <oled_write_line+0x19e>
    25e6:	26 17       	cp	r18, r22
    25e8:	37 07       	cpc	r19, r23
    25ea:	09 f4       	brne	.+2      	; 0x25ee <oled_write_line+0x4c>
    25ec:	44 c0       	rjmp	.+136    	; 0x2676 <oled_write_line+0xd4>
    25ee:	b9 01       	movw	r22, r18
    25f0:	66 19       	sub	r22, r6
    25f2:	77 09       	sbc	r23, r7
    25f4:	88 27       	eor	r24, r24
    25f6:	77 fd       	sbrc	r23, 7
    25f8:	80 95       	com	r24
    25fa:	98 2f       	mov	r25, r24
    25fc:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    2600:	4b 01       	movw	r8, r22
    2602:	5c 01       	movw	r10, r24
    2604:	b8 01       	movw	r22, r16
    2606:	64 19       	sub	r22, r4
    2608:	75 09       	sbc	r23, r5
    260a:	88 27       	eor	r24, r24
    260c:	77 fd       	sbrc	r23, 7
    260e:	80 95       	com	r24
    2610:	98 2f       	mov	r25, r24
    2612:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    2616:	6b 01       	movw	r12, r22
    2618:	7c 01       	movw	r14, r24
    261a:	9b 01       	movw	r18, r22
    261c:	ac 01       	movw	r20, r24
    261e:	c5 01       	movw	r24, r10
    2620:	b4 01       	movw	r22, r8
    2622:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__divsf3>
    2626:	69 83       	std	Y+1, r22	; 0x01
    2628:	7a 83       	std	Y+2, r23	; 0x02
    262a:	8b 83       	std	Y+3, r24	; 0x03
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	a5 01       	movw	r20, r10
    2630:	94 01       	movw	r18, r8
    2632:	c7 01       	movw	r24, r14
    2634:	b6 01       	movw	r22, r12
    2636:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__divsf3>
    263a:	6d 83       	std	Y+5, r22	; 0x05
    263c:	7e 83       	std	Y+6, r23	; 0x06
    263e:	8f 83       	std	Y+7, r24	; 0x07
    2640:	98 87       	std	Y+8, r25	; 0x08
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	69 81       	ldd	r22, Y+1	; 0x01
    264c:	7a 81       	ldd	r23, Y+2	; 0x02
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__cmpsf2>
    2656:	88 23       	and	r24, r24
    2658:	0c f0       	brlt	.+2      	; 0x265c <oled_write_line+0xba>
    265a:	76 c0       	rjmp	.+236    	; 0x2748 <oled_write_line+0x1a6>
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f eb       	ldi	r21, 0xBF	; 191
    2664:	69 81       	ldd	r22, Y+1	; 0x01
    2666:	7a 81       	ldd	r23, Y+2	; 0x02
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__gesf2>
    2670:	18 16       	cp	r1, r24
    2672:	2c f0       	brlt	.+10     	; 0x267e <oled_write_line+0xdc>
    2674:	69 c0       	rjmp	.+210    	; 0x2748 <oled_write_line+0x1a6>
    2676:	19 82       	std	Y+1, r1	; 0x01
    2678:	1a 82       	std	Y+2, r1	; 0x02
    267a:	1b 82       	std	Y+3, r1	; 0x03
    267c:	1c 82       	std	Y+4, r1	; 0x04
    267e:	04 15       	cp	r16, r4
    2680:	15 05       	cpc	r17, r5
    2682:	34 f4       	brge	.+12     	; 0x2690 <oled_write_line+0xee>
    2684:	31 01       	movw	r6, r2
    2686:	94 2d       	mov	r25, r4
    2688:	85 2d       	mov	r24, r5
    268a:	28 01       	movw	r4, r16
    268c:	09 2f       	mov	r16, r25
    268e:	18 2f       	mov	r17, r24
    2690:	b3 01       	movw	r22, r6
    2692:	88 27       	eor	r24, r24
    2694:	77 fd       	sbrc	r23, 7
    2696:	80 95       	com	r24
    2698:	98 2f       	mov	r25, r24
    269a:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    269e:	4b 01       	movw	r8, r22
    26a0:	5c 01       	movw	r10, r24
    26a2:	b2 01       	movw	r22, r4
    26a4:	88 27       	eor	r24, r24
    26a6:	77 fd       	sbrc	r23, 7
    26a8:	80 95       	com	r24
    26aa:	98 2f       	mov	r25, r24
    26ac:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    26b0:	6b 01       	movw	r12, r22
    26b2:	7c 01       	movw	r14, r24
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	b3 01       	movw	r22, r6
    26ba:	c2 01       	movw	r24, r4
    26bc:	0e 94 86 12 	call	0x250c	; 0x250c <oled_write_pixel>
    26c0:	b8 01       	movw	r22, r16
    26c2:	88 27       	eor	r24, r24
    26c4:	77 fd       	sbrc	r23, 7
    26c6:	80 95       	com	r24
    26c8:	98 2f       	mov	r25, r24
    26ca:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    26ce:	6d 83       	std	Y+5, r22	; 0x05
    26d0:	7e 83       	std	Y+6, r23	; 0x06
    26d2:	8f 83       	std	Y+7, r24	; 0x07
    26d4:	98 87       	std	Y+8, r25	; 0x08
    26d6:	9b 01       	movw	r18, r22
    26d8:	ac 01       	movw	r20, r24
    26da:	c7 01       	movw	r24, r14
    26dc:	b6 01       	movw	r22, r12
    26de:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__cmpsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	0c f0       	brlt	.+2      	; 0x26e8 <oled_write_line+0x146>
    26e6:	91 c0       	rjmp	.+290    	; 0x280a <oled_write_line+0x268>
    26e8:	29 81       	ldd	r18, Y+1	; 0x01
    26ea:	3a 81       	ldd	r19, Y+2	; 0x02
    26ec:	4b 81       	ldd	r20, Y+3	; 0x03
    26ee:	5c 81       	ldd	r21, Y+4	; 0x04
    26f0:	c5 01       	movw	r24, r10
    26f2:	b4 01       	movw	r22, r8
    26f4:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__addsf3>
    26f8:	4b 01       	movw	r8, r22
    26fa:	5c 01       	movw	r10, r24
    26fc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
    2700:	2b 01       	movw	r4, r22
    2702:	3c 01       	movw	r6, r24
    2704:	c7 01       	movw	r24, r14
    2706:	b6 01       	movw	r22, r12
    2708:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	b2 01       	movw	r22, r4
    2716:	0e 94 86 12 	call	0x250c	; 0x250c <oled_write_pixel>
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	c7 01       	movw	r24, r14
    2724:	b6 01       	movw	r22, r12
    2726:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__addsf3>
    272a:	6b 01       	movw	r12, r22
    272c:	7c 01       	movw	r14, r24
    272e:	2d 81       	ldd	r18, Y+5	; 0x05
    2730:	3e 81       	ldd	r19, Y+6	; 0x06
    2732:	4f 81       	ldd	r20, Y+7	; 0x07
    2734:	58 85       	ldd	r21, Y+8	; 0x08
    2736:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__cmpsf2>
    273a:	88 23       	and	r24, r24
    273c:	ac f2       	brlt	.-86     	; 0x26e8 <oled_write_line+0x146>
    273e:	65 c0       	rjmp	.+202    	; 0x280a <oled_write_line+0x268>
    2740:	1d 82       	std	Y+5, r1	; 0x05
    2742:	1e 82       	std	Y+6, r1	; 0x06
    2744:	1f 82       	std	Y+7, r1	; 0x07
    2746:	18 86       	std	Y+8, r1	; 0x08
    2748:	26 14       	cp	r2, r6
    274a:	37 04       	cpc	r3, r7
    274c:	34 f4       	brge	.+12     	; 0x275a <oled_write_line+0x1b8>
    274e:	96 2d       	mov	r25, r6
    2750:	87 2d       	mov	r24, r7
    2752:	31 01       	movw	r6, r2
    2754:	29 2e       	mov	r2, r25
    2756:	38 2e       	mov	r3, r24
    2758:	28 01       	movw	r4, r16
    275a:	b3 01       	movw	r22, r6
    275c:	88 27       	eor	r24, r24
    275e:	77 fd       	sbrc	r23, 7
    2760:	80 95       	com	r24
    2762:	98 2f       	mov	r25, r24
    2764:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    2768:	6b 01       	movw	r12, r22
    276a:	7c 01       	movw	r14, r24
    276c:	b2 01       	movw	r22, r4
    276e:	88 27       	eor	r24, r24
    2770:	77 fd       	sbrc	r23, 7
    2772:	80 95       	com	r24
    2774:	98 2f       	mov	r25, r24
    2776:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    277a:	4b 01       	movw	r8, r22
    277c:	5c 01       	movw	r10, r24
    277e:	41 e0       	ldi	r20, 0x01	; 1
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	b3 01       	movw	r22, r6
    2784:	c2 01       	movw	r24, r4
    2786:	0e 94 86 12 	call	0x250c	; 0x250c <oled_write_pixel>
    278a:	b1 01       	movw	r22, r2
    278c:	88 27       	eor	r24, r24
    278e:	77 fd       	sbrc	r23, 7
    2790:	80 95       	com	r24
    2792:	98 2f       	mov	r25, r24
    2794:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__floatsisf>
    2798:	69 83       	std	Y+1, r22	; 0x01
    279a:	7a 83       	std	Y+2, r23	; 0x02
    279c:	8b 83       	std	Y+3, r24	; 0x03
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	9b 01       	movw	r18, r22
    27a2:	ac 01       	movw	r20, r24
    27a4:	c7 01       	movw	r24, r14
    27a6:	b6 01       	movw	r22, r12
    27a8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__cmpsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	6c f5       	brge	.+90     	; 0x280a <oled_write_line+0x268>
    27b0:	2d 81       	ldd	r18, Y+5	; 0x05
    27b2:	3e 81       	ldd	r19, Y+6	; 0x06
    27b4:	4f 81       	ldd	r20, Y+7	; 0x07
    27b6:	58 85       	ldd	r21, Y+8	; 0x08
    27b8:	c5 01       	movw	r24, r10
    27ba:	b4 01       	movw	r22, r8
    27bc:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__addsf3>
    27c0:	4b 01       	movw	r8, r22
    27c2:	5c 01       	movw	r10, r24
    27c4:	c7 01       	movw	r24, r14
    27c6:	b6 01       	movw	r22, r12
    27c8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
    27cc:	2b 01       	movw	r4, r22
    27ce:	3c 01       	movw	r6, r24
    27d0:	c5 01       	movw	r24, r10
    27d2:	b4 01       	movw	r22, r8
    27d4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__fixsfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	b2 01       	movw	r22, r4
    27e2:	0e 94 86 12 	call	0x250c	; 0x250c <oled_write_pixel>
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e8       	ldi	r20, 0x80	; 128
    27ec:	5f e3       	ldi	r21, 0x3F	; 63
    27ee:	c7 01       	movw	r24, r14
    27f0:	b6 01       	movw	r22, r12
    27f2:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__addsf3>
    27f6:	6b 01       	movw	r12, r22
    27f8:	7c 01       	movw	r14, r24
    27fa:	29 81       	ldd	r18, Y+1	; 0x01
    27fc:	3a 81       	ldd	r19, Y+2	; 0x02
    27fe:	4b 81       	ldd	r20, Y+3	; 0x03
    2800:	5c 81       	ldd	r21, Y+4	; 0x04
    2802:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__cmpsf2>
    2806:	88 23       	and	r24, r24
    2808:	9c f2       	brlt	.-90     	; 0x27b0 <oled_write_line+0x20e>
    280a:	28 96       	adiw	r28, 0x08	; 8
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	df 90       	pop	r13
    2824:	cf 90       	pop	r12
    2826:	bf 90       	pop	r11
    2828:	af 90       	pop	r10
    282a:	9f 90       	pop	r9
    282c:	8f 90       	pop	r8
    282e:	7f 90       	pop	r7
    2830:	6f 90       	pop	r6
    2832:	5f 90       	pop	r5
    2834:	4f 90       	pop	r4
    2836:	3f 90       	pop	r3
    2838:	2f 90       	pop	r2
    283a:	08 95       	ret

0000283c <main>:
#include <avr/interrupt.h>


int main(void)
{ 
	app_init(); //Initializes game
    283c:	0e 94 67 08 	call	0x10ce	; 0x10ce <app_init>
	app_setup(); //Enter name, difficulty, etc
    2840:	0e 94 bc 05 	call	0xb78	; 0xb78 <app_setup>
	while (1)
	{
		if(app_main_menu()) break; //Main menu before game start
    2844:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <app_main_menu>
    2848:	89 2b       	or	r24, r25
    284a:	31 f4       	brne	.+12     	; 0x2858 <main+0x1c>
		app_run();	//Runs the game/application
    284c:	0e 94 88 07 	call	0xf10	; 0xf10 <app_run>
		if (app_round_review()) break;
    2850:	0e 94 2c 09 	call	0x1258	; 0x1258 <app_round_review>
    2854:	89 2b       	or	r24, r25
    2856:	b1 f3       	breq	.-20     	; 0x2844 <main+0x8>
	}
	app_goodbye_message();
    2858:	0e 94 05 07 	call	0xe0a	; 0xe0a <app_goodbye_message>

}
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	08 95       	ret

00002862 <opt_constr>:
    2862:	fc 01       	movw	r30, r24
    2864:	71 83       	std	Z+1, r23	; 0x01
    2866:	60 83       	st	Z, r22
    2868:	15 82       	std	Z+5, r1	; 0x05
    286a:	14 82       	std	Z+4, r1	; 0x04
    286c:	53 83       	std	Z+3, r21	; 0x03
    286e:	42 83       	std	Z+2, r20	; 0x02
    2870:	11 86       	std	Z+9, r1	; 0x09
    2872:	10 86       	std	Z+8, r1	; 0x08
    2874:	08 95       	ret

00002876 <menu_constr>:
    2876:	fc 01       	movw	r30, r24
    2878:	71 83       	std	Z+1, r23	; 0x01
    287a:	60 83       	st	Z, r22
    287c:	13 82       	std	Z+3, r1	; 0x03
    287e:	12 82       	std	Z+2, r1	; 0x02
    2880:	15 82       	std	Z+5, r1	; 0x05
    2882:	14 82       	std	Z+4, r1	; 0x04
    2884:	97 83       	std	Z+7, r25	; 0x07
    2886:	86 83       	std	Z+6, r24	; 0x06
    2888:	11 86       	std	Z+9, r1	; 0x09
    288a:	10 86       	std	Z+8, r1	; 0x08
    288c:	08 95       	ret

0000288e <menu_print>:
    288e:	ff 92       	push	r15
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	8c 01       	movw	r16, r24
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	8a e0       	ldi	r24, 0x0A	; 10
    289e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    28a2:	d8 01       	movw	r26, r16
    28a4:	16 96       	adiw	r26, 0x06	; 6
    28a6:	ed 91       	ld	r30, X+
    28a8:	fc 91       	ld	r31, X
    28aa:	17 97       	sbiw	r26, 0x07	; 7
    28ac:	62 e0       	ldi	r22, 0x02	; 2
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    28b8:	d8 01       	movw	r26, r16
    28ba:	16 96       	adiw	r26, 0x06	; 6
    28bc:	ed 91       	ld	r30, X+
    28be:	fc 91       	ld	r31, X
    28c0:	17 97       	sbiw	r26, 0x07	; 7
    28c2:	c2 81       	ldd	r28, Z+2	; 0x02
    28c4:	d3 81       	ldd	r29, Z+3	; 0x03
    28c6:	20 97       	sbiw	r28, 0x00	; 0
    28c8:	99 f0       	breq	.+38     	; 0x28f0 <menu_print+0x62>
    28ca:	68 94       	set
    28cc:	ff 24       	eor	r15, r15
    28ce:	f1 f8       	bld	r15, 1
    28d0:	6f 2d       	mov	r22, r15
    28d2:	84 e1       	ldi	r24, 0x14	; 20
    28d4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    28d8:	61 e0       	ldi	r22, 0x01	; 1
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	88 81       	ld	r24, Y
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    28e4:	0c 80       	ldd	r0, Y+4	; 0x04
    28e6:	dd 81       	ldd	r29, Y+5	; 0x05
    28e8:	c0 2d       	mov	r28, r0
    28ea:	f3 94       	inc	r15
    28ec:	20 97       	sbiw	r28, 0x00	; 0
    28ee:	81 f7       	brne	.-32     	; 0x28d0 <menu_print+0x42>
    28f0:	d8 01       	movw	r26, r16
    28f2:	16 96       	adiw	r26, 0x06	; 6
    28f4:	ed 91       	ld	r30, X+
    28f6:	fc 91       	ld	r31, X
    28f8:	17 97       	sbiw	r26, 0x07	; 7
    28fa:	64 81       	ldd	r22, Z+4	; 0x04
    28fc:	6e 5f       	subi	r22, 0xFE	; 254
    28fe:	8a e0       	ldi	r24, 0x0A	; 10
    2900:	0e 94 78 10 	call	0x20f0	; 0x20f0 <oled_go_to>
    2904:	61 e0       	ldi	r22, 0x01	; 1
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	85 e6       	ldi	r24, 0x65	; 101
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <oled_cstring_write>
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	08 95       	ret

0000291c <menu_count_options>:
    291c:	dc 01       	movw	r26, r24
    291e:	12 96       	adiw	r26, 0x02	; 2
    2920:	ed 91       	ld	r30, X+
    2922:	fc 91       	ld	r31, X
    2924:	13 97       	sbiw	r26, 0x03	; 3
    2926:	30 97       	sbiw	r30, 0x00	; 0
    2928:	49 f0       	breq	.+18     	; 0x293c <menu_count_options+0x20>
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	04 80       	ldd	r0, Z+4	; 0x04
    2932:	f5 81       	ldd	r31, Z+5	; 0x05
    2934:	e0 2d       	mov	r30, r0
    2936:	30 97       	sbiw	r30, 0x00	; 0
    2938:	d1 f7       	brne	.-12     	; 0x292e <menu_count_options+0x12>
    293a:	08 95       	ret
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	08 95       	ret

00002942 <menu_control>:
    2942:	cf 92       	push	r12
    2944:	df 92       	push	r13
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	6c 01       	movw	r12, r24
    2954:	fc 01       	movw	r30, r24
    2956:	06 81       	ldd	r16, Z+6	; 0x06
    2958:	17 81       	ldd	r17, Z+7	; 0x07
    295a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <joystick_up>
    295e:	89 2b       	or	r24, r25
    2960:	69 f0       	breq	.+26     	; 0x297c <menu_control+0x3a>
    2962:	f8 01       	movw	r30, r16
    2964:	84 81       	ldd	r24, Z+4	; 0x04
    2966:	95 81       	ldd	r25, Z+5	; 0x05
    2968:	18 16       	cp	r1, r24
    296a:	19 06       	cpc	r1, r25
    296c:	ec f4       	brge	.+58     	; 0x29a8 <menu_control+0x66>
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	95 83       	std	Z+5, r25	; 0x05
    2972:	84 83       	std	Z+4, r24	; 0x04
    2974:	ee 24       	eor	r14, r14
    2976:	e3 94       	inc	r14
    2978:	f1 2c       	mov	r15, r1
    297a:	20 c0       	rjmp	.+64     	; 0x29bc <menu_control+0x7a>
    297c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <joystick_down>
    2980:	89 2b       	or	r24, r25
    2982:	b1 f0       	breq	.+44     	; 0x29b0 <menu_control+0x6e>
    2984:	f8 01       	movw	r30, r16
    2986:	c4 81       	ldd	r28, Z+4	; 0x04
    2988:	d5 81       	ldd	r29, Z+5	; 0x05
    298a:	c8 01       	movw	r24, r16
    298c:	0e 94 8e 14 	call	0x291c	; 0x291c <menu_count_options>
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	c8 17       	cp	r28, r24
    2994:	d9 07       	cpc	r29, r25
    2996:	7c f4       	brge	.+30     	; 0x29b6 <menu_control+0x74>
    2998:	21 96       	adiw	r28, 0x01	; 1
    299a:	f8 01       	movw	r30, r16
    299c:	d5 83       	std	Z+5, r29	; 0x05
    299e:	c4 83       	std	Z+4, r28	; 0x04
    29a0:	ee 24       	eor	r14, r14
    29a2:	e3 94       	inc	r14
    29a4:	f1 2c       	mov	r15, r1
    29a6:	0a c0       	rjmp	.+20     	; 0x29bc <menu_control+0x7a>
    29a8:	ee 24       	eor	r14, r14
    29aa:	e3 94       	inc	r14
    29ac:	f1 2c       	mov	r15, r1
    29ae:	06 c0       	rjmp	.+12     	; 0x29bc <menu_control+0x7a>
    29b0:	e1 2c       	mov	r14, r1
    29b2:	f1 2c       	mov	r15, r1
    29b4:	03 c0       	rjmp	.+6      	; 0x29bc <menu_control+0x7a>
    29b6:	ee 24       	eor	r14, r14
    29b8:	e3 94       	inc	r14
    29ba:	f1 2c       	mov	r15, r1
    29bc:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <joystick_right>
    29c0:	89 2b       	or	r24, r25
    29c2:	11 f1       	breq	.+68     	; 0x2a08 <menu_control+0xc6>
    29c4:	f8 01       	movw	r30, r16
    29c6:	c2 81       	ldd	r28, Z+2	; 0x02
    29c8:	d3 81       	ldd	r29, Z+3	; 0x03
    29ca:	20 97       	sbiw	r28, 0x00	; 0
    29cc:	e9 f0       	breq	.+58     	; 0x2a08 <menu_control+0xc6>
    29ce:	44 81       	ldd	r20, Z+4	; 0x04
    29d0:	55 81       	ldd	r21, Z+5	; 0x05
    29d2:	14 16       	cp	r1, r20
    29d4:	15 06       	cpc	r1, r21
    29d6:	54 f4       	brge	.+20     	; 0x29ec <menu_control+0xaa>
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	0c 80       	ldd	r0, Y+4	; 0x04
    29de:	dd 81       	ldd	r29, Y+5	; 0x05
    29e0:	c0 2d       	mov	r28, r0
    29e2:	2f 5f       	subi	r18, 0xFF	; 255
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	24 17       	cp	r18, r20
    29e8:	35 07       	cpc	r19, r21
    29ea:	c1 f7       	brne	.-16     	; 0x29dc <menu_control+0x9a>
    29ec:	ea 81       	ldd	r30, Y+2	; 0x02
    29ee:	fb 81       	ldd	r31, Y+3	; 0x03
    29f0:	30 97       	sbiw	r30, 0x00	; 0
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <menu_control+0xb4>
    29f4:	09 95       	icall
    29f6:	88 85       	ldd	r24, Y+8	; 0x08
    29f8:	99 85       	ldd	r25, Y+9	; 0x09
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <menu_control+0xbe>
    29fe:	c8 01       	movw	r24, r16
    2a00:	ff ef       	ldi	r31, 0xFF	; 255
    2a02:	ef 1a       	sub	r14, r31
    2a04:	ff 0a       	sbc	r15, r31
    2a06:	8c 01       	movw	r16, r24
    2a08:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <joystick_left>
    2a0c:	89 2b       	or	r24, r25
    2a0e:	51 f0       	breq	.+20     	; 0x2a24 <menu_control+0xe2>
    2a10:	f8 01       	movw	r30, r16
    2a12:	80 85       	ldd	r24, Z+8	; 0x08
    2a14:	91 85       	ldd	r25, Z+9	; 0x09
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <menu_control+0xda>
    2a1a:	c8 01       	movw	r24, r16
    2a1c:	ff ef       	ldi	r31, 0xFF	; 255
    2a1e:	ef 1a       	sub	r14, r31
    2a20:	ff 0a       	sbc	r15, r31
    2a22:	8c 01       	movw	r16, r24
    2a24:	f6 01       	movw	r30, r12
    2a26:	17 83       	std	Z+7, r17	; 0x07
    2a28:	06 83       	std	Z+6, r16	; 0x06
    2a2a:	8e e0       	ldi	r24, 0x0E	; 14
    2a2c:	ea ef       	ldi	r30, 0xFA	; 250
    2a2e:	f2 e0       	ldi	r31, 0x02	; 2
    2a30:	a2 e6       	ldi	r26, 0x62	; 98
    2a32:	b3 e0       	ldi	r27, 0x03	; 3
    2a34:	01 90       	ld	r0, Z+
    2a36:	0d 92       	st	X+, r0
    2a38:	8a 95       	dec	r24
    2a3a:	e1 f7       	brne	.-8      	; 0x2a34 <menu_control+0xf2>
    2a3c:	ef 28       	or	r14, r15
    2a3e:	39 f0       	breq	.+14     	; 0x2a4e <menu_control+0x10c>
    2a40:	0e 94 b1 11 	call	0x2362	; 0x2362 <oled_clear_SRAM>
    2a44:	f6 01       	movw	r30, r12
    2a46:	86 81       	ldd	r24, Z+6	; 0x06
    2a48:	97 81       	ldd	r25, Z+7	; 0x07
    2a4a:	0e 94 47 14 	call	0x288e	; 0x288e <menu_print>
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	ff 90       	pop	r15
    2a58:	ef 90       	pop	r14
    2a5a:	df 90       	pop	r13
    2a5c:	cf 90       	pop	r12
    2a5e:	08 95       	ret

00002a60 <__subsf3>:
    2a60:	50 58       	subi	r21, 0x80	; 128

00002a62 <__addsf3>:
    2a62:	bb 27       	eor	r27, r27
    2a64:	aa 27       	eor	r26, r26
    2a66:	0e d0       	rcall	.+28     	; 0x2a84 <__addsf3x>
    2a68:	75 c1       	rjmp	.+746    	; 0x2d54 <__fp_round>
    2a6a:	66 d1       	rcall	.+716    	; 0x2d38 <__fp_pscA>
    2a6c:	30 f0       	brcs	.+12     	; 0x2a7a <__addsf3+0x18>
    2a6e:	6b d1       	rcall	.+726    	; 0x2d46 <__fp_pscB>
    2a70:	20 f0       	brcs	.+8      	; 0x2a7a <__addsf3+0x18>
    2a72:	31 f4       	brne	.+12     	; 0x2a80 <__addsf3+0x1e>
    2a74:	9f 3f       	cpi	r25, 0xFF	; 255
    2a76:	11 f4       	brne	.+4      	; 0x2a7c <__addsf3+0x1a>
    2a78:	1e f4       	brtc	.+6      	; 0x2a80 <__addsf3+0x1e>
    2a7a:	5b c1       	rjmp	.+694    	; 0x2d32 <__fp_nan>
    2a7c:	0e f4       	brtc	.+2      	; 0x2a80 <__addsf3+0x1e>
    2a7e:	e0 95       	com	r30
    2a80:	e7 fb       	bst	r30, 7
    2a82:	51 c1       	rjmp	.+674    	; 0x2d26 <__fp_inf>

00002a84 <__addsf3x>:
    2a84:	e9 2f       	mov	r30, r25
    2a86:	77 d1       	rcall	.+750    	; 0x2d76 <__fp_split3>
    2a88:	80 f3       	brcs	.-32     	; 0x2a6a <__addsf3+0x8>
    2a8a:	ba 17       	cp	r27, r26
    2a8c:	62 07       	cpc	r22, r18
    2a8e:	73 07       	cpc	r23, r19
    2a90:	84 07       	cpc	r24, r20
    2a92:	95 07       	cpc	r25, r21
    2a94:	18 f0       	brcs	.+6      	; 0x2a9c <__addsf3x+0x18>
    2a96:	71 f4       	brne	.+28     	; 0x2ab4 <__addsf3x+0x30>
    2a98:	9e f5       	brtc	.+102    	; 0x2b00 <__addsf3x+0x7c>
    2a9a:	8f c1       	rjmp	.+798    	; 0x2dba <__fp_zero>
    2a9c:	0e f4       	brtc	.+2      	; 0x2aa0 <__addsf3x+0x1c>
    2a9e:	e0 95       	com	r30
    2aa0:	0b 2e       	mov	r0, r27
    2aa2:	ba 2f       	mov	r27, r26
    2aa4:	a0 2d       	mov	r26, r0
    2aa6:	0b 01       	movw	r0, r22
    2aa8:	b9 01       	movw	r22, r18
    2aaa:	90 01       	movw	r18, r0
    2aac:	0c 01       	movw	r0, r24
    2aae:	ca 01       	movw	r24, r20
    2ab0:	a0 01       	movw	r20, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	ff 27       	eor	r31, r31
    2ab6:	59 1b       	sub	r21, r25
    2ab8:	99 f0       	breq	.+38     	; 0x2ae0 <__addsf3x+0x5c>
    2aba:	59 3f       	cpi	r21, 0xF9	; 249
    2abc:	50 f4       	brcc	.+20     	; 0x2ad2 <__addsf3x+0x4e>
    2abe:	50 3e       	cpi	r21, 0xE0	; 224
    2ac0:	68 f1       	brcs	.+90     	; 0x2b1c <__addsf3x+0x98>
    2ac2:	1a 16       	cp	r1, r26
    2ac4:	f0 40       	sbci	r31, 0x00	; 0
    2ac6:	a2 2f       	mov	r26, r18
    2ac8:	23 2f       	mov	r18, r19
    2aca:	34 2f       	mov	r19, r20
    2acc:	44 27       	eor	r20, r20
    2ace:	58 5f       	subi	r21, 0xF8	; 248
    2ad0:	f3 cf       	rjmp	.-26     	; 0x2ab8 <__addsf3x+0x34>
    2ad2:	46 95       	lsr	r20
    2ad4:	37 95       	ror	r19
    2ad6:	27 95       	ror	r18
    2ad8:	a7 95       	ror	r26
    2ada:	f0 40       	sbci	r31, 0x00	; 0
    2adc:	53 95       	inc	r21
    2ade:	c9 f7       	brne	.-14     	; 0x2ad2 <__addsf3x+0x4e>
    2ae0:	7e f4       	brtc	.+30     	; 0x2b00 <__addsf3x+0x7c>
    2ae2:	1f 16       	cp	r1, r31
    2ae4:	ba 0b       	sbc	r27, r26
    2ae6:	62 0b       	sbc	r22, r18
    2ae8:	73 0b       	sbc	r23, r19
    2aea:	84 0b       	sbc	r24, r20
    2aec:	ba f0       	brmi	.+46     	; 0x2b1c <__addsf3x+0x98>
    2aee:	91 50       	subi	r25, 0x01	; 1
    2af0:	a1 f0       	breq	.+40     	; 0x2b1a <__addsf3x+0x96>
    2af2:	ff 0f       	add	r31, r31
    2af4:	bb 1f       	adc	r27, r27
    2af6:	66 1f       	adc	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	c2 f7       	brpl	.-16     	; 0x2aee <__addsf3x+0x6a>
    2afe:	0e c0       	rjmp	.+28     	; 0x2b1c <__addsf3x+0x98>
    2b00:	ba 0f       	add	r27, r26
    2b02:	62 1f       	adc	r22, r18
    2b04:	73 1f       	adc	r23, r19
    2b06:	84 1f       	adc	r24, r20
    2b08:	48 f4       	brcc	.+18     	; 0x2b1c <__addsf3x+0x98>
    2b0a:	87 95       	ror	r24
    2b0c:	77 95       	ror	r23
    2b0e:	67 95       	ror	r22
    2b10:	b7 95       	ror	r27
    2b12:	f7 95       	ror	r31
    2b14:	9e 3f       	cpi	r25, 0xFE	; 254
    2b16:	08 f0       	brcs	.+2      	; 0x2b1a <__addsf3x+0x96>
    2b18:	b3 cf       	rjmp	.-154    	; 0x2a80 <__addsf3+0x1e>
    2b1a:	93 95       	inc	r25
    2b1c:	88 0f       	add	r24, r24
    2b1e:	08 f0       	brcs	.+2      	; 0x2b22 <__addsf3x+0x9e>
    2b20:	99 27       	eor	r25, r25
    2b22:	ee 0f       	add	r30, r30
    2b24:	97 95       	ror	r25
    2b26:	87 95       	ror	r24
    2b28:	08 95       	ret

00002b2a <__cmpsf2>:
    2b2a:	d9 d0       	rcall	.+434    	; 0x2cde <__fp_cmp>
    2b2c:	08 f4       	brcc	.+2      	; 0x2b30 <__cmpsf2+0x6>
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	08 95       	ret

00002b32 <__divsf3>:
    2b32:	0c d0       	rcall	.+24     	; 0x2b4c <__divsf3x>
    2b34:	0f c1       	rjmp	.+542    	; 0x2d54 <__fp_round>
    2b36:	07 d1       	rcall	.+526    	; 0x2d46 <__fp_pscB>
    2b38:	40 f0       	brcs	.+16     	; 0x2b4a <__divsf3+0x18>
    2b3a:	fe d0       	rcall	.+508    	; 0x2d38 <__fp_pscA>
    2b3c:	30 f0       	brcs	.+12     	; 0x2b4a <__divsf3+0x18>
    2b3e:	21 f4       	brne	.+8      	; 0x2b48 <__divsf3+0x16>
    2b40:	5f 3f       	cpi	r21, 0xFF	; 255
    2b42:	19 f0       	breq	.+6      	; 0x2b4a <__divsf3+0x18>
    2b44:	f0 c0       	rjmp	.+480    	; 0x2d26 <__fp_inf>
    2b46:	51 11       	cpse	r21, r1
    2b48:	39 c1       	rjmp	.+626    	; 0x2dbc <__fp_szero>
    2b4a:	f3 c0       	rjmp	.+486    	; 0x2d32 <__fp_nan>

00002b4c <__divsf3x>:
    2b4c:	14 d1       	rcall	.+552    	; 0x2d76 <__fp_split3>
    2b4e:	98 f3       	brcs	.-26     	; 0x2b36 <__divsf3+0x4>

00002b50 <__divsf3_pse>:
    2b50:	99 23       	and	r25, r25
    2b52:	c9 f3       	breq	.-14     	; 0x2b46 <__divsf3+0x14>
    2b54:	55 23       	and	r21, r21
    2b56:	b1 f3       	breq	.-20     	; 0x2b44 <__divsf3+0x12>
    2b58:	95 1b       	sub	r25, r21
    2b5a:	55 0b       	sbc	r21, r21
    2b5c:	bb 27       	eor	r27, r27
    2b5e:	aa 27       	eor	r26, r26
    2b60:	62 17       	cp	r22, r18
    2b62:	73 07       	cpc	r23, r19
    2b64:	84 07       	cpc	r24, r20
    2b66:	38 f0       	brcs	.+14     	; 0x2b76 <__divsf3_pse+0x26>
    2b68:	9f 5f       	subi	r25, 0xFF	; 255
    2b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6c:	22 0f       	add	r18, r18
    2b6e:	33 1f       	adc	r19, r19
    2b70:	44 1f       	adc	r20, r20
    2b72:	aa 1f       	adc	r26, r26
    2b74:	a9 f3       	breq	.-22     	; 0x2b60 <__divsf3_pse+0x10>
    2b76:	33 d0       	rcall	.+102    	; 0x2bde <__divsf3_pse+0x8e>
    2b78:	0e 2e       	mov	r0, r30
    2b7a:	3a f0       	brmi	.+14     	; 0x2b8a <__divsf3_pse+0x3a>
    2b7c:	e0 e8       	ldi	r30, 0x80	; 128
    2b7e:	30 d0       	rcall	.+96     	; 0x2be0 <__divsf3_pse+0x90>
    2b80:	91 50       	subi	r25, 0x01	; 1
    2b82:	50 40       	sbci	r21, 0x00	; 0
    2b84:	e6 95       	lsr	r30
    2b86:	00 1c       	adc	r0, r0
    2b88:	ca f7       	brpl	.-14     	; 0x2b7c <__divsf3_pse+0x2c>
    2b8a:	29 d0       	rcall	.+82     	; 0x2bde <__divsf3_pse+0x8e>
    2b8c:	fe 2f       	mov	r31, r30
    2b8e:	27 d0       	rcall	.+78     	; 0x2bde <__divsf3_pse+0x8e>
    2b90:	66 0f       	add	r22, r22
    2b92:	77 1f       	adc	r23, r23
    2b94:	88 1f       	adc	r24, r24
    2b96:	bb 1f       	adc	r27, r27
    2b98:	26 17       	cp	r18, r22
    2b9a:	37 07       	cpc	r19, r23
    2b9c:	48 07       	cpc	r20, r24
    2b9e:	ab 07       	cpc	r26, r27
    2ba0:	b0 e8       	ldi	r27, 0x80	; 128
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <__divsf3_pse+0x56>
    2ba4:	bb 0b       	sbc	r27, r27
    2ba6:	80 2d       	mov	r24, r0
    2ba8:	bf 01       	movw	r22, r30
    2baa:	ff 27       	eor	r31, r31
    2bac:	93 58       	subi	r25, 0x83	; 131
    2bae:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb0:	2a f0       	brmi	.+10     	; 0x2bbc <__divsf3_pse+0x6c>
    2bb2:	9e 3f       	cpi	r25, 0xFE	; 254
    2bb4:	51 05       	cpc	r21, r1
    2bb6:	68 f0       	brcs	.+26     	; 0x2bd2 <__divsf3_pse+0x82>
    2bb8:	b6 c0       	rjmp	.+364    	; 0x2d26 <__fp_inf>
    2bba:	00 c1       	rjmp	.+512    	; 0x2dbc <__fp_szero>
    2bbc:	5f 3f       	cpi	r21, 0xFF	; 255
    2bbe:	ec f3       	brlt	.-6      	; 0x2bba <__divsf3_pse+0x6a>
    2bc0:	98 3e       	cpi	r25, 0xE8	; 232
    2bc2:	dc f3       	brlt	.-10     	; 0x2bba <__divsf3_pse+0x6a>
    2bc4:	86 95       	lsr	r24
    2bc6:	77 95       	ror	r23
    2bc8:	67 95       	ror	r22
    2bca:	b7 95       	ror	r27
    2bcc:	f7 95       	ror	r31
    2bce:	9f 5f       	subi	r25, 0xFF	; 255
    2bd0:	c9 f7       	brne	.-14     	; 0x2bc4 <__divsf3_pse+0x74>
    2bd2:	88 0f       	add	r24, r24
    2bd4:	91 1d       	adc	r25, r1
    2bd6:	96 95       	lsr	r25
    2bd8:	87 95       	ror	r24
    2bda:	97 f9       	bld	r25, 7
    2bdc:	08 95       	ret
    2bde:	e1 e0       	ldi	r30, 0x01	; 1
    2be0:	66 0f       	add	r22, r22
    2be2:	77 1f       	adc	r23, r23
    2be4:	88 1f       	adc	r24, r24
    2be6:	bb 1f       	adc	r27, r27
    2be8:	62 17       	cp	r22, r18
    2bea:	73 07       	cpc	r23, r19
    2bec:	84 07       	cpc	r24, r20
    2bee:	ba 07       	cpc	r27, r26
    2bf0:	20 f0       	brcs	.+8      	; 0x2bfa <__divsf3_pse+0xaa>
    2bf2:	62 1b       	sub	r22, r18
    2bf4:	73 0b       	sbc	r23, r19
    2bf6:	84 0b       	sbc	r24, r20
    2bf8:	ba 0b       	sbc	r27, r26
    2bfa:	ee 1f       	adc	r30, r30
    2bfc:	88 f7       	brcc	.-30     	; 0x2be0 <__divsf3_pse+0x90>
    2bfe:	e0 95       	com	r30
    2c00:	08 95       	ret

00002c02 <__fixsfsi>:
    2c02:	04 d0       	rcall	.+8      	; 0x2c0c <__fixunssfsi>
    2c04:	68 94       	set
    2c06:	b1 11       	cpse	r27, r1
    2c08:	d9 c0       	rjmp	.+434    	; 0x2dbc <__fp_szero>
    2c0a:	08 95       	ret

00002c0c <__fixunssfsi>:
    2c0c:	bc d0       	rcall	.+376    	; 0x2d86 <__fp_splitA>
    2c0e:	88 f0       	brcs	.+34     	; 0x2c32 <__fixunssfsi+0x26>
    2c10:	9f 57       	subi	r25, 0x7F	; 127
    2c12:	90 f0       	brcs	.+36     	; 0x2c38 <__fixunssfsi+0x2c>
    2c14:	b9 2f       	mov	r27, r25
    2c16:	99 27       	eor	r25, r25
    2c18:	b7 51       	subi	r27, 0x17	; 23
    2c1a:	a0 f0       	brcs	.+40     	; 0x2c44 <__fixunssfsi+0x38>
    2c1c:	d1 f0       	breq	.+52     	; 0x2c52 <__fixunssfsi+0x46>
    2c1e:	66 0f       	add	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	88 1f       	adc	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	1a f0       	brmi	.+6      	; 0x2c2e <__fixunssfsi+0x22>
    2c28:	ba 95       	dec	r27
    2c2a:	c9 f7       	brne	.-14     	; 0x2c1e <__fixunssfsi+0x12>
    2c2c:	12 c0       	rjmp	.+36     	; 0x2c52 <__fixunssfsi+0x46>
    2c2e:	b1 30       	cpi	r27, 0x01	; 1
    2c30:	81 f0       	breq	.+32     	; 0x2c52 <__fixunssfsi+0x46>
    2c32:	c3 d0       	rcall	.+390    	; 0x2dba <__fp_zero>
    2c34:	b1 e0       	ldi	r27, 0x01	; 1
    2c36:	08 95       	ret
    2c38:	c0 c0       	rjmp	.+384    	; 0x2dba <__fp_zero>
    2c3a:	67 2f       	mov	r22, r23
    2c3c:	78 2f       	mov	r23, r24
    2c3e:	88 27       	eor	r24, r24
    2c40:	b8 5f       	subi	r27, 0xF8	; 248
    2c42:	39 f0       	breq	.+14     	; 0x2c52 <__fixunssfsi+0x46>
    2c44:	b9 3f       	cpi	r27, 0xF9	; 249
    2c46:	cc f3       	brlt	.-14     	; 0x2c3a <__fixunssfsi+0x2e>
    2c48:	86 95       	lsr	r24
    2c4a:	77 95       	ror	r23
    2c4c:	67 95       	ror	r22
    2c4e:	b3 95       	inc	r27
    2c50:	d9 f7       	brne	.-10     	; 0x2c48 <__fixunssfsi+0x3c>
    2c52:	3e f4       	brtc	.+14     	; 0x2c62 <__fixunssfsi+0x56>
    2c54:	90 95       	com	r25
    2c56:	80 95       	com	r24
    2c58:	70 95       	com	r23
    2c5a:	61 95       	neg	r22
    2c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c60:	9f 4f       	sbci	r25, 0xFF	; 255
    2c62:	08 95       	ret

00002c64 <__floatunsisf>:
    2c64:	e8 94       	clt
    2c66:	09 c0       	rjmp	.+18     	; 0x2c7a <__floatsisf+0x12>

00002c68 <__floatsisf>:
    2c68:	97 fb       	bst	r25, 7
    2c6a:	3e f4       	brtc	.+14     	; 0x2c7a <__floatsisf+0x12>
    2c6c:	90 95       	com	r25
    2c6e:	80 95       	com	r24
    2c70:	70 95       	com	r23
    2c72:	61 95       	neg	r22
    2c74:	7f 4f       	sbci	r23, 0xFF	; 255
    2c76:	8f 4f       	sbci	r24, 0xFF	; 255
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	99 23       	and	r25, r25
    2c7c:	a9 f0       	breq	.+42     	; 0x2ca8 <__floatsisf+0x40>
    2c7e:	f9 2f       	mov	r31, r25
    2c80:	96 e9       	ldi	r25, 0x96	; 150
    2c82:	bb 27       	eor	r27, r27
    2c84:	93 95       	inc	r25
    2c86:	f6 95       	lsr	r31
    2c88:	87 95       	ror	r24
    2c8a:	77 95       	ror	r23
    2c8c:	67 95       	ror	r22
    2c8e:	b7 95       	ror	r27
    2c90:	f1 11       	cpse	r31, r1
    2c92:	f8 cf       	rjmp	.-16     	; 0x2c84 <__floatsisf+0x1c>
    2c94:	fa f4       	brpl	.+62     	; 0x2cd4 <__floatsisf+0x6c>
    2c96:	bb 0f       	add	r27, r27
    2c98:	11 f4       	brne	.+4      	; 0x2c9e <__floatsisf+0x36>
    2c9a:	60 ff       	sbrs	r22, 0
    2c9c:	1b c0       	rjmp	.+54     	; 0x2cd4 <__floatsisf+0x6c>
    2c9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca6:	16 c0       	rjmp	.+44     	; 0x2cd4 <__floatsisf+0x6c>
    2ca8:	88 23       	and	r24, r24
    2caa:	11 f0       	breq	.+4      	; 0x2cb0 <__floatsisf+0x48>
    2cac:	96 e9       	ldi	r25, 0x96	; 150
    2cae:	11 c0       	rjmp	.+34     	; 0x2cd2 <__floatsisf+0x6a>
    2cb0:	77 23       	and	r23, r23
    2cb2:	21 f0       	breq	.+8      	; 0x2cbc <__floatsisf+0x54>
    2cb4:	9e e8       	ldi	r25, 0x8E	; 142
    2cb6:	87 2f       	mov	r24, r23
    2cb8:	76 2f       	mov	r23, r22
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <__floatsisf+0x5e>
    2cbc:	66 23       	and	r22, r22
    2cbe:	71 f0       	breq	.+28     	; 0x2cdc <__floatsisf+0x74>
    2cc0:	96 e8       	ldi	r25, 0x86	; 134
    2cc2:	86 2f       	mov	r24, r22
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	2a f0       	brmi	.+10     	; 0x2cd4 <__floatsisf+0x6c>
    2cca:	9a 95       	dec	r25
    2ccc:	66 0f       	add	r22, r22
    2cce:	77 1f       	adc	r23, r23
    2cd0:	88 1f       	adc	r24, r24
    2cd2:	da f7       	brpl	.-10     	; 0x2cca <__floatsisf+0x62>
    2cd4:	88 0f       	add	r24, r24
    2cd6:	96 95       	lsr	r25
    2cd8:	87 95       	ror	r24
    2cda:	97 f9       	bld	r25, 7
    2cdc:	08 95       	ret

00002cde <__fp_cmp>:
    2cde:	99 0f       	add	r25, r25
    2ce0:	00 08       	sbc	r0, r0
    2ce2:	55 0f       	add	r21, r21
    2ce4:	aa 0b       	sbc	r26, r26
    2ce6:	e0 e8       	ldi	r30, 0x80	; 128
    2ce8:	fe ef       	ldi	r31, 0xFE	; 254
    2cea:	16 16       	cp	r1, r22
    2cec:	17 06       	cpc	r1, r23
    2cee:	e8 07       	cpc	r30, r24
    2cf0:	f9 07       	cpc	r31, r25
    2cf2:	c0 f0       	brcs	.+48     	; 0x2d24 <__fp_cmp+0x46>
    2cf4:	12 16       	cp	r1, r18
    2cf6:	13 06       	cpc	r1, r19
    2cf8:	e4 07       	cpc	r30, r20
    2cfa:	f5 07       	cpc	r31, r21
    2cfc:	98 f0       	brcs	.+38     	; 0x2d24 <__fp_cmp+0x46>
    2cfe:	62 1b       	sub	r22, r18
    2d00:	73 0b       	sbc	r23, r19
    2d02:	84 0b       	sbc	r24, r20
    2d04:	95 0b       	sbc	r25, r21
    2d06:	39 f4       	brne	.+14     	; 0x2d16 <__fp_cmp+0x38>
    2d08:	0a 26       	eor	r0, r26
    2d0a:	61 f0       	breq	.+24     	; 0x2d24 <__fp_cmp+0x46>
    2d0c:	23 2b       	or	r18, r19
    2d0e:	24 2b       	or	r18, r20
    2d10:	25 2b       	or	r18, r21
    2d12:	21 f4       	brne	.+8      	; 0x2d1c <__fp_cmp+0x3e>
    2d14:	08 95       	ret
    2d16:	0a 26       	eor	r0, r26
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <__fp_cmp+0x3e>
    2d1a:	a1 40       	sbci	r26, 0x01	; 1
    2d1c:	a6 95       	lsr	r26
    2d1e:	8f ef       	ldi	r24, 0xFF	; 255
    2d20:	81 1d       	adc	r24, r1
    2d22:	81 1d       	adc	r24, r1
    2d24:	08 95       	ret

00002d26 <__fp_inf>:
    2d26:	97 f9       	bld	r25, 7
    2d28:	9f 67       	ori	r25, 0x7F	; 127
    2d2a:	80 e8       	ldi	r24, 0x80	; 128
    2d2c:	70 e0       	ldi	r23, 0x00	; 0
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	08 95       	ret

00002d32 <__fp_nan>:
    2d32:	9f ef       	ldi	r25, 0xFF	; 255
    2d34:	80 ec       	ldi	r24, 0xC0	; 192
    2d36:	08 95       	ret

00002d38 <__fp_pscA>:
    2d38:	00 24       	eor	r0, r0
    2d3a:	0a 94       	dec	r0
    2d3c:	16 16       	cp	r1, r22
    2d3e:	17 06       	cpc	r1, r23
    2d40:	18 06       	cpc	r1, r24
    2d42:	09 06       	cpc	r0, r25
    2d44:	08 95       	ret

00002d46 <__fp_pscB>:
    2d46:	00 24       	eor	r0, r0
    2d48:	0a 94       	dec	r0
    2d4a:	12 16       	cp	r1, r18
    2d4c:	13 06       	cpc	r1, r19
    2d4e:	14 06       	cpc	r1, r20
    2d50:	05 06       	cpc	r0, r21
    2d52:	08 95       	ret

00002d54 <__fp_round>:
    2d54:	09 2e       	mov	r0, r25
    2d56:	03 94       	inc	r0
    2d58:	00 0c       	add	r0, r0
    2d5a:	11 f4       	brne	.+4      	; 0x2d60 <__fp_round+0xc>
    2d5c:	88 23       	and	r24, r24
    2d5e:	52 f0       	brmi	.+20     	; 0x2d74 <__fp_round+0x20>
    2d60:	bb 0f       	add	r27, r27
    2d62:	40 f4       	brcc	.+16     	; 0x2d74 <__fp_round+0x20>
    2d64:	bf 2b       	or	r27, r31
    2d66:	11 f4       	brne	.+4      	; 0x2d6c <__fp_round+0x18>
    2d68:	60 ff       	sbrs	r22, 0
    2d6a:	04 c0       	rjmp	.+8      	; 0x2d74 <__fp_round+0x20>
    2d6c:	6f 5f       	subi	r22, 0xFF	; 255
    2d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d70:	8f 4f       	sbci	r24, 0xFF	; 255
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	08 95       	ret

00002d76 <__fp_split3>:
    2d76:	57 fd       	sbrc	r21, 7
    2d78:	90 58       	subi	r25, 0x80	; 128
    2d7a:	44 0f       	add	r20, r20
    2d7c:	55 1f       	adc	r21, r21
    2d7e:	59 f0       	breq	.+22     	; 0x2d96 <__fp_splitA+0x10>
    2d80:	5f 3f       	cpi	r21, 0xFF	; 255
    2d82:	71 f0       	breq	.+28     	; 0x2da0 <__fp_splitA+0x1a>
    2d84:	47 95       	ror	r20

00002d86 <__fp_splitA>:
    2d86:	88 0f       	add	r24, r24
    2d88:	97 fb       	bst	r25, 7
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	61 f0       	breq	.+24     	; 0x2da6 <__fp_splitA+0x20>
    2d8e:	9f 3f       	cpi	r25, 0xFF	; 255
    2d90:	79 f0       	breq	.+30     	; 0x2db0 <__fp_splitA+0x2a>
    2d92:	87 95       	ror	r24
    2d94:	08 95       	ret
    2d96:	12 16       	cp	r1, r18
    2d98:	13 06       	cpc	r1, r19
    2d9a:	14 06       	cpc	r1, r20
    2d9c:	55 1f       	adc	r21, r21
    2d9e:	f2 cf       	rjmp	.-28     	; 0x2d84 <__fp_split3+0xe>
    2da0:	46 95       	lsr	r20
    2da2:	f1 df       	rcall	.-30     	; 0x2d86 <__fp_splitA>
    2da4:	08 c0       	rjmp	.+16     	; 0x2db6 <__fp_splitA+0x30>
    2da6:	16 16       	cp	r1, r22
    2da8:	17 06       	cpc	r1, r23
    2daa:	18 06       	cpc	r1, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	f1 cf       	rjmp	.-30     	; 0x2d92 <__fp_splitA+0xc>
    2db0:	86 95       	lsr	r24
    2db2:	71 05       	cpc	r23, r1
    2db4:	61 05       	cpc	r22, r1
    2db6:	08 94       	sec
    2db8:	08 95       	ret

00002dba <__fp_zero>:
    2dba:	e8 94       	clt

00002dbc <__fp_szero>:
    2dbc:	bb 27       	eor	r27, r27
    2dbe:	66 27       	eor	r22, r22
    2dc0:	77 27       	eor	r23, r23
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	97 f9       	bld	r25, 7
    2dc6:	08 95       	ret

00002dc8 <__gesf2>:
    2dc8:	8a df       	rcall	.-236    	; 0x2cde <__fp_cmp>
    2dca:	08 f4       	brcc	.+2      	; 0x2dce <__gesf2+0x6>
    2dcc:	8f ef       	ldi	r24, 0xFF	; 255
    2dce:	08 95       	ret

00002dd0 <__mulsf3>:
    2dd0:	0b d0       	rcall	.+22     	; 0x2de8 <__mulsf3x>
    2dd2:	c0 cf       	rjmp	.-128    	; 0x2d54 <__fp_round>
    2dd4:	b1 df       	rcall	.-158    	; 0x2d38 <__fp_pscA>
    2dd6:	28 f0       	brcs	.+10     	; 0x2de2 <__mulsf3+0x12>
    2dd8:	b6 df       	rcall	.-148    	; 0x2d46 <__fp_pscB>
    2dda:	18 f0       	brcs	.+6      	; 0x2de2 <__mulsf3+0x12>
    2ddc:	95 23       	and	r25, r21
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <__mulsf3+0x12>
    2de0:	a2 cf       	rjmp	.-188    	; 0x2d26 <__fp_inf>
    2de2:	a7 cf       	rjmp	.-178    	; 0x2d32 <__fp_nan>
    2de4:	11 24       	eor	r1, r1
    2de6:	ea cf       	rjmp	.-44     	; 0x2dbc <__fp_szero>

00002de8 <__mulsf3x>:
    2de8:	c6 df       	rcall	.-116    	; 0x2d76 <__fp_split3>
    2dea:	a0 f3       	brcs	.-24     	; 0x2dd4 <__mulsf3+0x4>

00002dec <__mulsf3_pse>:
    2dec:	95 9f       	mul	r25, r21
    2dee:	d1 f3       	breq	.-12     	; 0x2de4 <__mulsf3+0x14>
    2df0:	95 0f       	add	r25, r21
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	55 1f       	adc	r21, r21
    2df6:	62 9f       	mul	r22, r18
    2df8:	f0 01       	movw	r30, r0
    2dfa:	72 9f       	mul	r23, r18
    2dfc:	bb 27       	eor	r27, r27
    2dfe:	f0 0d       	add	r31, r0
    2e00:	b1 1d       	adc	r27, r1
    2e02:	63 9f       	mul	r22, r19
    2e04:	aa 27       	eor	r26, r26
    2e06:	f0 0d       	add	r31, r0
    2e08:	b1 1d       	adc	r27, r1
    2e0a:	aa 1f       	adc	r26, r26
    2e0c:	64 9f       	mul	r22, r20
    2e0e:	66 27       	eor	r22, r22
    2e10:	b0 0d       	add	r27, r0
    2e12:	a1 1d       	adc	r26, r1
    2e14:	66 1f       	adc	r22, r22
    2e16:	82 9f       	mul	r24, r18
    2e18:	22 27       	eor	r18, r18
    2e1a:	b0 0d       	add	r27, r0
    2e1c:	a1 1d       	adc	r26, r1
    2e1e:	62 1f       	adc	r22, r18
    2e20:	73 9f       	mul	r23, r19
    2e22:	b0 0d       	add	r27, r0
    2e24:	a1 1d       	adc	r26, r1
    2e26:	62 1f       	adc	r22, r18
    2e28:	83 9f       	mul	r24, r19
    2e2a:	a0 0d       	add	r26, r0
    2e2c:	61 1d       	adc	r22, r1
    2e2e:	22 1f       	adc	r18, r18
    2e30:	74 9f       	mul	r23, r20
    2e32:	33 27       	eor	r19, r19
    2e34:	a0 0d       	add	r26, r0
    2e36:	61 1d       	adc	r22, r1
    2e38:	23 1f       	adc	r18, r19
    2e3a:	84 9f       	mul	r24, r20
    2e3c:	60 0d       	add	r22, r0
    2e3e:	21 1d       	adc	r18, r1
    2e40:	82 2f       	mov	r24, r18
    2e42:	76 2f       	mov	r23, r22
    2e44:	6a 2f       	mov	r22, r26
    2e46:	11 24       	eor	r1, r1
    2e48:	9f 57       	subi	r25, 0x7F	; 127
    2e4a:	50 40       	sbci	r21, 0x00	; 0
    2e4c:	8a f0       	brmi	.+34     	; 0x2e70 <__mulsf3_pse+0x84>
    2e4e:	e1 f0       	breq	.+56     	; 0x2e88 <__mulsf3_pse+0x9c>
    2e50:	88 23       	and	r24, r24
    2e52:	4a f0       	brmi	.+18     	; 0x2e66 <__mulsf3_pse+0x7a>
    2e54:	ee 0f       	add	r30, r30
    2e56:	ff 1f       	adc	r31, r31
    2e58:	bb 1f       	adc	r27, r27
    2e5a:	66 1f       	adc	r22, r22
    2e5c:	77 1f       	adc	r23, r23
    2e5e:	88 1f       	adc	r24, r24
    2e60:	91 50       	subi	r25, 0x01	; 1
    2e62:	50 40       	sbci	r21, 0x00	; 0
    2e64:	a9 f7       	brne	.-22     	; 0x2e50 <__mulsf3_pse+0x64>
    2e66:	9e 3f       	cpi	r25, 0xFE	; 254
    2e68:	51 05       	cpc	r21, r1
    2e6a:	70 f0       	brcs	.+28     	; 0x2e88 <__mulsf3_pse+0x9c>
    2e6c:	5c cf       	rjmp	.-328    	; 0x2d26 <__fp_inf>
    2e6e:	a6 cf       	rjmp	.-180    	; 0x2dbc <__fp_szero>
    2e70:	5f 3f       	cpi	r21, 0xFF	; 255
    2e72:	ec f3       	brlt	.-6      	; 0x2e6e <__mulsf3_pse+0x82>
    2e74:	98 3e       	cpi	r25, 0xE8	; 232
    2e76:	dc f3       	brlt	.-10     	; 0x2e6e <__mulsf3_pse+0x82>
    2e78:	86 95       	lsr	r24
    2e7a:	77 95       	ror	r23
    2e7c:	67 95       	ror	r22
    2e7e:	b7 95       	ror	r27
    2e80:	f7 95       	ror	r31
    2e82:	e7 95       	ror	r30
    2e84:	9f 5f       	subi	r25, 0xFF	; 255
    2e86:	c1 f7       	brne	.-16     	; 0x2e78 <__mulsf3_pse+0x8c>
    2e88:	fe 2b       	or	r31, r30
    2e8a:	88 0f       	add	r24, r24
    2e8c:	91 1d       	adc	r25, r1
    2e8e:	96 95       	lsr	r25
    2e90:	87 95       	ror	r24
    2e92:	97 f9       	bld	r25, 7
    2e94:	08 95       	ret

00002e96 <__udivmodsi4>:
    2e96:	a1 e2       	ldi	r26, 0x21	; 33
    2e98:	1a 2e       	mov	r1, r26
    2e9a:	aa 1b       	sub	r26, r26
    2e9c:	bb 1b       	sub	r27, r27
    2e9e:	fd 01       	movw	r30, r26
    2ea0:	0d c0       	rjmp	.+26     	; 0x2ebc <__udivmodsi4_ep>

00002ea2 <__udivmodsi4_loop>:
    2ea2:	aa 1f       	adc	r26, r26
    2ea4:	bb 1f       	adc	r27, r27
    2ea6:	ee 1f       	adc	r30, r30
    2ea8:	ff 1f       	adc	r31, r31
    2eaa:	a2 17       	cp	r26, r18
    2eac:	b3 07       	cpc	r27, r19
    2eae:	e4 07       	cpc	r30, r20
    2eb0:	f5 07       	cpc	r31, r21
    2eb2:	20 f0       	brcs	.+8      	; 0x2ebc <__udivmodsi4_ep>
    2eb4:	a2 1b       	sub	r26, r18
    2eb6:	b3 0b       	sbc	r27, r19
    2eb8:	e4 0b       	sbc	r30, r20
    2eba:	f5 0b       	sbc	r31, r21

00002ebc <__udivmodsi4_ep>:
    2ebc:	66 1f       	adc	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	88 1f       	adc	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	1a 94       	dec	r1
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <__udivmodsi4_loop>
    2ec8:	60 95       	com	r22
    2eca:	70 95       	com	r23
    2ecc:	80 95       	com	r24
    2ece:	90 95       	com	r25
    2ed0:	9b 01       	movw	r18, r22
    2ed2:	ac 01       	movw	r20, r24
    2ed4:	bd 01       	movw	r22, r26
    2ed6:	cf 01       	movw	r24, r30
    2ed8:	08 95       	ret

00002eda <__divmodsi4>:
    2eda:	05 2e       	mov	r0, r21
    2edc:	97 fb       	bst	r25, 7
    2ede:	1e f4       	brtc	.+6      	; 0x2ee6 <__divmodsi4+0xc>
    2ee0:	00 94       	com	r0
    2ee2:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__negsi2>
    2ee6:	57 fd       	sbrc	r21, 7
    2ee8:	07 d0       	rcall	.+14     	; 0x2ef8 <__divmodsi4_neg2>
    2eea:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodsi4>
    2eee:	07 fc       	sbrc	r0, 7
    2ef0:	03 d0       	rcall	.+6      	; 0x2ef8 <__divmodsi4_neg2>
    2ef2:	4e f4       	brtc	.+18     	; 0x2f06 <__divmodsi4_exit>
    2ef4:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__negsi2>

00002ef8 <__divmodsi4_neg2>:
    2ef8:	50 95       	com	r21
    2efa:	40 95       	com	r20
    2efc:	30 95       	com	r19
    2efe:	21 95       	neg	r18
    2f00:	3f 4f       	sbci	r19, 0xFF	; 255
    2f02:	4f 4f       	sbci	r20, 0xFF	; 255
    2f04:	5f 4f       	sbci	r21, 0xFF	; 255

00002f06 <__divmodsi4_exit>:
    2f06:	08 95       	ret

00002f08 <__negsi2>:
    2f08:	90 95       	com	r25
    2f0a:	80 95       	com	r24
    2f0c:	70 95       	com	r23
    2f0e:	61 95       	neg	r22
    2f10:	7f 4f       	sbci	r23, 0xFF	; 255
    2f12:	8f 4f       	sbci	r24, 0xFF	; 255
    2f14:	9f 4f       	sbci	r25, 0xFF	; 255
    2f16:	08 95       	ret

00002f18 <sprintf>:
    2f18:	ae e0       	ldi	r26, 0x0E	; 14
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e2 e9       	ldi	r30, 0x92	; 146
    2f1e:	f7 e1       	ldi	r31, 0x17	; 23
    2f20:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__prologue_saves__+0x1c>
    2f24:	0d 89       	ldd	r16, Y+21	; 0x15
    2f26:	1e 89       	ldd	r17, Y+22	; 0x16
    2f28:	86 e0       	ldi	r24, 0x06	; 6
    2f2a:	8c 83       	std	Y+4, r24	; 0x04
    2f2c:	1a 83       	std	Y+2, r17	; 0x02
    2f2e:	09 83       	std	Y+1, r16	; 0x01
    2f30:	8f ef       	ldi	r24, 0xFF	; 255
    2f32:	9f e7       	ldi	r25, 0x7F	; 127
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
    2f38:	ae 01       	movw	r20, r28
    2f3a:	47 5e       	subi	r20, 0xE7	; 231
    2f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3e:	6f 89       	ldd	r22, Y+23	; 0x17
    2f40:	78 8d       	ldd	r23, Y+24	; 0x18
    2f42:	ce 01       	movw	r24, r28
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <vfprintf>
    2f4a:	ef 81       	ldd	r30, Y+7	; 0x07
    2f4c:	f8 85       	ldd	r31, Y+8	; 0x08
    2f4e:	e0 0f       	add	r30, r16
    2f50:	f1 1f       	adc	r31, r17
    2f52:	10 82       	st	Z, r1
    2f54:	2e 96       	adiw	r28, 0x0e	; 14
    2f56:	e4 e0       	ldi	r30, 0x04	; 4
    2f58:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__epilogue_restores__+0x1c>

00002f5c <vfprintf>:
    2f5c:	ac e0       	ldi	r26, 0x0C	; 12
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e4 eb       	ldi	r30, 0xB4	; 180
    2f62:	f7 e1       	ldi	r31, 0x17	; 23
    2f64:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__prologue_saves__>
    2f68:	7c 01       	movw	r14, r24
    2f6a:	6b 01       	movw	r12, r22
    2f6c:	8a 01       	movw	r16, r20
    2f6e:	fc 01       	movw	r30, r24
    2f70:	17 82       	std	Z+7, r1	; 0x07
    2f72:	16 82       	std	Z+6, r1	; 0x06
    2f74:	83 81       	ldd	r24, Z+3	; 0x03
    2f76:	81 ff       	sbrs	r24, 1
    2f78:	bd c1       	rjmp	.+890    	; 0x32f4 <vfprintf+0x398>
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	4c 01       	movw	r8, r24
    2f80:	f7 01       	movw	r30, r14
    2f82:	93 81       	ldd	r25, Z+3	; 0x03
    2f84:	f6 01       	movw	r30, r12
    2f86:	93 fd       	sbrc	r25, 3
    2f88:	85 91       	lpm	r24, Z+
    2f8a:	93 ff       	sbrs	r25, 3
    2f8c:	81 91       	ld	r24, Z+
    2f8e:	6f 01       	movw	r12, r30
    2f90:	88 23       	and	r24, r24
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <vfprintf+0x3a>
    2f94:	ab c1       	rjmp	.+854    	; 0x32ec <vfprintf+0x390>
    2f96:	85 32       	cpi	r24, 0x25	; 37
    2f98:	39 f4       	brne	.+14     	; 0x2fa8 <vfprintf+0x4c>
    2f9a:	93 fd       	sbrc	r25, 3
    2f9c:	85 91       	lpm	r24, Z+
    2f9e:	93 ff       	sbrs	r25, 3
    2fa0:	81 91       	ld	r24, Z+
    2fa2:	6f 01       	movw	r12, r30
    2fa4:	85 32       	cpi	r24, 0x25	; 37
    2fa6:	29 f4       	brne	.+10     	; 0x2fb2 <vfprintf+0x56>
    2fa8:	b7 01       	movw	r22, r14
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    2fb0:	e7 cf       	rjmp	.-50     	; 0x2f80 <vfprintf+0x24>
    2fb2:	51 2c       	mov	r5, r1
    2fb4:	31 2c       	mov	r3, r1
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	20 32       	cpi	r18, 0x20	; 32
    2fba:	a0 f4       	brcc	.+40     	; 0x2fe4 <vfprintf+0x88>
    2fbc:	8b 32       	cpi	r24, 0x2B	; 43
    2fbe:	69 f0       	breq	.+26     	; 0x2fda <vfprintf+0x7e>
    2fc0:	30 f4       	brcc	.+12     	; 0x2fce <vfprintf+0x72>
    2fc2:	80 32       	cpi	r24, 0x20	; 32
    2fc4:	59 f0       	breq	.+22     	; 0x2fdc <vfprintf+0x80>
    2fc6:	83 32       	cpi	r24, 0x23	; 35
    2fc8:	69 f4       	brne	.+26     	; 0x2fe4 <vfprintf+0x88>
    2fca:	20 61       	ori	r18, 0x10	; 16
    2fcc:	2c c0       	rjmp	.+88     	; 0x3026 <vfprintf+0xca>
    2fce:	8d 32       	cpi	r24, 0x2D	; 45
    2fd0:	39 f0       	breq	.+14     	; 0x2fe0 <vfprintf+0x84>
    2fd2:	80 33       	cpi	r24, 0x30	; 48
    2fd4:	39 f4       	brne	.+14     	; 0x2fe4 <vfprintf+0x88>
    2fd6:	21 60       	ori	r18, 0x01	; 1
    2fd8:	26 c0       	rjmp	.+76     	; 0x3026 <vfprintf+0xca>
    2fda:	22 60       	ori	r18, 0x02	; 2
    2fdc:	24 60       	ori	r18, 0x04	; 4
    2fde:	23 c0       	rjmp	.+70     	; 0x3026 <vfprintf+0xca>
    2fe0:	28 60       	ori	r18, 0x08	; 8
    2fe2:	21 c0       	rjmp	.+66     	; 0x3026 <vfprintf+0xca>
    2fe4:	27 fd       	sbrc	r18, 7
    2fe6:	27 c0       	rjmp	.+78     	; 0x3036 <vfprintf+0xda>
    2fe8:	30 ed       	ldi	r19, 0xD0	; 208
    2fea:	38 0f       	add	r19, r24
    2fec:	3a 30       	cpi	r19, 0x0A	; 10
    2fee:	78 f4       	brcc	.+30     	; 0x300e <vfprintf+0xb2>
    2ff0:	26 ff       	sbrs	r18, 6
    2ff2:	06 c0       	rjmp	.+12     	; 0x3000 <vfprintf+0xa4>
    2ff4:	fa e0       	ldi	r31, 0x0A	; 10
    2ff6:	5f 9e       	mul	r5, r31
    2ff8:	30 0d       	add	r19, r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	53 2e       	mov	r5, r19
    2ffe:	13 c0       	rjmp	.+38     	; 0x3026 <vfprintf+0xca>
    3000:	8a e0       	ldi	r24, 0x0A	; 10
    3002:	38 9e       	mul	r3, r24
    3004:	30 0d       	add	r19, r0
    3006:	11 24       	eor	r1, r1
    3008:	33 2e       	mov	r3, r19
    300a:	20 62       	ori	r18, 0x20	; 32
    300c:	0c c0       	rjmp	.+24     	; 0x3026 <vfprintf+0xca>
    300e:	8e 32       	cpi	r24, 0x2E	; 46
    3010:	21 f4       	brne	.+8      	; 0x301a <vfprintf+0xbe>
    3012:	26 fd       	sbrc	r18, 6
    3014:	6b c1       	rjmp	.+726    	; 0x32ec <vfprintf+0x390>
    3016:	20 64       	ori	r18, 0x40	; 64
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <vfprintf+0xca>
    301a:	8c 36       	cpi	r24, 0x6C	; 108
    301c:	11 f4       	brne	.+4      	; 0x3022 <vfprintf+0xc6>
    301e:	20 68       	ori	r18, 0x80	; 128
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <vfprintf+0xca>
    3022:	88 36       	cpi	r24, 0x68	; 104
    3024:	41 f4       	brne	.+16     	; 0x3036 <vfprintf+0xda>
    3026:	f6 01       	movw	r30, r12
    3028:	93 fd       	sbrc	r25, 3
    302a:	85 91       	lpm	r24, Z+
    302c:	93 ff       	sbrs	r25, 3
    302e:	81 91       	ld	r24, Z+
    3030:	6f 01       	movw	r12, r30
    3032:	81 11       	cpse	r24, r1
    3034:	c1 cf       	rjmp	.-126    	; 0x2fb8 <vfprintf+0x5c>
    3036:	98 2f       	mov	r25, r24
    3038:	9f 7d       	andi	r25, 0xDF	; 223
    303a:	95 54       	subi	r25, 0x45	; 69
    303c:	93 30       	cpi	r25, 0x03	; 3
    303e:	28 f4       	brcc	.+10     	; 0x304a <vfprintf+0xee>
    3040:	0c 5f       	subi	r16, 0xFC	; 252
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
    3044:	ff e3       	ldi	r31, 0x3F	; 63
    3046:	f9 83       	std	Y+1, r31	; 0x01
    3048:	0d c0       	rjmp	.+26     	; 0x3064 <vfprintf+0x108>
    304a:	83 36       	cpi	r24, 0x63	; 99
    304c:	31 f0       	breq	.+12     	; 0x305a <vfprintf+0xfe>
    304e:	83 37       	cpi	r24, 0x73	; 115
    3050:	71 f0       	breq	.+28     	; 0x306e <vfprintf+0x112>
    3052:	83 35       	cpi	r24, 0x53	; 83
    3054:	09 f0       	breq	.+2      	; 0x3058 <vfprintf+0xfc>
    3056:	5b c0       	rjmp	.+182    	; 0x310e <vfprintf+0x1b2>
    3058:	22 c0       	rjmp	.+68     	; 0x309e <vfprintf+0x142>
    305a:	f8 01       	movw	r30, r16
    305c:	80 81       	ld	r24, Z
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	0e 5f       	subi	r16, 0xFE	; 254
    3062:	1f 4f       	sbci	r17, 0xFF	; 255
    3064:	44 24       	eor	r4, r4
    3066:	43 94       	inc	r4
    3068:	51 2c       	mov	r5, r1
    306a:	54 01       	movw	r10, r8
    306c:	15 c0       	rjmp	.+42     	; 0x3098 <vfprintf+0x13c>
    306e:	38 01       	movw	r6, r16
    3070:	f2 e0       	ldi	r31, 0x02	; 2
    3072:	6f 0e       	add	r6, r31
    3074:	71 1c       	adc	r7, r1
    3076:	f8 01       	movw	r30, r16
    3078:	a0 80       	ld	r10, Z
    307a:	b1 80       	ldd	r11, Z+1	; 0x01
    307c:	26 ff       	sbrs	r18, 6
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <vfprintf+0x12a>
    3080:	65 2d       	mov	r22, r5
    3082:	70 e0       	ldi	r23, 0x00	; 0
    3084:	02 c0       	rjmp	.+4      	; 0x308a <vfprintf+0x12e>
    3086:	6f ef       	ldi	r22, 0xFF	; 255
    3088:	7f ef       	ldi	r23, 0xFF	; 255
    308a:	c5 01       	movw	r24, r10
    308c:	2c 87       	std	Y+12, r18	; 0x0c
    308e:	0e 94 8b 19 	call	0x3316	; 0x3316 <strnlen>
    3092:	2c 01       	movw	r4, r24
    3094:	83 01       	movw	r16, r6
    3096:	2c 85       	ldd	r18, Y+12	; 0x0c
    3098:	2f 77       	andi	r18, 0x7F	; 127
    309a:	22 2e       	mov	r2, r18
    309c:	17 c0       	rjmp	.+46     	; 0x30cc <vfprintf+0x170>
    309e:	38 01       	movw	r6, r16
    30a0:	f2 e0       	ldi	r31, 0x02	; 2
    30a2:	6f 0e       	add	r6, r31
    30a4:	71 1c       	adc	r7, r1
    30a6:	f8 01       	movw	r30, r16
    30a8:	a0 80       	ld	r10, Z
    30aa:	b1 80       	ldd	r11, Z+1	; 0x01
    30ac:	26 ff       	sbrs	r18, 6
    30ae:	03 c0       	rjmp	.+6      	; 0x30b6 <vfprintf+0x15a>
    30b0:	65 2d       	mov	r22, r5
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <vfprintf+0x15e>
    30b6:	6f ef       	ldi	r22, 0xFF	; 255
    30b8:	7f ef       	ldi	r23, 0xFF	; 255
    30ba:	c5 01       	movw	r24, r10
    30bc:	2c 87       	std	Y+12, r18	; 0x0c
    30be:	0e 94 80 19 	call	0x3300	; 0x3300 <strnlen_P>
    30c2:	2c 01       	movw	r4, r24
    30c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    30c6:	20 68       	ori	r18, 0x80	; 128
    30c8:	22 2e       	mov	r2, r18
    30ca:	83 01       	movw	r16, r6
    30cc:	23 fc       	sbrc	r2, 3
    30ce:	1b c0       	rjmp	.+54     	; 0x3106 <vfprintf+0x1aa>
    30d0:	83 2d       	mov	r24, r3
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	48 16       	cp	r4, r24
    30d6:	59 06       	cpc	r5, r25
    30d8:	b0 f4       	brcc	.+44     	; 0x3106 <vfprintf+0x1aa>
    30da:	b7 01       	movw	r22, r14
    30dc:	80 e2       	ldi	r24, 0x20	; 32
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    30e4:	3a 94       	dec	r3
    30e6:	f4 cf       	rjmp	.-24     	; 0x30d0 <vfprintf+0x174>
    30e8:	f5 01       	movw	r30, r10
    30ea:	27 fc       	sbrc	r2, 7
    30ec:	85 91       	lpm	r24, Z+
    30ee:	27 fe       	sbrs	r2, 7
    30f0:	81 91       	ld	r24, Z+
    30f2:	5f 01       	movw	r10, r30
    30f4:	b7 01       	movw	r22, r14
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    30fc:	31 10       	cpse	r3, r1
    30fe:	3a 94       	dec	r3
    3100:	f1 e0       	ldi	r31, 0x01	; 1
    3102:	4f 1a       	sub	r4, r31
    3104:	51 08       	sbc	r5, r1
    3106:	41 14       	cp	r4, r1
    3108:	51 04       	cpc	r5, r1
    310a:	71 f7       	brne	.-36     	; 0x30e8 <vfprintf+0x18c>
    310c:	e5 c0       	rjmp	.+458    	; 0x32d8 <vfprintf+0x37c>
    310e:	84 36       	cpi	r24, 0x64	; 100
    3110:	11 f0       	breq	.+4      	; 0x3116 <vfprintf+0x1ba>
    3112:	89 36       	cpi	r24, 0x69	; 105
    3114:	39 f5       	brne	.+78     	; 0x3164 <vfprintf+0x208>
    3116:	f8 01       	movw	r30, r16
    3118:	27 ff       	sbrs	r18, 7
    311a:	07 c0       	rjmp	.+14     	; 0x312a <vfprintf+0x1ce>
    311c:	60 81       	ld	r22, Z
    311e:	71 81       	ldd	r23, Z+1	; 0x01
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	0c 5f       	subi	r16, 0xFC	; 252
    3126:	1f 4f       	sbci	r17, 0xFF	; 255
    3128:	08 c0       	rjmp	.+16     	; 0x313a <vfprintf+0x1de>
    312a:	60 81       	ld	r22, Z
    312c:	71 81       	ldd	r23, Z+1	; 0x01
    312e:	88 27       	eor	r24, r24
    3130:	77 fd       	sbrc	r23, 7
    3132:	80 95       	com	r24
    3134:	98 2f       	mov	r25, r24
    3136:	0e 5f       	subi	r16, 0xFE	; 254
    3138:	1f 4f       	sbci	r17, 0xFF	; 255
    313a:	2f 76       	andi	r18, 0x6F	; 111
    313c:	b2 2e       	mov	r11, r18
    313e:	97 ff       	sbrs	r25, 7
    3140:	09 c0       	rjmp	.+18     	; 0x3154 <vfprintf+0x1f8>
    3142:	90 95       	com	r25
    3144:	80 95       	com	r24
    3146:	70 95       	com	r23
    3148:	61 95       	neg	r22
    314a:	7f 4f       	sbci	r23, 0xFF	; 255
    314c:	8f 4f       	sbci	r24, 0xFF	; 255
    314e:	9f 4f       	sbci	r25, 0xFF	; 255
    3150:	20 68       	ori	r18, 0x80	; 128
    3152:	b2 2e       	mov	r11, r18
    3154:	2a e0       	ldi	r18, 0x0A	; 10
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	a4 01       	movw	r20, r8
    315a:	0e 94 c8 19 	call	0x3390	; 0x3390 <__ultoa_invert>
    315e:	a8 2e       	mov	r10, r24
    3160:	a8 18       	sub	r10, r8
    3162:	44 c0       	rjmp	.+136    	; 0x31ec <vfprintf+0x290>
    3164:	85 37       	cpi	r24, 0x75	; 117
    3166:	29 f4       	brne	.+10     	; 0x3172 <vfprintf+0x216>
    3168:	2f 7e       	andi	r18, 0xEF	; 239
    316a:	b2 2e       	mov	r11, r18
    316c:	2a e0       	ldi	r18, 0x0A	; 10
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	25 c0       	rjmp	.+74     	; 0x31bc <vfprintf+0x260>
    3172:	f2 2f       	mov	r31, r18
    3174:	f9 7f       	andi	r31, 0xF9	; 249
    3176:	bf 2e       	mov	r11, r31
    3178:	8f 36       	cpi	r24, 0x6F	; 111
    317a:	c1 f0       	breq	.+48     	; 0x31ac <vfprintf+0x250>
    317c:	18 f4       	brcc	.+6      	; 0x3184 <vfprintf+0x228>
    317e:	88 35       	cpi	r24, 0x58	; 88
    3180:	79 f0       	breq	.+30     	; 0x31a0 <vfprintf+0x244>
    3182:	b4 c0       	rjmp	.+360    	; 0x32ec <vfprintf+0x390>
    3184:	80 37       	cpi	r24, 0x70	; 112
    3186:	19 f0       	breq	.+6      	; 0x318e <vfprintf+0x232>
    3188:	88 37       	cpi	r24, 0x78	; 120
    318a:	21 f0       	breq	.+8      	; 0x3194 <vfprintf+0x238>
    318c:	af c0       	rjmp	.+350    	; 0x32ec <vfprintf+0x390>
    318e:	2f 2f       	mov	r18, r31
    3190:	20 61       	ori	r18, 0x10	; 16
    3192:	b2 2e       	mov	r11, r18
    3194:	b4 fe       	sbrs	r11, 4
    3196:	0d c0       	rjmp	.+26     	; 0x31b2 <vfprintf+0x256>
    3198:	8b 2d       	mov	r24, r11
    319a:	84 60       	ori	r24, 0x04	; 4
    319c:	b8 2e       	mov	r11, r24
    319e:	09 c0       	rjmp	.+18     	; 0x31b2 <vfprintf+0x256>
    31a0:	24 ff       	sbrs	r18, 4
    31a2:	0a c0       	rjmp	.+20     	; 0x31b8 <vfprintf+0x25c>
    31a4:	9f 2f       	mov	r25, r31
    31a6:	96 60       	ori	r25, 0x06	; 6
    31a8:	b9 2e       	mov	r11, r25
    31aa:	06 c0       	rjmp	.+12     	; 0x31b8 <vfprintf+0x25c>
    31ac:	28 e0       	ldi	r18, 0x08	; 8
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	05 c0       	rjmp	.+10     	; 0x31bc <vfprintf+0x260>
    31b2:	20 e1       	ldi	r18, 0x10	; 16
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <vfprintf+0x260>
    31b8:	20 e1       	ldi	r18, 0x10	; 16
    31ba:	32 e0       	ldi	r19, 0x02	; 2
    31bc:	f8 01       	movw	r30, r16
    31be:	b7 fe       	sbrs	r11, 7
    31c0:	07 c0       	rjmp	.+14     	; 0x31d0 <vfprintf+0x274>
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	0c 5f       	subi	r16, 0xFC	; 252
    31cc:	1f 4f       	sbci	r17, 0xFF	; 255
    31ce:	06 c0       	rjmp	.+12     	; 0x31dc <vfprintf+0x280>
    31d0:	60 81       	ld	r22, Z
    31d2:	71 81       	ldd	r23, Z+1	; 0x01
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e 5f       	subi	r16, 0xFE	; 254
    31da:	1f 4f       	sbci	r17, 0xFF	; 255
    31dc:	a4 01       	movw	r20, r8
    31de:	0e 94 c8 19 	call	0x3390	; 0x3390 <__ultoa_invert>
    31e2:	a8 2e       	mov	r10, r24
    31e4:	a8 18       	sub	r10, r8
    31e6:	fb 2d       	mov	r31, r11
    31e8:	ff 77       	andi	r31, 0x7F	; 127
    31ea:	bf 2e       	mov	r11, r31
    31ec:	b6 fe       	sbrs	r11, 6
    31ee:	0b c0       	rjmp	.+22     	; 0x3206 <vfprintf+0x2aa>
    31f0:	2b 2d       	mov	r18, r11
    31f2:	2e 7f       	andi	r18, 0xFE	; 254
    31f4:	a5 14       	cp	r10, r5
    31f6:	50 f4       	brcc	.+20     	; 0x320c <vfprintf+0x2b0>
    31f8:	b4 fe       	sbrs	r11, 4
    31fa:	0a c0       	rjmp	.+20     	; 0x3210 <vfprintf+0x2b4>
    31fc:	b2 fc       	sbrc	r11, 2
    31fe:	08 c0       	rjmp	.+16     	; 0x3210 <vfprintf+0x2b4>
    3200:	2b 2d       	mov	r18, r11
    3202:	2e 7e       	andi	r18, 0xEE	; 238
    3204:	05 c0       	rjmp	.+10     	; 0x3210 <vfprintf+0x2b4>
    3206:	7a 2c       	mov	r7, r10
    3208:	2b 2d       	mov	r18, r11
    320a:	03 c0       	rjmp	.+6      	; 0x3212 <vfprintf+0x2b6>
    320c:	7a 2c       	mov	r7, r10
    320e:	01 c0       	rjmp	.+2      	; 0x3212 <vfprintf+0x2b6>
    3210:	75 2c       	mov	r7, r5
    3212:	24 ff       	sbrs	r18, 4
    3214:	0d c0       	rjmp	.+26     	; 0x3230 <vfprintf+0x2d4>
    3216:	fe 01       	movw	r30, r28
    3218:	ea 0d       	add	r30, r10
    321a:	f1 1d       	adc	r31, r1
    321c:	80 81       	ld	r24, Z
    321e:	80 33       	cpi	r24, 0x30	; 48
    3220:	11 f4       	brne	.+4      	; 0x3226 <vfprintf+0x2ca>
    3222:	29 7e       	andi	r18, 0xE9	; 233
    3224:	09 c0       	rjmp	.+18     	; 0x3238 <vfprintf+0x2dc>
    3226:	22 ff       	sbrs	r18, 2
    3228:	06 c0       	rjmp	.+12     	; 0x3236 <vfprintf+0x2da>
    322a:	73 94       	inc	r7
    322c:	73 94       	inc	r7
    322e:	04 c0       	rjmp	.+8      	; 0x3238 <vfprintf+0x2dc>
    3230:	82 2f       	mov	r24, r18
    3232:	86 78       	andi	r24, 0x86	; 134
    3234:	09 f0       	breq	.+2      	; 0x3238 <vfprintf+0x2dc>
    3236:	73 94       	inc	r7
    3238:	23 fd       	sbrc	r18, 3
    323a:	13 c0       	rjmp	.+38     	; 0x3262 <vfprintf+0x306>
    323c:	20 ff       	sbrs	r18, 0
    323e:	06 c0       	rjmp	.+12     	; 0x324c <vfprintf+0x2f0>
    3240:	5a 2c       	mov	r5, r10
    3242:	73 14       	cp	r7, r3
    3244:	18 f4       	brcc	.+6      	; 0x324c <vfprintf+0x2f0>
    3246:	53 0c       	add	r5, r3
    3248:	57 18       	sub	r5, r7
    324a:	73 2c       	mov	r7, r3
    324c:	73 14       	cp	r7, r3
    324e:	68 f4       	brcc	.+26     	; 0x326a <vfprintf+0x30e>
    3250:	b7 01       	movw	r22, r14
    3252:	80 e2       	ldi	r24, 0x20	; 32
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	2c 87       	std	Y+12, r18	; 0x0c
    3258:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    325c:	73 94       	inc	r7
    325e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3260:	f5 cf       	rjmp	.-22     	; 0x324c <vfprintf+0x2f0>
    3262:	73 14       	cp	r7, r3
    3264:	10 f4       	brcc	.+4      	; 0x326a <vfprintf+0x30e>
    3266:	37 18       	sub	r3, r7
    3268:	01 c0       	rjmp	.+2      	; 0x326c <vfprintf+0x310>
    326a:	31 2c       	mov	r3, r1
    326c:	24 ff       	sbrs	r18, 4
    326e:	12 c0       	rjmp	.+36     	; 0x3294 <vfprintf+0x338>
    3270:	b7 01       	movw	r22, r14
    3272:	80 e3       	ldi	r24, 0x30	; 48
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	2c 87       	std	Y+12, r18	; 0x0c
    3278:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    327c:	2c 85       	ldd	r18, Y+12	; 0x0c
    327e:	22 ff       	sbrs	r18, 2
    3280:	17 c0       	rjmp	.+46     	; 0x32b0 <vfprintf+0x354>
    3282:	21 ff       	sbrs	r18, 1
    3284:	03 c0       	rjmp	.+6      	; 0x328c <vfprintf+0x330>
    3286:	88 e5       	ldi	r24, 0x58	; 88
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <vfprintf+0x334>
    328c:	88 e7       	ldi	r24, 0x78	; 120
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	b7 01       	movw	r22, r14
    3292:	0c c0       	rjmp	.+24     	; 0x32ac <vfprintf+0x350>
    3294:	82 2f       	mov	r24, r18
    3296:	86 78       	andi	r24, 0x86	; 134
    3298:	59 f0       	breq	.+22     	; 0x32b0 <vfprintf+0x354>
    329a:	21 fd       	sbrc	r18, 1
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <vfprintf+0x346>
    329e:	80 e2       	ldi	r24, 0x20	; 32
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <vfprintf+0x348>
    32a2:	8b e2       	ldi	r24, 0x2B	; 43
    32a4:	27 fd       	sbrc	r18, 7
    32a6:	8d e2       	ldi	r24, 0x2D	; 45
    32a8:	b7 01       	movw	r22, r14
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    32b0:	a5 14       	cp	r10, r5
    32b2:	38 f4       	brcc	.+14     	; 0x32c2 <vfprintf+0x366>
    32b4:	b7 01       	movw	r22, r14
    32b6:	80 e3       	ldi	r24, 0x30	; 48
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    32be:	5a 94       	dec	r5
    32c0:	f7 cf       	rjmp	.-18     	; 0x32b0 <vfprintf+0x354>
    32c2:	aa 94       	dec	r10
    32c4:	f4 01       	movw	r30, r8
    32c6:	ea 0d       	add	r30, r10
    32c8:	f1 1d       	adc	r31, r1
    32ca:	80 81       	ld	r24, Z
    32cc:	b7 01       	movw	r22, r14
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    32d4:	a1 10       	cpse	r10, r1
    32d6:	f5 cf       	rjmp	.-22     	; 0x32c2 <vfprintf+0x366>
    32d8:	33 20       	and	r3, r3
    32da:	09 f4       	brne	.+2      	; 0x32de <vfprintf+0x382>
    32dc:	51 ce       	rjmp	.-862    	; 0x2f80 <vfprintf+0x24>
    32de:	b7 01       	movw	r22, r14
    32e0:	80 e2       	ldi	r24, 0x20	; 32
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 96 19 	call	0x332c	; 0x332c <fputc>
    32e8:	3a 94       	dec	r3
    32ea:	f6 cf       	rjmp	.-20     	; 0x32d8 <vfprintf+0x37c>
    32ec:	f7 01       	movw	r30, r14
    32ee:	86 81       	ldd	r24, Z+6	; 0x06
    32f0:	97 81       	ldd	r25, Z+7	; 0x07
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <vfprintf+0x39c>
    32f4:	8f ef       	ldi	r24, 0xFF	; 255
    32f6:	9f ef       	ldi	r25, 0xFF	; 255
    32f8:	2c 96       	adiw	r28, 0x0c	; 12
    32fa:	e2 e1       	ldi	r30, 0x12	; 18
    32fc:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__epilogue_restores__>

00003300 <strnlen_P>:
    3300:	fc 01       	movw	r30, r24
    3302:	05 90       	lpm	r0, Z+
    3304:	61 50       	subi	r22, 0x01	; 1
    3306:	70 40       	sbci	r23, 0x00	; 0
    3308:	01 10       	cpse	r0, r1
    330a:	d8 f7       	brcc	.-10     	; 0x3302 <strnlen_P+0x2>
    330c:	80 95       	com	r24
    330e:	90 95       	com	r25
    3310:	8e 0f       	add	r24, r30
    3312:	9f 1f       	adc	r25, r31
    3314:	08 95       	ret

00003316 <strnlen>:
    3316:	fc 01       	movw	r30, r24
    3318:	61 50       	subi	r22, 0x01	; 1
    331a:	70 40       	sbci	r23, 0x00	; 0
    331c:	01 90       	ld	r0, Z+
    331e:	01 10       	cpse	r0, r1
    3320:	d8 f7       	brcc	.-10     	; 0x3318 <strnlen+0x2>
    3322:	80 95       	com	r24
    3324:	90 95       	com	r25
    3326:	8e 0f       	add	r24, r30
    3328:	9f 1f       	adc	r25, r31
    332a:	08 95       	ret

0000332c <fputc>:
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	18 2f       	mov	r17, r24
    3336:	09 2f       	mov	r16, r25
    3338:	eb 01       	movw	r28, r22
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	81 fd       	sbrc	r24, 1
    333e:	03 c0       	rjmp	.+6      	; 0x3346 <fputc+0x1a>
    3340:	8f ef       	ldi	r24, 0xFF	; 255
    3342:	9f ef       	ldi	r25, 0xFF	; 255
    3344:	20 c0       	rjmp	.+64     	; 0x3386 <fputc+0x5a>
    3346:	82 ff       	sbrs	r24, 2
    3348:	10 c0       	rjmp	.+32     	; 0x336a <fputc+0x3e>
    334a:	4e 81       	ldd	r20, Y+6	; 0x06
    334c:	5f 81       	ldd	r21, Y+7	; 0x07
    334e:	2c 81       	ldd	r18, Y+4	; 0x04
    3350:	3d 81       	ldd	r19, Y+5	; 0x05
    3352:	42 17       	cp	r20, r18
    3354:	53 07       	cpc	r21, r19
    3356:	7c f4       	brge	.+30     	; 0x3376 <fputc+0x4a>
    3358:	e8 81       	ld	r30, Y
    335a:	f9 81       	ldd	r31, Y+1	; 0x01
    335c:	9f 01       	movw	r18, r30
    335e:	2f 5f       	subi	r18, 0xFF	; 255
    3360:	3f 4f       	sbci	r19, 0xFF	; 255
    3362:	39 83       	std	Y+1, r19	; 0x01
    3364:	28 83       	st	Y, r18
    3366:	10 83       	st	Z, r17
    3368:	06 c0       	rjmp	.+12     	; 0x3376 <fputc+0x4a>
    336a:	e8 85       	ldd	r30, Y+8	; 0x08
    336c:	f9 85       	ldd	r31, Y+9	; 0x09
    336e:	81 2f       	mov	r24, r17
    3370:	09 95       	icall
    3372:	89 2b       	or	r24, r25
    3374:	29 f7       	brne	.-54     	; 0x3340 <fputc+0x14>
    3376:	2e 81       	ldd	r18, Y+6	; 0x06
    3378:	3f 81       	ldd	r19, Y+7	; 0x07
    337a:	2f 5f       	subi	r18, 0xFF	; 255
    337c:	3f 4f       	sbci	r19, 0xFF	; 255
    337e:	3f 83       	std	Y+7, r19	; 0x07
    3380:	2e 83       	std	Y+6, r18	; 0x06
    3382:	81 2f       	mov	r24, r17
    3384:	90 2f       	mov	r25, r16
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	08 95       	ret

00003390 <__ultoa_invert>:
    3390:	fa 01       	movw	r30, r20
    3392:	aa 27       	eor	r26, r26
    3394:	28 30       	cpi	r18, 0x08	; 8
    3396:	51 f1       	breq	.+84     	; 0x33ec <__ultoa_invert+0x5c>
    3398:	20 31       	cpi	r18, 0x10	; 16
    339a:	81 f1       	breq	.+96     	; 0x33fc <__ultoa_invert+0x6c>
    339c:	e8 94       	clt
    339e:	6f 93       	push	r22
    33a0:	6e 7f       	andi	r22, 0xFE	; 254
    33a2:	6e 5f       	subi	r22, 0xFE	; 254
    33a4:	7f 4f       	sbci	r23, 0xFF	; 255
    33a6:	8f 4f       	sbci	r24, 0xFF	; 255
    33a8:	9f 4f       	sbci	r25, 0xFF	; 255
    33aa:	af 4f       	sbci	r26, 0xFF	; 255
    33ac:	b1 e0       	ldi	r27, 0x01	; 1
    33ae:	3e d0       	rcall	.+124    	; 0x342c <__ultoa_invert+0x9c>
    33b0:	b4 e0       	ldi	r27, 0x04	; 4
    33b2:	3c d0       	rcall	.+120    	; 0x342c <__ultoa_invert+0x9c>
    33b4:	67 0f       	add	r22, r23
    33b6:	78 1f       	adc	r23, r24
    33b8:	89 1f       	adc	r24, r25
    33ba:	9a 1f       	adc	r25, r26
    33bc:	a1 1d       	adc	r26, r1
    33be:	68 0f       	add	r22, r24
    33c0:	79 1f       	adc	r23, r25
    33c2:	8a 1f       	adc	r24, r26
    33c4:	91 1d       	adc	r25, r1
    33c6:	a1 1d       	adc	r26, r1
    33c8:	6a 0f       	add	r22, r26
    33ca:	71 1d       	adc	r23, r1
    33cc:	81 1d       	adc	r24, r1
    33ce:	91 1d       	adc	r25, r1
    33d0:	a1 1d       	adc	r26, r1
    33d2:	20 d0       	rcall	.+64     	; 0x3414 <__ultoa_invert+0x84>
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <__ultoa_invert+0x48>
    33d6:	68 94       	set
    33d8:	3f 91       	pop	r19
    33da:	2a e0       	ldi	r18, 0x0A	; 10
    33dc:	26 9f       	mul	r18, r22
    33de:	11 24       	eor	r1, r1
    33e0:	30 19       	sub	r19, r0
    33e2:	30 5d       	subi	r19, 0xD0	; 208
    33e4:	31 93       	st	Z+, r19
    33e6:	de f6       	brtc	.-74     	; 0x339e <__ultoa_invert+0xe>
    33e8:	cf 01       	movw	r24, r30
    33ea:	08 95       	ret
    33ec:	46 2f       	mov	r20, r22
    33ee:	47 70       	andi	r20, 0x07	; 7
    33f0:	40 5d       	subi	r20, 0xD0	; 208
    33f2:	41 93       	st	Z+, r20
    33f4:	b3 e0       	ldi	r27, 0x03	; 3
    33f6:	0f d0       	rcall	.+30     	; 0x3416 <__ultoa_invert+0x86>
    33f8:	c9 f7       	brne	.-14     	; 0x33ec <__ultoa_invert+0x5c>
    33fa:	f6 cf       	rjmp	.-20     	; 0x33e8 <__ultoa_invert+0x58>
    33fc:	46 2f       	mov	r20, r22
    33fe:	4f 70       	andi	r20, 0x0F	; 15
    3400:	40 5d       	subi	r20, 0xD0	; 208
    3402:	4a 33       	cpi	r20, 0x3A	; 58
    3404:	18 f0       	brcs	.+6      	; 0x340c <__ultoa_invert+0x7c>
    3406:	49 5d       	subi	r20, 0xD9	; 217
    3408:	31 fd       	sbrc	r19, 1
    340a:	40 52       	subi	r20, 0x20	; 32
    340c:	41 93       	st	Z+, r20
    340e:	02 d0       	rcall	.+4      	; 0x3414 <__ultoa_invert+0x84>
    3410:	a9 f7       	brne	.-22     	; 0x33fc <__ultoa_invert+0x6c>
    3412:	ea cf       	rjmp	.-44     	; 0x33e8 <__ultoa_invert+0x58>
    3414:	b4 e0       	ldi	r27, 0x04	; 4
    3416:	a6 95       	lsr	r26
    3418:	97 95       	ror	r25
    341a:	87 95       	ror	r24
    341c:	77 95       	ror	r23
    341e:	67 95       	ror	r22
    3420:	ba 95       	dec	r27
    3422:	c9 f7       	brne	.-14     	; 0x3416 <__ultoa_invert+0x86>
    3424:	00 97       	sbiw	r24, 0x00	; 0
    3426:	61 05       	cpc	r22, r1
    3428:	71 05       	cpc	r23, r1
    342a:	08 95       	ret
    342c:	9b 01       	movw	r18, r22
    342e:	ac 01       	movw	r20, r24
    3430:	0a 2e       	mov	r0, r26
    3432:	06 94       	lsr	r0
    3434:	57 95       	ror	r21
    3436:	47 95       	ror	r20
    3438:	37 95       	ror	r19
    343a:	27 95       	ror	r18
    343c:	ba 95       	dec	r27
    343e:	c9 f7       	brne	.-14     	; 0x3432 <__ultoa_invert+0xa2>
    3440:	62 0f       	add	r22, r18
    3442:	73 1f       	adc	r23, r19
    3444:	84 1f       	adc	r24, r20
    3446:	95 1f       	adc	r25, r21
    3448:	a0 1d       	adc	r26, r0
    344a:	08 95       	ret

0000344c <__prologue_saves__>:
    344c:	2f 92       	push	r2
    344e:	3f 92       	push	r3
    3450:	4f 92       	push	r4
    3452:	5f 92       	push	r5
    3454:	6f 92       	push	r6
    3456:	7f 92       	push	r7
    3458:	8f 92       	push	r8
    345a:	9f 92       	push	r9
    345c:	af 92       	push	r10
    345e:	bf 92       	push	r11
    3460:	cf 92       	push	r12
    3462:	df 92       	push	r13
    3464:	ef 92       	push	r14
    3466:	ff 92       	push	r15
    3468:	0f 93       	push	r16
    346a:	1f 93       	push	r17
    346c:	cf 93       	push	r28
    346e:	df 93       	push	r29
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	ca 1b       	sub	r28, r26
    3476:	db 0b       	sbc	r29, r27
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	f8 94       	cli
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	cd bf       	out	0x3d, r28	; 61
    3482:	09 94       	ijmp

00003484 <__epilogue_restores__>:
    3484:	2a 88       	ldd	r2, Y+18	; 0x12
    3486:	39 88       	ldd	r3, Y+17	; 0x11
    3488:	48 88       	ldd	r4, Y+16	; 0x10
    348a:	5f 84       	ldd	r5, Y+15	; 0x0f
    348c:	6e 84       	ldd	r6, Y+14	; 0x0e
    348e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3490:	8c 84       	ldd	r8, Y+12	; 0x0c
    3492:	9b 84       	ldd	r9, Y+11	; 0x0b
    3494:	aa 84       	ldd	r10, Y+10	; 0x0a
    3496:	b9 84       	ldd	r11, Y+9	; 0x09
    3498:	c8 84       	ldd	r12, Y+8	; 0x08
    349a:	df 80       	ldd	r13, Y+7	; 0x07
    349c:	ee 80       	ldd	r14, Y+6	; 0x06
    349e:	fd 80       	ldd	r15, Y+5	; 0x05
    34a0:	0c 81       	ldd	r16, Y+4	; 0x04
    34a2:	1b 81       	ldd	r17, Y+3	; 0x03
    34a4:	aa 81       	ldd	r26, Y+2	; 0x02
    34a6:	b9 81       	ldd	r27, Y+1	; 0x01
    34a8:	ce 0f       	add	r28, r30
    34aa:	d1 1d       	adc	r29, r1
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	ed 01       	movw	r28, r26
    34b8:	08 95       	ret

000034ba <_exit>:
    34ba:	f8 94       	cli

000034bc <__stop_program>:
    34bc:	ff cf       	rjmp	.-2      	; 0x34bc <__stop_program>
