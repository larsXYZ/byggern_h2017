
node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  000028ca  0000295e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  008002ba  008002ba  00002b18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ac1  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fee  00000000  00000000  000068fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000112b  00000000  00000000  000078eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000884  00000000  00000000  00008a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa1  00000000  00000000  0000929c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fb5  00000000  00000000  00009d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0000bcf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_1>
       8:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_2>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	ea ec       	ldi	r30, 0xCA	; 202
     6d4:	f8 e2       	ldi	r31, 0x28	; 40
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	aa 3b       	cpi	r26, 0xBA	; 186
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	aa eb       	ldi	r26, 0xBA	; 186
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a4 35       	cpi	r26, 0x54	; 84
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <main>
     6f6:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <__vector_1>:

//Enables interrupt vector

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
     6fe:	1f 92       	push	r1
     700:	0f 92       	push	r0
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	0f 92       	push	r0
     706:	11 24       	eor	r1, r1
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
{

	//Reset interrupt flag, in order to allow a new message to be received into the buffer
	
	//Tell rest of the program we have mail
	message_received = 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	90 93 bb 02 	sts	0x02BB, r25
     714:	80 93 ba 02 	sts	0x02BA, r24

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
	CAN_int_vector();
}
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <UART_send>:
}

void UART_send(unsigned char message)
{
	//Waiting for data buffer to be ready
	while ( !( UCSR0A & (1<<UDRE0)) ){;}
     726:	5d 9b       	sbis	0x0b, 5	; 11
     728:	fe cf       	rjmp	.-4      	; 0x726 <UART_send>
	
	//Fills data buffer
	UDR0 = message;
     72a:	8c b9       	out	0x0c, r24	; 12
     72c:	08 95       	ret

0000072e <UART_init>:

static FILE usart_stdout = FDEV_SETUP_STREAM(UART_send, NULL, _FDEV_SETUP_WRITE);

void UART_init(int baudrate)
{
	uint16_t MYUBRR = (F_CPU/16/baudrate)-1;
     72e:	9c 01       	movw	r18, r24
     730:	44 27       	eor	r20, r20
     732:	37 fd       	sbrc	r19, 7
     734:	40 95       	com	r20
     736:	54 2f       	mov	r21, r20
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 eb       	ldi	r23, 0xB0	; 176
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__udivmodsi4>
     744:	21 50       	subi	r18, 0x01	; 1
     746:	31 09       	sbc	r19, r1
	
	//Setting baud rate
	UBRR0H = (unsigned char)(MYUBRR >>8);
     748:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char)(MYUBRR );
     74a:	29 b9       	out	0x09, r18	; 9
	
	//Enabling interrupts
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     74c:	88 e1       	ldi	r24, 0x18	; 24
     74e:	8a b9       	out	0x0a, r24	; 10
	
	//Setting frame format
	#ifdef __AVR_ATmega162__
	UCSR0C = (1<<URSEL0) | (1<<UCSZ00) | (1<<UCSZ01);
     750:	86 e8       	ldi	r24, 0x86	; 134
     752:	80 bd       	out	0x20, r24	; 32
	#elif __AVR_ATmega2560__
	UCSR0C = (3<<UCSZ00);
	#endif
	
	//Links prinf() to USART output
	stdout = &usart_stdout;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	90 93 51 03 	sts	0x0351, r25
     75c:	80 93 50 03 	sts	0x0350, r24
     760:	08 95       	ret

00000762 <app_setup>:
}

void app_setup()
{
		
	opt_select_name(); 
     762:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <opt_select_name>
	opt_select_difficulty();
     766:	0e 94 c6 06 	call	0xd8c	; 0xd8c <opt_select_difficulty>
	opt_select_music(); 
     76a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <opt_select_music>
	
	//Printing menus
	while (!EXIT_APPLICATION)
     76e:	80 91 bc 02 	lds	r24, 0x02BC
     772:	90 91 bd 02 	lds	r25, 0x02BD
     776:	89 2b       	or	r24, r25
     778:	71 f4       	brne	.+28     	; 0x796 <app_setup+0x34>
	{
		
		menu_control(&main_menu);
     77a:	80 e1       	ldi	r24, 0x10	; 16
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <menu_control>
		oled_update_from_SRAM();
     782:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
		adc_update_current_input();
     786:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
	opt_select_name(); 
	opt_select_difficulty();
	opt_select_music(); 
	
	//Printing menus
	while (!EXIT_APPLICATION)
     78a:	80 91 bc 02 	lds	r24, 0x02BC
     78e:	90 91 bd 02 	lds	r25, 0x02BD
     792:	89 2b       	or	r24, r25
     794:	91 f3       	breq	.-28     	; 0x77a <app_setup+0x18>
     796:	08 95       	ret

00000798 <app_run>:
}
	
void app_run()
{
	//Printing menus
	while (!EXIT_APPLICATION)
     798:	80 91 bc 02 	lds	r24, 0x02BC
     79c:	90 91 bd 02 	lds	r25, 0x02BD
     7a0:	89 2b       	or	r24, r25
     7a2:	71 f4       	brne	.+28     	; 0x7c0 <app_run+0x28>
	{
		
		menu_control(&main_menu);
     7a4:	80 e1       	ldi	r24, 0x10	; 16
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <menu_control>
		oled_update_from_SRAM();
     7ac:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
		adc_update_current_input();
     7b0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
}
	
void app_run()
{
	//Printing menus
	while (!EXIT_APPLICATION)
     7b4:	80 91 bc 02 	lds	r24, 0x02BC
     7b8:	90 91 bd 02 	lds	r25, 0x02BD
     7bc:	89 2b       	or	r24, r25
     7be:	91 f3       	breq	.-28     	; 0x7a4 <app_run+0xc>
		oled_update_from_SRAM();
		adc_update_current_input();
	}
	
	//thanks player for playing
	oled_clear_SRAM();
     7c0:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
	oled_update_from_SRAM();
     7c4:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
	oled_home(); 
     7c8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
	oled_cstring_write("Thank u for playing", 1);
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	87 e6       	ldi	r24, 0x67	; 103
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
	oled_update_from_SRAM();
     7d8:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	8f e7       	ldi	r24, 0x7F	; 127
     7e0:	96 e1       	ldi	r25, 0x16	; 22
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <app_run+0x4a>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <app_run+0x54>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <app_run+0x56>
	_delay_ms(1500);
	oled_clear_SRAM();
     7ee:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
	oled_update_from_SRAM();
     7f2:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
     7f6:	08 95       	ret

000007f8 <app_logo>:
	
}

void app_logo()
{
	oled_go_to(1,1);
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
	oled_cstring_write("Made by:",2);
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	8b e7       	ldi	r24, 0x7B	; 123
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
	
	//L
	oled_write_line(10,20,10,40);
     80c:	28 e2       	ldi	r18, 0x28	; 40
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	4a e0       	ldi	r20, 0x0A	; 10
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	64 e1       	ldi	r22, 0x14	; 20
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(10,40,20,40);
     820:	28 e2       	ldi	r18, 0x28	; 40
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	44 e1       	ldi	r20, 0x14	; 20
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	68 e2       	ldi	r22, 0x28	; 40
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	8a e0       	ldi	r24, 0x0A	; 10
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	
	//A
	oled_write_line(20,40,25,20);
     834:	24 e1       	ldi	r18, 0x14	; 20
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	49 e1       	ldi	r20, 0x19	; 25
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	68 e2       	ldi	r22, 0x28	; 40
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	84 e1       	ldi	r24, 0x14	; 20
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(23,30,27,30);
     848:	2e e1       	ldi	r18, 0x1E	; 30
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	4b e1       	ldi	r20, 0x1B	; 27
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	6e e1       	ldi	r22, 0x1E	; 30
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	87 e1       	ldi	r24, 0x17	; 23
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(25,20,30,40);
     85c:	28 e2       	ldi	r18, 0x28	; 40
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	4e e1       	ldi	r20, 0x1E	; 30
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	64 e1       	ldi	r22, 0x14	; 20
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	89 e1       	ldi	r24, 0x19	; 25
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	
	//R
	oled_write_line(30,40,30,20);
     870:	24 e1       	ldi	r18, 0x14	; 20
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	4e e1       	ldi	r20, 0x1E	; 30
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	68 e2       	ldi	r22, 0x28	; 40
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	8e e1       	ldi	r24, 0x1E	; 30
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(30,20,35,20);
     884:	24 e1       	ldi	r18, 0x14	; 20
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	43 e2       	ldi	r20, 0x23	; 35
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	64 e1       	ldi	r22, 0x14	; 20
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	8e e1       	ldi	r24, 0x1E	; 30
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(35,20,35,25);
     898:	29 e1       	ldi	r18, 0x19	; 25
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	43 e2       	ldi	r20, 0x23	; 35
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	64 e1       	ldi	r22, 0x14	; 20
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	83 e2       	ldi	r24, 0x23	; 35
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(35,25,30,25);
     8ac:	29 e1       	ldi	r18, 0x19	; 25
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	4e e1       	ldi	r20, 0x1E	; 30
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	69 e1       	ldi	r22, 0x19	; 25
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	83 e2       	ldi	r24, 0x23	; 35
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(30,25,35,40);
     8c0:	28 e2       	ldi	r18, 0x28	; 40
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	43 e2       	ldi	r20, 0x23	; 35
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	69 e1       	ldi	r22, 0x19	; 25
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	8e e1       	ldi	r24, 0x1E	; 30
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	
	//S
	oled_write_line(37,40,47,40);
     8d4:	28 e2       	ldi	r18, 0x28	; 40
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	4f e2       	ldi	r20, 0x2F	; 47
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	68 e2       	ldi	r22, 0x28	; 40
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	85 e2       	ldi	r24, 0x25	; 37
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(47,40,47,30);
     8e8:	2e e1       	ldi	r18, 0x1E	; 30
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	4f e2       	ldi	r20, 0x2F	; 47
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	68 e2       	ldi	r22, 0x28	; 40
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	8f e2       	ldi	r24, 0x2F	; 47
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(47,30,35,30);
     8fc:	2e e1       	ldi	r18, 0x1E	; 30
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	43 e2       	ldi	r20, 0x23	; 35
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	6e e1       	ldi	r22, 0x1E	; 30
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	8f e2       	ldi	r24, 0x2F	; 47
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(37,30,37,20);
     910:	24 e1       	ldi	r18, 0x14	; 20
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	45 e2       	ldi	r20, 0x25	; 37
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	6e e1       	ldi	r22, 0x1E	; 30
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	85 e2       	ldi	r24, 0x25	; 37
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(37,20,47,20);
     924:	24 e1       	ldi	r18, 0x14	; 20
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	4f e2       	ldi	r20, 0x2F	; 47
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	64 e1       	ldi	r22, 0x14	; 20
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	85 e2       	ldi	r24, 0x25	; 37
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	
	oled_go_to(52,4);
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	84 e3       	ldi	r24, 0x34	; 52
     93c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
	oled_cstring_write("&",2);
     940:	62 e0       	ldi	r22, 0x02	; 2
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	84 e8       	ldi	r24, 0x84	; 132
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
	
	//P
	oled_write_line(65,40,65,20);
     94c:	24 e1       	ldi	r18, 0x14	; 20
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	41 e4       	ldi	r20, 0x41	; 65
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	68 e2       	ldi	r22, 0x28	; 40
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	81 e4       	ldi	r24, 0x41	; 65
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(65,20,75,20);
     960:	24 e1       	ldi	r18, 0x14	; 20
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	4b e4       	ldi	r20, 0x4B	; 75
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	64 e1       	ldi	r22, 0x14	; 20
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	81 e4       	ldi	r24, 0x41	; 65
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(75,20,75,30);
     974:	2e e1       	ldi	r18, 0x1E	; 30
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	4b e4       	ldi	r20, 0x4B	; 75
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	64 e1       	ldi	r22, 0x14	; 20
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	8b e4       	ldi	r24, 0x4B	; 75
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(75,30,65,30);
     988:	2e e1       	ldi	r18, 0x1E	; 30
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	41 e4       	ldi	r20, 0x41	; 65
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	6e e1       	ldi	r22, 0x1E	; 30
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	8b e4       	ldi	r24, 0x4B	; 75
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	
	//E
	oled_write_line(77,40,77,20);
     99c:	24 e1       	ldi	r18, 0x14	; 20
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	4d e4       	ldi	r20, 0x4D	; 77
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	68 e2       	ldi	r22, 0x28	; 40
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	8d e4       	ldi	r24, 0x4D	; 77
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(77,20,85,20);
     9b0:	24 e1       	ldi	r18, 0x14	; 20
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	45 e5       	ldi	r20, 0x55	; 85
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	64 e1       	ldi	r22, 0x14	; 20
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	8d e4       	ldi	r24, 0x4D	; 77
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(77,30,85,30);
     9c4:	2e e1       	ldi	r18, 0x1E	; 30
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	45 e5       	ldi	r20, 0x55	; 85
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	6e e1       	ldi	r22, 0x1E	; 30
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	8d e4       	ldi	r24, 0x4D	; 77
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(77,40,85,40);
     9d8:	28 e2       	ldi	r18, 0x28	; 40
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	45 e5       	ldi	r20, 0x55	; 85
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	68 e2       	ldi	r22, 0x28	; 40
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	8d e4       	ldi	r24, 0x4D	; 77
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	
	//R
	oled_write_line(87,40,87,20);
     9ec:	24 e1       	ldi	r18, 0x14	; 20
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	47 e5       	ldi	r20, 0x57	; 87
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	68 e2       	ldi	r22, 0x28	; 40
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	87 e5       	ldi	r24, 0x57	; 87
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(87,20,95,20);
     a00:	24 e1       	ldi	r18, 0x14	; 20
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	4f e5       	ldi	r20, 0x5F	; 95
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	64 e1       	ldi	r22, 0x14	; 20
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	87 e5       	ldi	r24, 0x57	; 87
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(95,20,95,25);
     a14:	29 e1       	ldi	r18, 0x19	; 25
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	4f e5       	ldi	r20, 0x5F	; 95
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	64 e1       	ldi	r22, 0x14	; 20
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	8f e5       	ldi	r24, 0x5F	; 95
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(95,25,87,25);
     a28:	29 e1       	ldi	r18, 0x19	; 25
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	47 e5       	ldi	r20, 0x57	; 87
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	69 e1       	ldi	r22, 0x19	; 25
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	8f e5       	ldi	r24, 0x5F	; 95
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	oled_write_line(87,25,95,40);
     a3c:	28 e2       	ldi	r18, 0x28	; 40
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	4f e5       	ldi	r20, 0x5F	; 95
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	69 e1       	ldi	r22, 0x19	; 25
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	87 e5       	ldi	r24, 0x57	; 87
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <oled_write_line>
	
	oled_go_to(50,7);
     a50:	67 e0       	ldi	r22, 0x07	; 7
     a52:	82 e3       	ldi	r24, 0x32	; 50
     a54:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
	oled_cstring_write("TTK4155, H2017",1);
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	86 e8       	ldi	r24, 0x86	; 134
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>

	oled_update_from_SRAM();
     a64:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
     a68:	2f ef       	ldi	r18, 0xFF	; 255
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	9e e0       	ldi	r25, 0x0E	; 14
     a6e:	21 50       	subi	r18, 0x01	; 1
     a70:	80 40       	sbci	r24, 0x00	; 0
     a72:	90 40       	sbci	r25, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <app_logo+0x276>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <app_logo+0x280>
     a78:	00 00       	nop
     a7a:	08 95       	ret

00000a7c <app_init>:

int EXIT_APPLICATION = 0;


void app_init()
{
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
	//Initialize drivers
	UART_init(9600);
     a80:	80 e8       	ldi	r24, 0x80	; 128
     a82:	95 e2       	ldi	r25, 0x25	; 37
     a84:	0e 94 97 03 	call	0x72e	; 0x72e <UART_init>
	oled_init();
     a88:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <oled_init>
	adc_init();
     a8c:	0e 94 bf 09 	call	0x137e	; 0x137e <adc_init>
	
	//Shows logo
	app_logo();
     a90:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <app_logo>
	
	//Creating menus
	menu_constr(&setup_menu, "Settings");
     a94:	65 e9       	ldi	r22, 0x95	; 149
     a96:	71 e0       	ldi	r23, 0x01	; 1
     a98:	8a e1       	ldi	r24, 0x1A	; 26
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <menu_constr>
	setup_menu.parent_menu = &main_menu;
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	93 e0       	ldi	r25, 0x03	; 3
     aa4:	90 93 23 03 	sts	0x0323, r25
     aa8:	80 93 22 03 	sts	0x0322, r24
	
	opt_constr(&enter_name,"Enter Name", opt_select_name);
     aac:	49 ef       	ldi	r20, 0xF9	; 249
     aae:	55 e0       	ldi	r21, 0x05	; 5
     ab0:	6e e9       	ldi	r22, 0x9E	; 158
     ab2:	71 e0       	ldi	r23, 0x01	; 1
     ab4:	88 ed       	ldi	r24, 0xD8	; 216
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <opt_constr>
	setup_menu.root_option = &enter_name;
     abc:	88 ed       	ldi	r24, 0xD8	; 216
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	90 93 1d 03 	sts	0x031D, r25
     ac4:	80 93 1c 03 	sts	0x031C, r24
	enter_name.parent = &setup_menu;
     ac8:	ca e1       	ldi	r28, 0x1A	; 26
     aca:	d3 e0       	ldi	r29, 0x03	; 3
     acc:	d0 93 df 02 	sts	0x02DF, r29
     ad0:	c0 93 de 02 	sts	0x02DE, r28
	
	opt_constr(&enter_music,"Music Selection", opt_select_music);
     ad4:	4b e5       	ldi	r20, 0x5B	; 91
     ad6:	57 e0       	ldi	r21, 0x07	; 7
     ad8:	69 ea       	ldi	r22, 0xA9	; 169
     ada:	71 e0       	ldi	r23, 0x01	; 1
     adc:	84 ec       	ldi	r24, 0xC4	; 196
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <opt_constr>
	enter_name.next = &enter_music;
     ae4:	84 ec       	ldi	r24, 0xC4	; 196
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	90 93 dd 02 	sts	0x02DD, r25
     aec:	80 93 dc 02 	sts	0x02DC, r24
	
	opt_constr(&enter_difficulty_option,"Difficulty", opt_select_difficulty);
     af0:	46 ec       	ldi	r20, 0xC6	; 198
     af2:	56 e0       	ldi	r21, 0x06	; 6
     af4:	69 eb       	ldi	r22, 0xB9	; 185
     af6:	71 e0       	ldi	r23, 0x01	; 1
     af8:	82 ee       	ldi	r24, 0xE2	; 226
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <opt_constr>
	enter_music.next = &enter_difficulty_option;
     b00:	82 ee       	ldi	r24, 0xE2	; 226
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	90 93 c9 02 	sts	0x02C9, r25
     b08:	80 93 c8 02 	sts	0x02C8, r24
	 
	
	opt_constr(&highscore, "Highscores", view_highscore);
     b0c:	4c e2       	ldi	r20, 0x2C	; 44
     b0e:	58 e0       	ldi	r21, 0x08	; 8
     b10:	64 ec       	ldi	r22, 0xC4	; 196
     b12:	71 e0       	ldi	r23, 0x01	; 1
     b14:	86 e2       	ldi	r24, 0x26	; 38
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <opt_constr>
	enter_difficulty_option.next = &highscore;
     b1c:	86 e2       	ldi	r24, 0x26	; 38
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	90 93 e7 02 	sts	0x02E7, r25
     b24:	80 93 e6 02 	sts	0x02E6, r24
	
	
	menu_constr(&main_menu, "Main Menu");
     b28:	6f ec       	ldi	r22, 0xCF	; 207
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	80 e1       	ldi	r24, 0x10	; 16
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <menu_constr>
	
	opt_constr(&start_game, "Start Game", opt_start_game); 
     b34:	44 ee       	ldi	r20, 0xE4	; 228
     b36:	58 e0       	ldi	r21, 0x08	; 8
     b38:	69 ed       	ldi	r22, 0xD9	; 217
     b3a:	71 e0       	ldi	r23, 0x01	; 1
     b3c:	86 ef       	ldi	r24, 0xF6	; 246
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <opt_constr>
	main_menu.root_option = &start_game;
     b44:	86 ef       	ldi	r24, 0xF6	; 246
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	90 93 13 03 	sts	0x0313, r25
     b4c:	80 93 12 03 	sts	0x0312, r24
	
	opt_constr(&go_to_settings, "Settings", NULL);
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	65 e9       	ldi	r22, 0x95	; 149
     b56:	71 e0       	ldi	r23, 0x01	; 1
     b58:	8e ec       	ldi	r24, 0xCE	; 206
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <opt_constr>
	main_menu.root_option->next = &go_to_settings;
     b60:	e0 91 12 03 	lds	r30, 0x0312
     b64:	f0 91 13 03 	lds	r31, 0x0313
     b68:	8e ec       	ldi	r24, 0xCE	; 206
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	95 83       	std	Z+5, r25	; 0x05
     b6e:	84 83       	std	Z+4, r24	; 0x04
	go_to_settings.submenu = &setup_menu;
     b70:	d0 93 d7 02 	sts	0x02D7, r29
     b74:	c0 93 d6 02 	sts	0x02D6, r28
	
	opt_constr(&exit_application, "Exit game", opt_exit_application);
     b78:	41 e8       	ldi	r20, 0x81	; 129
     b7a:	59 e0       	ldi	r21, 0x09	; 9
     b7c:	64 ee       	ldi	r22, 0xE4	; 228
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	8c ee       	ldi	r24, 0xEC	; 236
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <opt_constr>
	go_to_settings.next = &exit_application; 
     b88:	8c ee       	ldi	r24, 0xEC	; 236
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	90 93 d3 02 	sts	0x02D3, r25
     b90:	80 93 d2 02 	sts	0x02D2, r24
	
	
	//Enable interrupts
	sei();
     b94:	78 94       	sei
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <int_to_cstring>:
	oled_update_from_SRAM();
	_delay_ms(1000);
}

char* int_to_cstring(int t)
{
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	2c 97       	sbiw	r28, 0x0c	; 12
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
	
	char str[12];
	sprintf(str, "%d", t);
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	8e ee       	ldi	r24, 0xEE	; 238
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	9f 93       	push	r25
     bbe:	8f 93       	push	r24
     bc0:	8e 01       	movw	r16, r28
     bc2:	0f 5f       	subi	r16, 0xFF	; 255
     bc4:	1f 4f       	sbci	r17, 0xFF	; 255
     bc6:	1f 93       	push	r17
     bc8:	0f 93       	push	r16
     bca:	0e 94 92 11 	call	0x2324	; 0x2324 <sprintf>
	return str;
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
}
     bda:	c8 01       	movw	r24, r16
     bdc:	2c 96       	adiw	r28, 0x0c	; 12
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	08 95       	ret

00000bf2 <opt_select_name>:
#include "ADC_driver.h"
#include "menu_object.h"
#include <util\delay.h>

void opt_select_name()
{
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
	//Sets up screen for functions
	oled_clear_SRAM();
     c0a:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
	oled_home();
     c0e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
	oled_cstring_write("Enter name: ",2);
     c12:	62 e0       	ldi	r22, 0x02	; 2
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	81 ef       	ldi	r24, 0xF1	; 241
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
	int i = 0;
     c1e:	c0 e0       	ldi	r28, 0x00	; 0
     c20:	d0 e0       	ldi	r29, 0x00	; 0
		//Read ADC
		adc_update_current_input();
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
     c22:	0f 2e       	mov	r0, r31
     c24:	f1 e4       	ldi	r31, 0x41	; 65
     c26:	8f 2e       	mov	r8, r31
     c28:	f0 2d       	mov	r31, r0
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
     c2a:	0f 2e       	mov	r0, r31
     c2c:	fa e5       	ldi	r31, 0x5A	; 90
     c2e:	9f 2e       	mov	r9, r31
     c30:	f0 2d       	mov	r31, r0
     c32:	c1 2c       	mov	r12, r1
     c34:	d1 2c       	mov	r13, r1
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
     c36:	aa 24       	eor	r10, r10
     c38:	a3 94       	inc	r10
     c3a:	b1 2c       	mov	r11, r1
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
     c3c:	68 94       	set
     c3e:	ee 24       	eor	r14, r14
     c40:	e1 f8       	bld	r14, 1
     c42:	f1 2c       	mov	r15, r1
	int ToSettings = 0; 
	
	while(ToSettings == 0)
	{
		//Read ADC
		adc_update_current_input();
     c44:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
     c48:	0e 94 ab 0a 	call	0x1556	; 0x1556 <joystick_down>
     c4c:	89 2b       	or	r24, r25
     c4e:	61 f0       	breq	.+24     	; 0xc68 <opt_select_name+0x76>
     c50:	fe 01       	movw	r30, r28
     c52:	e6 5b       	subi	r30, 0xB6	; 182
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	80 81       	ld	r24, Z
     c58:	8a 35       	cpi	r24, 0x5A	; 90
     c5a:	30 f4       	brcc	.+12     	; 0xc68 <opt_select_name+0x76>
     c5c:	fe 01       	movw	r30, r28
     c5e:	e6 5b       	subi	r30, 0xB6	; 182
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	8f 5f       	subi	r24, 0xFF	; 255
     c64:	80 83       	st	Z, r24
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <opt_select_name+0x86>
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
     c68:	0e 94 ab 0a 	call	0x1556	; 0x1556 <joystick_down>
     c6c:	89 2b       	or	r24, r25
     c6e:	21 f0       	breq	.+8      	; 0xc78 <opt_select_name+0x86>
     c70:	fe 01       	movw	r30, r28
     c72:	e6 5b       	subi	r30, 0xB6	; 182
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	80 82       	st	Z, r8
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
     c78:	0e 94 c0 0a 	call	0x1580	; 0x1580 <joystick_up>
     c7c:	89 2b       	or	r24, r25
     c7e:	61 f0       	breq	.+24     	; 0xc98 <opt_select_name+0xa6>
     c80:	fe 01       	movw	r30, r28
     c82:	e6 5b       	subi	r30, 0xB6	; 182
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	80 81       	ld	r24, Z
     c88:	82 34       	cpi	r24, 0x42	; 66
     c8a:	30 f0       	brcs	.+12     	; 0xc98 <opt_select_name+0xa6>
     c8c:	fe 01       	movw	r30, r28
     c8e:	e6 5b       	subi	r30, 0xB6	; 182
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	81 50       	subi	r24, 0x01	; 1
     c94:	80 83       	st	Z, r24
     c96:	08 c0       	rjmp	.+16     	; 0xca8 <opt_select_name+0xb6>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
     c98:	0e 94 c0 0a 	call	0x1580	; 0x1580 <joystick_up>
     c9c:	89 2b       	or	r24, r25
     c9e:	21 f0       	breq	.+8      	; 0xca8 <opt_select_name+0xb6>
     ca0:	fe 01       	movw	r30, r28
     ca2:	e6 5b       	subi	r30, 0xB6	; 182
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	90 82       	st	Z, r9
		if (joystick_right() && i < 3) i++;
     ca8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
     cac:	89 2b       	or	r24, r25
     cae:	21 f0       	breq	.+8      	; 0xcb8 <opt_select_name+0xc6>
     cb0:	c3 30       	cpi	r28, 0x03	; 3
     cb2:	d1 05       	cpc	r29, r1
     cb4:	0c f4       	brge	.+2      	; 0xcb8 <opt_select_name+0xc6>
     cb6:	21 96       	adiw	r28, 0x01	; 1
		if (joystick_left() && i >= 0) i--;
     cb8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
     cbc:	89 2b       	or	r24, r25
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <opt_select_name+0xd4>
     cc0:	dd 23       	and	r29, r29
     cc2:	0c f0       	brlt	.+2      	; 0xcc6 <opt_select_name+0xd4>
     cc4:	21 97       	sbiw	r28, 0x01	; 1
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
     cc6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
     cca:	89 2b       	or	r24, r25
     ccc:	21 f0       	breq	.+8      	; 0xcd6 <opt_select_name+0xe4>
     cce:	cf 3f       	cpi	r28, 0xFF	; 255
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	d2 07       	cpc	r29, r18
     cd4:	61 f0       	breq	.+24     	; 0xcee <opt_select_name+0xfc>
     cd6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
     cda:	89 2b       	or	r24, r25
     cdc:	69 f0       	breq	.+26     	; 0xcf8 <opt_select_name+0x106>
     cde:	c3 30       	cpi	r28, 0x03	; 3
     ce0:	d1 05       	cpc	r29, r1
     ce2:	69 f4       	brne	.+26     	; 0xcfe <opt_select_name+0x10c>
		{
			ToSettings = 1;
     ce4:	0a 2d       	mov	r16, r10
     ce6:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
     ce8:	ce 2d       	mov	r28, r14
     cea:	df 2d       	mov	r29, r15
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <opt_select_name+0x110>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
     cee:	0a 2d       	mov	r16, r10
     cf0:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
     cf2:	cc 2d       	mov	r28, r12
     cf4:	dd 2d       	mov	r29, r13
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <opt_select_name+0x110>
     cf8:	0c 2d       	mov	r16, r12
     cfa:	1d 2d       	mov	r17, r13
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <opt_select_name+0x110>
     cfe:	0c 2d       	mov	r16, r12
     d00:	1d 2d       	mov	r17, r13
			if(i == 3) i = 2; 
		}
		
		//Print current Letter
		oled_go_to(60,3);
     d02:	63 e0       	ldi	r22, 0x03	; 3
     d04:	8c e3       	ldi	r24, 0x3C	; 60
     d06:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write(PLAYER_NAME,2);
     d0a:	6e 2d       	mov	r22, r14
     d0c:	7f 2d       	mov	r23, r15
     d0e:	8a e4       	ldi	r24, 0x4A	; 74
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		
		oled_update_from_SRAM();
     d16:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
		
		
		
		if(!joystick_down() && !joystick_left() && !joystick_right() && !joystick_up())
     d1a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <joystick_down>
     d1e:	89 2b       	or	r24, r25
     d20:	29 f5       	brne	.+74     	; 0xd6c <opt_select_name+0x17a>
     d22:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
     d26:	89 2b       	or	r24, r25
     d28:	09 f5       	brne	.+66     	; 0xd6c <opt_select_name+0x17a>
     d2a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
     d2e:	89 2b       	or	r24, r25
     d30:	e9 f4       	brne	.+58     	; 0xd6c <opt_select_name+0x17a>
     d32:	0e 94 c0 0a 	call	0x1580	; 0x1580 <joystick_up>
     d36:	89 2b       	or	r24, r25
     d38:	c9 f4       	brne	.+50     	; 0xd6c <opt_select_name+0x17a>
     d3a:	9f ef       	ldi	r25, 0xFF	; 255
     d3c:	2f e7       	ldi	r18, 0x7F	; 127
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	20 40       	sbci	r18, 0x00	; 0
     d44:	80 40       	sbci	r24, 0x00	; 0
     d46:	e1 f7       	brne	.-8      	; 0xd40 <opt_select_name+0x14e>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <opt_select_name+0x158>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <opt_select_name+0x15a>
		{
			
			_delay_ms(100);
			
			oled_go_to(60+(8*i),3);
     d4c:	63 e0       	ldi	r22, 0x03	; 3
     d4e:	8c 2f       	mov	r24, r28
     d50:	88 0f       	add	r24, r24
     d52:	88 0f       	add	r24, r24
     d54:	88 0f       	add	r24, r24
     d56:	84 5c       	subi	r24, 0xC4	; 196
     d58:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_cstring_write("_",2);
     d5c:	6e 2d       	mov	r22, r14
     d5e:	7f 2d       	mov	r23, r15
     d60:	8e ef       	ldi	r24, 0xFE	; 254
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		
			oled_update_from_SRAM();
     d68:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
	oled_home();
	oled_cstring_write("Enter name: ",2);
	int i = 0;
	int ToSettings = 0; 
	
	while(ToSettings == 0)
     d6c:	01 2b       	or	r16, r17
     d6e:	09 f4       	brne	.+2      	; 0xd72 <opt_select_name+0x180>
     d70:	69 cf       	rjmp	.-302    	; 0xc44 <opt_select_name+0x52>
			oled_update_from_SRAM();
		}
		
	}
		
	}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	08 95       	ret

00000d8c <opt_select_difficulty>:
		
void opt_select_difficulty()
{
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
		
		oled_clear_SRAM();
     d9c:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
		oled_home(); 
     da0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
		oled_cstring_write("Difficulty:", 2);
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		
		int change = 1; 
     db0:	01 e0       	ldi	r16, 0x01	; 1
     db2:	10 e0       	ldi	r17, 0x00	; 0
			adc_update_current_input();
			
			
			//Reads input and decides min and max levels
			
			if(joystick_left()) completed = 1;
     db4:	ee 24       	eor	r14, r14
     db6:	e3 94       	inc	r14
     db8:	f1 2c       	mov	r15, r1
     dba:	c1 2c       	mov	r12, r1
     dbc:	d1 2c       	mov	r13, r1

		while(completed == 0) 
		{
			
			//Read ADC
			adc_update_current_input();
     dbe:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
			
			
			//Reads input and decides min and max levels
			
			if(joystick_left()) completed = 1;
     dc2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
     dc6:	3e 2d       	mov	r19, r14
     dc8:	2f 2d       	mov	r18, r15
     dca:	89 2b       	or	r24, r25
     dcc:	11 f4       	brne	.+4      	; 0xdd2 <opt_select_difficulty+0x46>
     dce:	3c 2d       	mov	r19, r12
     dd0:	2d 2d       	mov	r18, r13
     dd2:	c3 2f       	mov	r28, r19
     dd4:	d2 2f       	mov	r29, r18
			if(joystick_right()) completed = 1;
     dd6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
     dda:	89 2b       	or	r24, r25
     ddc:	11 f0       	breq	.+4      	; 0xde2 <opt_select_difficulty+0x56>
     dde:	ce 2d       	mov	r28, r14
     de0:	df 2d       	mov	r29, r15
			if (joystick_up() && CURRENT_DIFFICULTY < 2)
     de2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <joystick_up>
     de6:	89 2b       	or	r24, r25
     de8:	71 f0       	breq	.+28     	; 0xe06 <opt_select_difficulty+0x7a>
     dea:	80 91 c0 02 	lds	r24, 0x02C0
     dee:	90 91 c1 02 	lds	r25, 0x02C1
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	91 05       	cpc	r25, r1
     df6:	3c f4       	brge	.+14     	; 0xe06 <opt_select_difficulty+0x7a>
			{
				 CURRENT_DIFFICULTY++;
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	90 93 c1 02 	sts	0x02C1, r25
     dfe:	80 93 c0 02 	sts	0x02C0, r24
				 change = 1; 
     e02:	0e 2d       	mov	r16, r14
     e04:	1f 2d       	mov	r17, r15
			} 
			if (joystick_down() && CURRENT_DIFFICULTY > 0)
     e06:	0e 94 ab 0a 	call	0x1556	; 0x1556 <joystick_down>
     e0a:	89 2b       	or	r24, r25
     e0c:	21 f1       	breq	.+72     	; 0xe56 <opt_select_difficulty+0xca>
     e0e:	80 91 c0 02 	lds	r24, 0x02C0
     e12:	90 91 c1 02 	lds	r25, 0x02C1
     e16:	18 16       	cp	r1, r24
     e18:	19 06       	cpc	r1, r25
     e1a:	ec f4       	brge	.+58     	; 0xe56 <opt_select_difficulty+0xca>
			{
				 CURRENT_DIFFICULTY--;
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	90 93 c1 02 	sts	0x02C1, r25
     e22:	80 93 c0 02 	sts	0x02C0, r24
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
     e26:	63 e0       	ldi	r22, 0x03	; 3
     e28:	8c e3       	ldi	r24, 0x3C	; 60
     e2a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_cstring_write(DIFFICULTY_NAME[CURRENT_DIFFICULTY],2);
     e2e:	80 91 c0 02 	lds	r24, 0x02C0
     e32:	90 91 c1 02 	lds	r25, 0x02C1
     e36:	9c 01       	movw	r18, r24
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	82 0f       	add	r24, r18
     e42:	93 1f       	adc	r25, r19
     e44:	62 e0       	ldi	r22, 0x02	; 2
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	82 5b       	subi	r24, 0xB2	; 178
     e4a:	9e 4f       	sbci	r25, 0xFE	; 254
     e4c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_update_from_SRAM();
     e50:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
     e54:	19 c0       	rjmp	.+50     	; 0xe88 <opt_select_difficulty+0xfc>
				 CURRENT_DIFFICULTY--;
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
     e56:	63 e0       	ldi	r22, 0x03	; 3
     e58:	8c e3       	ldi	r24, 0x3C	; 60
     e5a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_cstring_write(DIFFICULTY_NAME[CURRENT_DIFFICULTY],2);
     e5e:	80 91 c0 02 	lds	r24, 0x02C0
     e62:	90 91 c1 02 	lds	r25, 0x02C1
     e66:	9c 01       	movw	r18, r24
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	82 5b       	subi	r24, 0xB2	; 178
     e7a:	9e 4f       	sbci	r25, 0xFE	; 254
     e7c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_update_from_SRAM();
     e80:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
			
			
			
			if (change!= 0)
     e84:	01 2b       	or	r16, r17
     e86:	49 f0       	breq	.+18     	; 0xe9a <opt_select_difficulty+0x10e>
     e88:	9f ef       	ldi	r25, 0xFF	; 255
     e8a:	2f ef       	ldi	r18, 0xFF	; 255
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	91 50       	subi	r25, 0x01	; 1
     e90:	20 40       	sbci	r18, 0x00	; 0
     e92:	80 40       	sbci	r24, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <opt_select_difficulty+0x102>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <opt_select_difficulty+0x10c>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <opt_select_difficulty+0x10e>
		oled_cstring_write("Difficulty:", 2);
		
		int change = 1; 
		int completed= 0; 

		while(completed == 0) 
     e9a:	cd 2b       	or	r28, r29
     e9c:	19 f4       	brne	.+6      	; 0xea4 <opt_select_difficulty+0x118>
     e9e:	0c 2d       	mov	r16, r12
     ea0:	1d 2d       	mov	r17, r13
     ea2:	8d cf       	rjmp	.-230    	; 0xdbe <opt_select_difficulty+0x32>
			}
			
			
		}
	
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	08 95       	ret

00000eb6 <opt_select_music>:

void opt_select_music()
{
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	6e 97       	sbiw	r28, 0x1e	; 30
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
	
	
	int change = 1;
	char *song_list[15] = {"Imperial March ", "Star wars theme", "No music       "}; 
     eda:	fe 01       	movw	r30, r28
     edc:	31 96       	adiw	r30, 0x01	; 1
     ede:	8e e1       	ldi	r24, 0x1E	; 30
     ee0:	df 01       	movw	r26, r30
     ee2:	1d 92       	st	X+, r1
     ee4:	8a 95       	dec	r24
     ee6:	e9 f7       	brne	.-6      	; 0xee2 <opt_select_music+0x2c>
     ee8:	8c e0       	ldi	r24, 0x0C	; 12
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	8c e1       	ldi	r24, 0x1C	; 28
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	9c 83       	std	Y+4, r25	; 0x04
     ef6:	8b 83       	std	Y+3, r24	; 0x03
     ef8:	8c e2       	ldi	r24, 0x2C	; 44
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
	int ToSettings= 0;
	
	oled_clear_SRAM();
     f00:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
	oled_home();
     f04:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
	oled_cstring_write("Music:", 2);
     f08:	62 e0       	ldi	r22, 0x02	; 2
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	8c e3       	ldi	r24, 0x3C	; 60
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>

void opt_select_music()
{
	
	
	int change = 1;
     f14:	01 e0       	ldi	r16, 0x01	; 1
     f16:	10 e0       	ldi	r17, 0x00	; 0
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
     f18:	aa 24       	eor	r10, r10
     f1a:	a3 94       	inc	r10
     f1c:	b1 2c       	mov	r11, r1
     f1e:	c1 2c       	mov	r12, r1
     f20:	d1 2c       	mov	r13, r1

	while(ToSettings == 0)
	{
		
		//Read ADC
		adc_update_current_input();
     f22:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
     f26:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
     f2a:	89 2b       	or	r24, r25
     f2c:	29 f0       	breq	.+10     	; 0xf38 <opt_select_music+0x82>
     f2e:	01 15       	cp	r16, r1
     f30:	11 05       	cpc	r17, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <opt_select_music+0x80>
     f34:	73 c0       	rjmp	.+230    	; 0x101c <opt_select_music+0x166>
     f36:	7a c0       	rjmp	.+244    	; 0x102c <opt_select_music+0x176>
		if(joystick_right() && !change) ToSettings = 1;
     f38:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
     f3c:	89 2b       	or	r24, r25
     f3e:	31 f0       	breq	.+12     	; 0xf4c <opt_select_music+0x96>
     f40:	01 15       	cp	r16, r1
     f42:	11 05       	cpc	r17, r1
     f44:	31 f4       	brne	.+12     	; 0xf52 <opt_select_music+0x9c>
     f46:	ea 2c       	mov	r14, r10
     f48:	fb 2c       	mov	r15, r11
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <opt_select_music+0xa0>
     f4c:	ec 2c       	mov	r14, r12
     f4e:	fd 2c       	mov	r15, r13
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <opt_select_music+0xa0>
     f52:	ec 2c       	mov	r14, r12
     f54:	fd 2c       	mov	r15, r13
		if (joystick_up() && CURRENT_SONG < 2)
     f56:	0e 94 c0 0a 	call	0x1580	; 0x1580 <joystick_up>
     f5a:	89 2b       	or	r24, r25
     f5c:	71 f0       	breq	.+28     	; 0xf7a <opt_select_music+0xc4>
     f5e:	80 91 be 02 	lds	r24, 0x02BE
     f62:	90 91 bf 02 	lds	r25, 0x02BF
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	91 05       	cpc	r25, r1
     f6a:	3c f4       	brge	.+14     	; 0xf7a <opt_select_music+0xc4>
		{
			CURRENT_SONG++;
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	90 93 bf 02 	sts	0x02BF, r25
     f72:	80 93 be 02 	sts	0x02BE, r24
			change = 1;
     f76:	0a 2d       	mov	r16, r10
     f78:	1b 2d       	mov	r17, r11
		}
		if (joystick_down() && CURRENT_SONG > 0)
     f7a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <joystick_down>
     f7e:	89 2b       	or	r24, r25
     f80:	29 f1       	breq	.+74     	; 0xfcc <opt_select_music+0x116>
     f82:	80 91 be 02 	lds	r24, 0x02BE
     f86:	90 91 bf 02 	lds	r25, 0x02BF
     f8a:	18 16       	cp	r1, r24
     f8c:	19 06       	cpc	r1, r25
     f8e:	f4 f4       	brge	.+60     	; 0xfcc <opt_select_music+0x116>
		{
			CURRENT_SONG--;
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	90 93 bf 02 	sts	0x02BF, r25
     f96:	80 93 be 02 	sts	0x02BE, r24
			change = 1;
		}
		
		oled_go_to(30,3);
     f9a:	63 e0       	ldi	r22, 0x03	; 3
     f9c:	8e e1       	ldi	r24, 0x1E	; 30
     f9e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
     fa2:	e0 91 be 02 	lds	r30, 0x02BE
     fa6:	f0 91 bf 02 	lds	r31, 0x02BF
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	8c 0f       	add	r24, r28
     fb4:	9d 1f       	adc	r25, r29
     fb6:	e8 0f       	add	r30, r24
     fb8:	f9 1f       	adc	r31, r25
     fba:	6a 2d       	mov	r22, r10
     fbc:	7b 2d       	mov	r23, r11
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_update_from_SRAM();
     fc6:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
     fca:	1a c0       	rjmp	.+52     	; 0x1000 <opt_select_music+0x14a>
		{
			CURRENT_SONG--;
			change = 1;
		}
		
		oled_go_to(30,3);
     fcc:	63 e0       	ldi	r22, 0x03	; 3
     fce:	8e e1       	ldi	r24, 0x1E	; 30
     fd0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
     fd4:	e0 91 be 02 	lds	r30, 0x02BE
     fd8:	f0 91 bf 02 	lds	r31, 0x02BF
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	a1 e0       	ldi	r26, 0x01	; 1
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ac 0f       	add	r26, r28
     fe6:	bd 1f       	adc	r27, r29
     fe8:	ea 0f       	add	r30, r26
     fea:	fb 1f       	adc	r31, r27
     fec:	6a 2d       	mov	r22, r10
     fee:	7b 2d       	mov	r23, r11
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_update_from_SRAM();
     ff8:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
		
		if (change!= 0)
     ffc:	01 2b       	or	r16, r17
     ffe:	49 f0       	breq	.+18     	; 0x1012 <opt_select_music+0x15c>
    1000:	bf ef       	ldi	r27, 0xFF	; 255
    1002:	2f ef       	ldi	r18, 0xFF	; 255
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	b1 50       	subi	r27, 0x01	; 1
    1008:	20 40       	sbci	r18, 0x00	; 0
    100a:	80 40       	sbci	r24, 0x00	; 0
    100c:	e1 f7       	brne	.-8      	; 0x1006 <opt_select_music+0x150>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <opt_select_music+0x15a>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <opt_select_music+0x15c>
	
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("Music:", 2);

	while(ToSettings == 0)
    1012:	ef 28       	or	r14, r15
    1014:	81 f4       	brne	.+32     	; 0x1036 <opt_select_music+0x180>
    1016:	0c 2d       	mov	r16, r12
    1018:	1d 2d       	mov	r17, r13
    101a:	83 cf       	rjmp	.-250    	; 0xf22 <opt_select_music+0x6c>
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
    101c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
    1020:	89 2b       	or	r24, r25
    1022:	09 f0       	breq	.+2      	; 0x1026 <opt_select_music+0x170>
    1024:	90 cf       	rjmp	.-224    	; 0xf46 <opt_select_music+0x90>
		//Read ADC
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
    1026:	ea 2c       	mov	r14, r10
    1028:	fb 2c       	mov	r15, r11
    102a:	95 cf       	rjmp	.-214    	; 0xf56 <opt_select_music+0xa0>
		if(joystick_right() && !change) ToSettings = 1;
    102c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
    1030:	ec 2c       	mov	r14, r12
    1032:	fd 2c       	mov	r15, r13
    1034:	90 cf       	rjmp	.-224    	; 0xf56 <opt_select_music+0xa0>
			
		}
		
		
	}
}
    1036:	6e 96       	adiw	r28, 0x1e	; 30
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	08 95       	ret

00001058 <view_highscore>:

void view_highscore()
{
    1058:	4f 92       	push	r4
    105a:	5f 92       	push	r5
    105c:	6f 92       	push	r6
    105e:	7f 92       	push	r7
    1060:	8f 92       	push	r8
    1062:	9f 92       	push	r9
    1064:	af 92       	push	r10
    1066:	bf 92       	push	r11
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
	oled_clear_SRAM();
    1078:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
	oled_home();
    107c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
	oled_cstring_write("High score:", 2);
    1080:	62 e0       	ldi	r22, 0x02	; 2
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	83 e4       	ldi	r24, 0x43	; 67
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
    108c:	0f 2e       	mov	r0, r31
    108e:	fe e0       	ldi	r31, 0x0E	; 14
    1090:	8f 2e       	mov	r8, r31
    1092:	f1 e0       	ldi	r31, 0x01	; 1
    1094:	9f 2e       	mov	r9, r31
    1096:	f0 2d       	mov	r31, r0
    1098:	0f 2e       	mov	r0, r31
    109a:	f6 e3       	ldi	r31, 0x36	; 54
    109c:	6f 2e       	mov	r6, r31
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	7f 2e       	mov	r7, r31
    10a2:	f0 2d       	mov	r31, r0
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
		if(joystick_left())
    10a4:	68 94       	set
    10a6:	44 24       	eor	r4, r4
    10a8:	41 f8       	bld	r4, 1
    10aa:	51 2c       	mov	r5, r1
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
    10ac:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
		if(joystick_left())
    10b0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
    10b4:	5c 01       	movw	r10, r24
    10b6:	74 01       	movw	r14, r8
    10b8:	83 01       	movw	r16, r6
    10ba:	c4 2d       	mov	r28, r4
    10bc:	d5 2d       	mov	r29, r5
		}
		
		for (int i = 0; i < 5; i += 2)
		{
			//Prints higscore
			oled_go_to(1,2+i);
    10be:	6c 2f       	mov	r22, r28
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_cstring_write(int_to_cstring(i+1),1);
    10c6:	ce 01       	movw	r24, r28
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	0e 94 ce 05 	call	0xb9c	; 0xb9c <int_to_cstring>
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_cstring_write(". ",1);
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	8f e4       	ldi	r24, 0x4F	; 79
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i],1);
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	c7 01       	movw	r24, r14
    10e8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_cstring_write(": ",1);
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	8b ef       	ldi	r24, 0xFB	; 251
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
    10f8:	68 01       	movw	r12, r16
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i]),1);
    10fa:	f8 01       	movw	r30, r16
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	0e 94 ce 05 	call	0xb9c	; 0xb9c <int_to_cstring>
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			
			//Adapts next line
			if (HIGHSCORE_LIST[i] > 99) oled_cstring_write(" ",1);
    110c:	f8 01       	movw	r30, r16
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	84 36       	cpi	r24, 0x64	; 100
    1114:	91 05       	cpc	r25, r1
    1116:	3c f0       	brlt	.+14     	; 0x1126 <view_highscore+0xce>
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	8a e3       	ldi	r24, 0x3A	; 58
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <view_highscore+0xec>
			else if (HIGHSCORE_LIST[i] > 9) oled_cstring_write("  ",1);
    1126:	0a 97       	sbiw	r24, 0x0a	; 10
    1128:	3c f0       	brlt	.+14     	; 0x1138 <view_highscore+0xe0>
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	89 e3       	ldi	r24, 0x39	; 57
    1130:	92 e0       	ldi	r25, 0x02	; 2
    1132:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <view_highscore+0xec>
			else oled_cstring_write("   ",1);
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	88 e3       	ldi	r24, 0x38	; 56
    113e:	92 e0       	ldi	r25, 0x02	; 2
    1140:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			
			oled_cstring_write(int_to_cstring(i+2),1);
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 ce 05 	call	0xb9c	; 0xb9c <int_to_cstring>
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_cstring_write(". ",1);
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	8f e4       	ldi	r24, 0x4F	; 79
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	c7 01       	movw	r24, r14
    1164:	04 96       	adiw	r24, 0x04	; 4
    1166:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_cstring_write(": ",1);
    116a:	61 e0       	ldi	r22, 0x01	; 1
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	8b ef       	ldi	r24, 0xFB	; 251
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
    1176:	f6 01       	movw	r30, r12
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <int_to_cstring>
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
    1188:	22 96       	adiw	r28, 0x02	; 2
    118a:	f8 e0       	ldi	r31, 0x08	; 8
    118c:	ef 0e       	add	r14, r31
    118e:	f1 1c       	adc	r15, r1
    1190:	0c 5f       	subi	r16, 0xFC	; 252
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			 ToSettings = 1;
			 
		}
		
		for (int i = 0; i < 5; i += 2)
    1194:	c8 30       	cpi	r28, 0x08	; 8
    1196:	d1 05       	cpc	r29, r1
    1198:	09 f0       	breq	.+2      	; 0x119c <view_highscore+0x144>
    119a:	91 cf       	rjmp	.-222    	; 0x10be <view_highscore+0x66>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
			oled_cstring_write(": ",1);
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
			
		}
		oled_update_from_SRAM();
    119c:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
    11a0:	ab 28       	or	r10, r11
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <view_highscore+0x14e>
    11a4:	83 cf       	rjmp	.-250    	; 0x10ac <view_highscore+0x54>
		oled_update_from_SRAM();
		
		
	}

}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	7f 90       	pop	r7
    11c0:	6f 90       	pop	r6
    11c2:	5f 90       	pop	r5
    11c4:	4f 90       	pop	r4
    11c6:	08 95       	ret

000011c8 <opt_start_game>:

void opt_start_game()
{
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	2a 97       	sbiw	r28, 0x0a	; 10
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
	char current_score[10] = "0";  // shall increase more and more as long as the game is ongoing
    11dc:	80 e3       	ldi	r24, 0x30	; 48
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a0 e0       	ldi	r26, 0x00	; 0
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	ab 83       	std	Y+3, r26	; 0x03
    11ea:	bc 83       	std	Y+4, r27	; 0x04
    11ec:	fe 01       	movw	r30, r28
    11ee:	35 96       	adiw	r30, 0x05	; 5
    11f0:	86 e0       	ldi	r24, 0x06	; 6
    11f2:	df 01       	movw	r26, r30
    11f4:	1d 92       	st	X+, r1
    11f6:	8a 95       	dec	r24
    11f8:	e9 f7       	brne	.-6      	; 0x11f4 <opt_start_game+0x2c>
	//if(atoi(current_score) > 25) atoi transform a cstring og integers to its number
	int back_to_menu = 0;
	
	
	
	oled_clear_SRAM();
    11fa:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
	oled_home(); 
    11fe:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
	oled_cstring_write("The game has started", 1);
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	82 e5       	ldi	r24, 0x52	; 82
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
	oled_update_from_SRAM();
    120e:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
	
	
	while (!back_to_menu) // game loop
	{
		adc_update_current_input();
    1212:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
		if(joystick_left()) 
    1216:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
    121a:	89 2b       	or	r24, r25
    121c:	61 f1       	breq	.+88     	; 0x1276 <opt_start_game+0xae>
		{
			oled_clear_SRAM();
    121e:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
			oled_home();
    1222:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
			oled_cstring_write("Are u sure u want to leave?", 1);
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	87 e6       	ldi	r24, 0x67	; 103
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_go_to(0,3); 
    1232:	63 e0       	ldi	r22, 0x03	; 3
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_cstring_write("joytick left = yes",1);
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	83 e8       	ldi	r24, 0x83	; 131
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_go_to(0,4);
    1246:	64 e0       	ldi	r22, 0x04	; 4
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_cstring_write("joytick right = no",1);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	86 e9       	ldi	r24, 0x96	; 150
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
			oled_update_from_SRAM();
    125a:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
			
			
			while(1)
			{
				adc_update_current_input();
    125e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <adc_update_current_input>
				if(joystick_left())
    1262:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
    1266:	89 2b       	or	r24, r25
    1268:	29 f5       	brne	.+74     	; 0x12b4 <opt_start_game+0xec>
				{
					 back_to_menu = 1;
					 break;
				}
				if(joystick_right())
    126a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
    126e:	89 2b       	or	r24, r25
    1270:	b1 f3       	breq	.-20     	; 0x125e <opt_start_game+0x96>
				{
					oled_clear_SRAM();
    1272:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
			}
			
		}
		
	    //prints current score 
		oled_home();
    1276:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
		oled_cstring_write("The game has started", 1);
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	82 e5       	ldi	r24, 0x52	; 82
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_go_to(0,3);
    1286:	63 e0       	ldi	r22, 0x03	; 3
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write("Current score: " ,1);
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	89 ea       	ldi	r24, 0xA9	; 169
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_go_to(80,3);
    129a:	63 e0       	ldi	r22, 0x03	; 3
    129c:	80 e5       	ldi	r24, 0x50	; 80
    129e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write(current_score ,1);
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_update_from_SRAM();
    12ae:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
    12b2:	af cf       	rjmp	.-162    	; 0x1212 <opt_start_game+0x4a>
			}
			
		}
		
	    //prints current score 
		oled_home();
    12b4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <oled_home>
		oled_cstring_write("The game has started", 1);
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	82 e5       	ldi	r24, 0x52	; 82
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_go_to(0,3);
    12c4:	63 e0       	ldi	r22, 0x03	; 3
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write("Current score: " ,1);
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	89 ea       	ldi	r24, 0xA9	; 169
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_go_to(80,3);
    12d8:	63 e0       	ldi	r22, 0x03	; 3
    12da:	80 e5       	ldi	r24, 0x50	; 80
    12dc:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write(current_score ,1);
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	ce 01       	movw	r24, r28
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		oled_update_from_SRAM();
    12ec:	0e 94 1d 0c 	call	0x183a	; 0x183a <oled_update_from_SRAM>
		
		
	}
	
	
}
    12f0:	2a 96       	adiw	r28, 0x0a	; 10
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <opt_exit_application>:

void opt_exit_application()
{
	EXIT_APPLICATION = 1; 
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	90 93 bd 02 	sts	0x02BD, r25
    130a:	80 93 bc 02 	sts	0x02BC, r24
    130e:	08 95       	ret

00001310 <adc_read>:
{
	//unsigned char *p;	
	volatile char *p = (char *) 0x1400;
	
	//Selects correct address for chosen channel
	p[0] =  0x1403 + channel;
    1310:	8d 5f       	subi	r24, 0xFD	; 253
    1312:	80 93 00 14 	sts	0x1400, r24
	
	//Wait for result
	while(!finished){}
    1316:	80 91 c2 02 	lds	r24, 0x02C2
    131a:	90 91 c3 02 	lds	r25, 0x02C3
    131e:	89 2b       	or	r24, r25
    1320:	d1 f3       	breq	.-12     	; 0x1316 <adc_read+0x6>
	finished = 0;
    1322:	10 92 c3 02 	sts	0x02C3, r1
    1326:	10 92 c2 02 	sts	0x02C2, r1
	
	//Gather data
	return *p;
    132a:	80 91 00 14 	lds	r24, 0x1400
}
    132e:	08 95       	ret

00001330 <__vector_2>:
	
	
}

ISR(INT1_vect)
{
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
	finished = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	90 93 c3 02 	sts	0x02C3, r25
    1346:	80 93 c2 02 	sts	0x02C2, r24
}
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	0f 90       	pop	r0
    1354:	1f 90       	pop	r1
    1356:	18 95       	reti

00001358 <adc_joy_calibrate>:

void adc_joy_calibrate()
{
	//Reads midpoint & defines it as zero level
	x_mid_point = adc_read(1);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 88 09 	call	0x1310	; 0x1310 <adc_read>
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	90 93 0f 03 	sts	0x030F, r25
    1366:	80 93 0e 03 	sts	0x030E, r24
	y_mid_point = adc_read(2);
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 88 09 	call	0x1310	; 0x1310 <adc_read>
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	90 93 25 03 	sts	0x0325, r25
    1378:	80 93 24 03 	sts	0x0324, r24
    137c:	08 95       	ret

0000137e <adc_init>:
}

void adc_init()
{
	
	sei();
    137e:	78 94       	sei
	//Sets MCU control register, for falling edge
	MCUCR |= (1<<ISC11);
    1380:	85 b7       	in	r24, 0x35	; 53
    1382:	88 60       	ori	r24, 0x08	; 8
    1384:	85 bf       	out	0x35, r24	; 53
	
	//Enables interrupt on pin
	GICR |= (1 << INT1);
    1386:	8b b7       	in	r24, 0x3b	; 59
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	8b bf       	out	0x3b, r24	; 59
	
	//Enable pin inputs
	DDRB &= ~((1 << PB1)|(1 << PB2)|(1 << PB3));
    138c:	87 b3       	in	r24, 0x17	; 23
    138e:	81 7f       	andi	r24, 0xF1	; 241
    1390:	87 bb       	out	0x17, r24	; 23
	
	//Calibrates joystick
	adc_joy_calibrate();
    1392:	0e 94 ac 09 	call	0x1358	; 0x1358 <adc_joy_calibrate>
	cli();
    1396:	f8 94       	cli
    1398:	08 95       	ret

0000139a <adc_joy_position>:
	x_mid_point = adc_read(1);
	y_mid_point = adc_read(2);
}

struct j_pos adc_joy_position()
{
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <adc_joy_position+0x12>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <adc_joy_position+0x14>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <adc_joy_position+0x16>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t joystick_y_analog = 0;
	int joystick_x_perc = 0;
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 88 09 	call	0x1310	; 0x1310 <adc_read>
    13bc:	08 2f       	mov	r16, r24
	joystick_y_analog = adc_read(2);
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 88 09 	call	0x1310	; 0x1310 <adc_read>
    13c6:	c8 2e       	mov	r12, r24
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    13c8:	20 91 0e 03 	lds	r18, 0x030E
    13cc:	30 91 0f 03 	lds	r19, 0x030F
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    13d0:	e0 90 24 03 	lds	r14, 0x0324
    13d4:	f0 90 25 03 	lds	r15, 0x0325
	
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    13d8:	16 b3       	in	r17, 0x16	; 22
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
	joystick_y_analog = adc_read(2);
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    13da:	80 2f       	mov	r24, r16
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	82 1b       	sub	r24, r18
    13e0:	93 0b       	sbc	r25, r19
    13e2:	0f 2e       	mov	r0, r31
    13e4:	f4 e6       	ldi	r31, 0x64	; 100
    13e6:	df 2e       	mov	r13, r31
    13e8:	f0 2d       	mov	r31, r0
    13ea:	d8 9e       	mul	r13, r24
    13ec:	b0 01       	movw	r22, r0
    13ee:	d9 9e       	mul	r13, r25
    13f0:	70 0d       	add	r23, r0
    13f2:	11 24       	eor	r1, r1
    13f4:	88 27       	eor	r24, r24
    13f6:	77 fd       	sbrc	r23, 7
    13f8:	80 95       	com	r24
    13fa:	98 2f       	mov	r25, r24
    13fc:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	4e ef       	ldi	r20, 0xFE	; 254
    1406:	52 e4       	ldi	r21, 0x42	; 66
    1408:	0e 94 21 10 	call	0x2042	; 0x2042 <__divsf3>
    140c:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
    1410:	06 2f       	mov	r16, r22
    1412:	86 2f       	mov	r24, r22
    1414:	97 2f       	mov	r25, r23
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    141a:	8c 2d       	mov	r24, r12
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	8e 19       	sub	r24, r14
    1420:	9f 09       	sbc	r25, r15
    1422:	d8 9e       	mul	r13, r24
    1424:	b0 01       	movw	r22, r0
    1426:	d9 9e       	mul	r13, r25
    1428:	70 0d       	add	r23, r0
    142a:	11 24       	eor	r1, r1
    142c:	88 27       	eor	r24, r24
    142e:	77 fd       	sbrc	r23, 7
    1430:	80 95       	com	r24
    1432:	98 2f       	mov	r25, r24
    1434:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	4e ef       	ldi	r20, 0xFE	; 254
    143e:	52 e4       	ldi	r21, 0x42	; 66
    1440:	0e 94 21 10 	call	0x2042	; 0x2042 <__divsf3>
    1444:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
    1448:	86 2f       	mov	r24, r22
    144a:	97 2f       	mov	r25, r23
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
	
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    1450:	16 95       	lsr	r17
    1452:	16 95       	lsr	r17
    1454:	16 95       	lsr	r17
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	18 27       	eor	r17, r24
    145a:	11 70       	andi	r17, 0x01	; 1
	
	return pos;
    145c:	1d 83       	std	Y+5, r17	; 0x05
    145e:	1e 82       	std	Y+6, r1	; 0x06
    1460:	20 2f       	mov	r18, r16
    1462:	3a 81       	ldd	r19, Y+2	; 0x02
    1464:	46 2f       	mov	r20, r22
    1466:	5c 81       	ldd	r21, Y+4	; 0x04
    1468:	61 2f       	mov	r22, r17
    146a:	70 e0       	ldi	r23, 0x00	; 0
}
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	26 96       	adiw	r28, 0x06	; 6
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	08 95       	ret

0000148e <adc_slider_position_left>:

int adc_slider_position_left()
{
	return 100*adc_read(3)/((float)255);
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 88 09 	call	0x1310	; 0x1310 <adc_read>
    1496:	24 e6       	ldi	r18, 0x64	; 100
    1498:	82 9f       	mul	r24, r18
    149a:	c0 01       	movw	r24, r0
    149c:	11 24       	eor	r1, r1
    149e:	bc 01       	movw	r22, r24
    14a0:	88 27       	eor	r24, r24
    14a2:	77 fd       	sbrc	r23, 7
    14a4:	80 95       	com	r24
    14a6:	98 2f       	mov	r25, r24
    14a8:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	53 e4       	ldi	r21, 0x43	; 67
    14b4:	0e 94 21 10 	call	0x2042	; 0x2042 <__divsf3>
    14b8:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
}
    14bc:	cb 01       	movw	r24, r22
    14be:	08 95       	ret

000014c0 <adc_slider_position_right>:

int adc_slider_position_right()
{
	return 100*adc_read(4)/((float)255);
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 88 09 	call	0x1310	; 0x1310 <adc_read>
    14c8:	24 e6       	ldi	r18, 0x64	; 100
    14ca:	82 9f       	mul	r24, r18
    14cc:	c0 01       	movw	r24, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	bc 01       	movw	r22, r24
    14d2:	88 27       	eor	r24, r24
    14d4:	77 fd       	sbrc	r23, 7
    14d6:	80 95       	com	r24
    14d8:	98 2f       	mov	r25, r24
    14da:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4f e7       	ldi	r20, 0x7F	; 127
    14e4:	53 e4       	ldi	r21, 0x43	; 67
    14e6:	0e 94 21 10 	call	0x2042	; 0x2042 <__divsf3>
    14ea:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
}
    14ee:	cb 01       	movw	r24, r22
    14f0:	08 95       	ret

000014f2 <adc_update_current_input>:
}

void adc_update_current_input()
{
	//CURRENT INPUT IS NOW PREVIOUS INPUT
	PREV_INPUT = CURRENT_INPUT;
    14f2:	8e e0       	ldi	r24, 0x0E	; 14
    14f4:	e0 e0       	ldi	r30, 0x00	; 0
    14f6:	f3 e0       	ldi	r31, 0x03	; 3
    14f8:	a0 e3       	ldi	r26, 0x30	; 48
    14fa:	b3 e0       	ldi	r27, 0x03	; 3
    14fc:	01 90       	ld	r0, Z+
    14fe:	0d 92       	st	X+, r0
    1500:	8a 95       	dec	r24
    1502:	e1 f7       	brne	.-8      	; 0x14fc <adc_update_current_input+0xa>
	
	CURRENT_INPUT.joystick = adc_joy_position();
    1504:	0e 94 cd 09 	call	0x139a	; 0x139a <adc_joy_position>
    1508:	20 93 00 03 	sts	0x0300, r18
    150c:	30 93 01 03 	sts	0x0301, r19
    1510:	40 93 02 03 	sts	0x0302, r20
    1514:	50 93 03 03 	sts	0x0303, r21
    1518:	60 93 04 03 	sts	0x0304, r22
    151c:	70 93 05 03 	sts	0x0305, r23
	
	//Checks sliders
	CURRENT_INPUT.slider_l = adc_slider_position_left();
    1520:	0e 94 47 0a 	call	0x148e	; 0x148e <adc_slider_position_left>
    1524:	90 93 07 03 	sts	0x0307, r25
    1528:	80 93 06 03 	sts	0x0306, r24
	CURRENT_INPUT.slider_r = adc_slider_position_right();
    152c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <adc_slider_position_right>
    1530:	90 93 09 03 	sts	0x0309, r25
    1534:	80 93 08 03 	sts	0x0308, r24
	
	//Checks button
	CURRENT_INPUT.button_l = PINB&(1<<PB1);
    1538:	86 b3       	in	r24, 0x16	; 22
    153a:	82 70       	andi	r24, 0x02	; 2
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	90 93 0b 03 	sts	0x030B, r25
    1542:	80 93 0a 03 	sts	0x030A, r24
	CURRENT_INPUT.button_r = PINB&(1<<PB2);
    1546:	86 b3       	in	r24, 0x16	; 22
    1548:	84 70       	andi	r24, 0x04	; 4
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	90 93 0d 03 	sts	0x030D, r25
    1550:	80 93 0c 03 	sts	0x030C, r24
    1554:	08 95       	ret

00001556 <joystick_down>:

}

int joystick_down()
{
	return (PREV_INPUT.joystick.y_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p < -JOYSTICK_MENU_DEADZONE);
    1556:	80 91 32 03 	lds	r24, 0x0332
    155a:	90 91 33 03 	lds	r25, 0x0333
    155e:	85 3c       	cpi	r24, 0xC5	; 197
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	5c f0       	brlt	.+22     	; 0x157a <joystick_down+0x24>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	20 91 02 03 	lds	r18, 0x0302
    156c:	30 91 03 03 	lds	r19, 0x0303
    1570:	24 3c       	cpi	r18, 0xC4	; 196
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	24 f0       	brlt	.+8      	; 0x157e <joystick_down+0x28>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	08 95       	ret
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
}
    157e:	08 95       	ret

00001580 <joystick_up>:

int joystick_up()
{
	return (PREV_INPUT.joystick.y_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p > JOYSTICK_MENU_DEADZONE);
    1580:	80 91 32 03 	lds	r24, 0x0332
    1584:	90 91 33 03 	lds	r25, 0x0333
    1588:	cc 97       	sbiw	r24, 0x3c	; 60
    158a:	5c f4       	brge	.+22     	; 0x15a2 <joystick_up+0x22>
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	20 91 02 03 	lds	r18, 0x0302
    1594:	30 91 03 03 	lds	r19, 0x0303
    1598:	2d 33       	cpi	r18, 0x3D	; 61
    159a:	31 05       	cpc	r19, r1
    159c:	24 f4       	brge	.+8      	; 0x15a6 <joystick_up+0x26>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	08 95       	ret
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
}
    15a6:	08 95       	ret

000015a8 <joystick_left>:

int joystick_left()
{
	return (PREV_INPUT.joystick.x_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p < -JOYSTICK_MENU_DEADZONE);
    15a8:	80 91 30 03 	lds	r24, 0x0330
    15ac:	90 91 31 03 	lds	r25, 0x0331
    15b0:	85 3c       	cpi	r24, 0xC5	; 197
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	5c f0       	brlt	.+22     	; 0x15cc <joystick_left+0x24>
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	20 91 00 03 	lds	r18, 0x0300
    15be:	30 91 01 03 	lds	r19, 0x0301
    15c2:	24 3c       	cpi	r18, 0xC4	; 196
    15c4:	3f 4f       	sbci	r19, 0xFF	; 255
    15c6:	24 f0       	brlt	.+8      	; 0x15d0 <joystick_left+0x28>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	08 95       	ret
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
}
    15d0:	08 95       	ret

000015d2 <joystick_right>:

int joystick_right()
{
	return (PREV_INPUT.joystick.x_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p > JOYSTICK_MENU_DEADZONE);
    15d2:	80 91 30 03 	lds	r24, 0x0330
    15d6:	90 91 31 03 	lds	r25, 0x0331
    15da:	cc 97       	sbiw	r24, 0x3c	; 60
    15dc:	5c f4       	brge	.+22     	; 0x15f4 <joystick_right+0x22>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	20 91 00 03 	lds	r18, 0x0300
    15e6:	30 91 01 03 	lds	r19, 0x0301
    15ea:	2d 33       	cpi	r18, 0x3D	; 61
    15ec:	31 05       	cpc	r19, r1
    15ee:	24 f4       	brge	.+8      	; 0x15f8 <joystick_right+0x26>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	08 95       	ret
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
}
    15f8:	08 95       	ret

000015fa <ext_mem_init>:
#include <avr/sleep.h>

void ext_mem_init()
{
	//Enables External Memory Interface
	MCUCR |= (1<<SRE);
    15fa:	85 b7       	in	r24, 0x35	; 53
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	85 bf       	out	0x35, r24	; 53
	
	//Turns off PC7-4 for address bits, they are used as jtag anyways
	SFIOR |= (1<<XMM2);
    1600:	80 b7       	in	r24, 0x30	; 48
    1602:	80 62       	ori	r24, 0x20	; 32
    1604:	80 bf       	out	0x30, r24	; 48
    1606:	08 95       	ret

00001608 <ext_mem_write>:

}

void ext_mem_write(char *address, char val)
{
	*address = val; 
    1608:	fc 01       	movw	r30, r24
    160a:	60 83       	st	Z, r22
    160c:	08 95       	ret

0000160e <ext_mem_read>:
}

char ext_mem_read(char *address)
{
	return *(address);
}
    160e:	fc 01       	movw	r30, r24
    1610:	80 81       	ld	r24, Z
    1612:	08 95       	ret

00001614 <oled_go_to>:
}

void oled_go_to(uint8_t col, uint8_t page)
{
	//Sets pointers
	page_index = page;
    1614:	60 93 3f 03 	sts	0x033F, r22
	col_index = col; 
    1618:	80 93 3e 03 	sts	0x033E, r24
	
	//Set page
	*OLED_CMD = 0xB0 | (0b00000111 & page_index);
    161c:	e0 91 61 01 	lds	r30, 0x0161
    1620:	f0 91 62 01 	lds	r31, 0x0162
    1624:	80 91 3f 03 	lds	r24, 0x033F
    1628:	87 70       	andi	r24, 0x07	; 7
    162a:	80 6b       	ori	r24, 0xB0	; 176
    162c:	80 83       	st	Z, r24
		
	//Set lower start col
	*OLED_CMD = (0b00001111 & col_index);
    162e:	e0 91 61 01 	lds	r30, 0x0161
    1632:	f0 91 62 01 	lds	r31, 0x0162
    1636:	80 91 3e 03 	lds	r24, 0x033E
    163a:	8f 70       	andi	r24, 0x0F	; 15
    163c:	80 83       	st	Z, r24
		
	//Set higher start col
	*OLED_CMD = 0x10 | (col_index >> 4);
    163e:	e0 91 61 01 	lds	r30, 0x0161
    1642:	f0 91 62 01 	lds	r31, 0x0162
    1646:	80 91 3e 03 	lds	r24, 0x033E
    164a:	82 95       	swap	r24
    164c:	8f 70       	andi	r24, 0x0F	; 15
    164e:	80 61       	ori	r24, 0x10	; 16
    1650:	80 83       	st	Z, r24
    1652:	08 95       	ret

00001654 <oled_page_write>:
}

void oled_page_write(uint8_t byte)
{
	//Set page
	*OLED_CMD = 0xB0 | (0b00000111 & page_index);
    1654:	e0 91 61 01 	lds	r30, 0x0161
    1658:	f0 91 62 01 	lds	r31, 0x0162
    165c:	90 91 3f 03 	lds	r25, 0x033F
    1660:	97 70       	andi	r25, 0x07	; 7
    1662:	90 6b       	ori	r25, 0xB0	; 176
    1664:	90 83       	st	Z, r25

	//Set lower start col
	*OLED_CMD = (0b00001111 & col_index);
    1666:	e0 91 61 01 	lds	r30, 0x0161
    166a:	f0 91 62 01 	lds	r31, 0x0162
    166e:	90 91 3e 03 	lds	r25, 0x033E
    1672:	9f 70       	andi	r25, 0x0F	; 15
    1674:	90 83       	st	Z, r25

	//Set higher start col
	*OLED_CMD = 0x10 | (col_index >> 4);
    1676:	e0 91 61 01 	lds	r30, 0x0161
    167a:	f0 91 62 01 	lds	r31, 0x0162
    167e:	90 91 3e 03 	lds	r25, 0x033E
    1682:	92 95       	swap	r25
    1684:	9f 70       	andi	r25, 0x0F	; 15
    1686:	90 61       	ori	r25, 0x10	; 16
    1688:	90 83       	st	Z, r25
	
	//Write value
	*OLED_DATA = byte;
    168a:	e0 91 5f 01 	lds	r30, 0x015F
    168e:	f0 91 60 01 	lds	r31, 0x0160
    1692:	80 83       	st	Z, r24
    1694:	08 95       	ret

00001696 <oled_clear_screen>:
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
	//Remembers where the pointers pointed
	uint8_t save_col = col_index;
    16a0:	f0 90 3e 03 	lds	r15, 0x033E
	uint8_t save_page = page_index;
    16a4:	00 91 3f 03 	lds	r16, 0x033F
    16a8:	d0 e0       	ldi	r29, 0x00	; 0
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <oled_clear_screen+0x32>
	//Clears all pixels
	for (int page = 0; page < 8; page++)
	{
		for (int column = 0; column < 128; column++)
		{
			oled_go_to(column,page); //0-7 pages with a byte in each
    16ae:	6d 2f       	mov	r22, r29
    16b0:	8c 2f       	mov	r24, r28
    16b2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_page_write(0);
    16b6:	81 2f       	mov	r24, r17
    16b8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <oled_page_write>
    16bc:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t save_page = page_index;
	
	//Clears all pixels
	for (int page = 0; page < 8; page++)
	{
		for (int column = 0; column < 128; column++)
    16be:	c0 38       	cpi	r28, 0x80	; 128
    16c0:	b1 f7       	brne	.-20     	; 0x16ae <oled_clear_screen+0x18>
    16c2:	df 5f       	subi	r29, 0xFF	; 255
	//Remembers where the pointers pointed
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;
	
	//Clears all pixels
	for (int page = 0; page < 8; page++)
    16c4:	d8 30       	cpi	r29, 0x08	; 8
    16c6:	11 f0       	breq	.+4      	; 0x16cc <oled_clear_screen+0x36>
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    16c8:	c1 2f       	mov	r28, r17
    16ca:	f1 cf       	rjmp	.-30     	; 0x16ae <oled_clear_screen+0x18>
			oled_page_write(0);
		}
	}
	
	//Resets pointers to previous position
	col_index = save_col;
    16cc:	f0 92 3e 03 	sts	0x033E, r15
	page_index = save_page;
    16d0:	00 93 3f 03 	sts	0x033F, r16
}
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	08 95       	ret

000016e0 <oled_home>:
}


void oled_home()
{
	oled_go_to(0,0);
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
    16e8:	08 95       	ret

000016ea <oled_write_SRAM>:
}

void oled_write_SRAM(char byte)
{
	uint16_t addr = col_index + 128*page_index;//Transfers from col and row pointer to index in SRAM buffer
    16ea:	90 91 3e 03 	lds	r25, 0x033E
    16ee:	20 91 3f 03 	lds	r18, 0x033F
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	24 9f       	mul	r18, r20
    16f6:	90 01       	movw	r18, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	29 0f       	add	r18, r25
    16fc:	31 1d       	adc	r19, r1
	if (addr < (0x0400) && addr >= 0) ext_mem_write((char *)(SRAM_BUFFER+addr),byte);
    16fe:	21 15       	cp	r18, r1
    1700:	94 e0       	ldi	r25, 0x04	; 4
    1702:	39 07       	cpc	r19, r25
    1704:	50 f4       	brcc	.+20     	; 0x171a <oled_write_SRAM+0x30>
    1706:	40 91 5d 01 	lds	r20, 0x015D
    170a:	50 91 5e 01 	lds	r21, 0x015E
    170e:	68 2f       	mov	r22, r24
    1710:	ca 01       	movw	r24, r20
    1712:	82 0f       	add	r24, r18
    1714:	93 1f       	adc	r25, r19
    1716:	0e 94 04 0b 	call	0x1608	; 0x1608 <ext_mem_write>
    171a:	08 95       	ret

0000171c <oled_char_write_big>:
	//Write value
	*OLED_DATA = byte;
}

int oled_char_write_big(char c)
{
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	28 e0       	ldi	r18, 0x08	; 8
    1726:	82 9f       	mul	r24, r18
    1728:	c0 01       	movw	r24, r0
    172a:	11 24       	eor	r1, r1
    172c:	ec 01       	movw	r28, r24
    172e:	c9 53       	subi	r28, 0x39	; 57
    1730:	dd 4f       	sbci	r29, 0xFD	; 253
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32; 
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 8; i++)
    1732:	00 e0       	ldi	r16, 0x00	; 0
    1734:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font8[char_array_index][i]));
    1736:	fe 01       	movw	r30, r28
    1738:	84 91       	lpm	r24, Z
    173a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    173e:	60 91 3f 03 	lds	r22, 0x033F
    1742:	80 91 3e 03 	lds	r24, 0x033E
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32; 
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 8; i++)
    174c:	0f 5f       	subi	r16, 0xFF	; 255
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	21 96       	adiw	r28, 0x01	; 1
    1752:	08 30       	cpi	r16, 0x08	; 8
    1754:	11 05       	cpc	r17, r1
    1756:	79 f7       	brne	.-34     	; 0x1736 <oled_char_write_big+0x1a>
	{
		oled_write_SRAM(pgm_read_byte(&font8[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	08 95       	ret

00001766 <oled_char_write_normal>:


int oled_char_write_normal(char c)
{
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
    176e:	c8 2f       	mov	r28, r24
    1770:	d0 e0       	ldi	r29, 0x00	; 0
    1772:	a0 97       	sbiw	r28, 0x20	; 32
    1774:	ce 01       	movw	r24, r28
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	c8 0f       	add	r28, r24
    1780:	d9 1f       	adc	r29, r25
    1782:	c4 51       	subi	r28, 0x14	; 20
    1784:	de 4f       	sbci	r29, 0xFE	; 254
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 5; i++)
    1786:	00 e0       	ldi	r16, 0x00	; 0
    1788:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font5[char_array_index][i]));
    178a:	fe 01       	movw	r30, r28
    178c:	84 91       	lpm	r24, Z
    178e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    1792:	60 91 3f 03 	lds	r22, 0x033F
    1796:	80 91 3e 03 	lds	r24, 0x033E
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 5; i++)
    17a0:	0f 5f       	subi	r16, 0xFF	; 255
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	21 96       	adiw	r28, 0x01	; 1
    17a6:	05 30       	cpi	r16, 0x05	; 5
    17a8:	11 05       	cpc	r17, r1
    17aa:	79 f7       	brne	.-34     	; 0x178a <oled_char_write_normal+0x24>
	{
		oled_write_SRAM(pgm_read_byte(&font5[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <oled_char_write_small>:


int oled_char_write_small(char c)
{
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	24 e0       	ldi	r18, 0x04	; 4
    17c4:	82 9f       	mul	r24, r18
    17c6:	c0 01       	movw	r24, r0
    17c8:	11 24       	eor	r1, r1
    17ca:	ec 01       	movw	r28, r24
    17cc:	c0 51       	subi	r28, 0x10	; 16
    17ce:	d0 40       	sbci	r29, 0x00	; 0
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 4; i++)
    17d0:	00 e0       	ldi	r16, 0x00	; 0
    17d2:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font4[char_array_index][i]));
    17d4:	fe 01       	movw	r30, r28
    17d6:	84 91       	lpm	r24, Z
    17d8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    17dc:	60 91 3f 03 	lds	r22, 0x033F
    17e0:	80 91 3e 03 	lds	r24, 0x033E
    17e4:	8f 5f       	subi	r24, 0xFF	; 255
    17e6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 4; i++)
    17ea:	0f 5f       	subi	r16, 0xFF	; 255
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	21 96       	adiw	r28, 0x01	; 1
    17f0:	04 30       	cpi	r16, 0x04	; 4
    17f2:	11 05       	cpc	r17, r1
    17f4:	79 f7       	brne	.-34     	; 0x17d4 <oled_char_write_small+0x1a>
	{
		oled_write_SRAM(pgm_read_byte(&font4[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <oled_read_SRAM>:
	if (addr < (0x0400) && addr >= 0) ext_mem_write((char *)(SRAM_BUFFER+addr),byte);
}

char oled_read_SRAM()
{
	uint16_t addr = col_index + 128*page_index;//Transfers from col and row pointer to index in SRAM buffer
    1804:	20 91 3e 03 	lds	r18, 0x033E
    1808:	80 91 3f 03 	lds	r24, 0x033F
    180c:	30 e8       	ldi	r19, 0x80	; 128
    180e:	83 9f       	mul	r24, r19
    1810:	c0 01       	movw	r24, r0
    1812:	11 24       	eor	r1, r1
    1814:	82 0f       	add	r24, r18
    1816:	91 1d       	adc	r25, r1
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
    1818:	9c 01       	movw	r18, r24
    181a:	21 50       	subi	r18, 0x01	; 1
    181c:	31 09       	sbc	r19, r1
    181e:	2f 3f       	cpi	r18, 0xFF	; 255
    1820:	33 40       	sbci	r19, 0x03	; 3
    1822:	48 f4       	brcc	.+18     	; 0x1836 <oled_read_SRAM+0x32>
    1824:	20 91 5d 01 	lds	r18, 0x015D
    1828:	30 91 5e 01 	lds	r19, 0x015E
    182c:	82 0f       	add	r24, r18
    182e:	93 1f       	adc	r25, r19
    1830:	0e 94 07 0b 	call	0x160e	; 0x160e <ext_mem_read>
    1834:	08 95       	ret
	else return 0; //If out of bounds, we return 
    1836:	80 e0       	ldi	r24, 0x00	; 0
}
    1838:	08 95       	ret

0000183a <oled_update_from_SRAM>:

void oled_update_from_SRAM()
{
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
	//Save current row and column index
	uint8_t save_col = col_index;
    1844:	f0 90 3e 03 	lds	r15, 0x033E
	uint8_t save_page = page_index;
    1848:	00 91 3f 03 	lds	r16, 0x033F

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
    184c:	d0 e0       	ldi	r29, 0x00	; 0
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
	else return 0; //If out of bounds, we return 
}

void oled_update_from_SRAM()
{
    184e:	10 e0       	ldi	r17, 0x00	; 0
    1850:	0e c0       	rjmp	.+28     	; 0x186e <oled_update_from_SRAM+0x34>
	uint8_t c, p;
	for (c = 0; c < 128; c++)
	{
		for (p = 0; p < 8; p++)
		{
			oled_go_to(c,p);
    1852:	6c 2f       	mov	r22, r28
    1854:	8d 2f       	mov	r24, r29
    1856:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
			oled_page_write(oled_read_SRAM());
    185a:	0e 94 02 0c 	call	0x1804	; 0x1804 <oled_read_SRAM>
    185e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <oled_page_write>

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
	{
		for (p = 0; p < 8; p++)
    1862:	cf 5f       	subi	r28, 0xFF	; 255
    1864:	c8 30       	cpi	r28, 0x08	; 8
    1866:	a9 f7       	brne	.-22     	; 0x1852 <oled_update_from_SRAM+0x18>
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
    1868:	df 5f       	subi	r29, 0xFF	; 255
    186a:	d0 38       	cpi	r29, 0x80	; 128
    186c:	11 f0       	breq	.+4      	; 0x1872 <oled_update_from_SRAM+0x38>
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
	else return 0; //If out of bounds, we return 
}

void oled_update_from_SRAM()
{
    186e:	c1 2f       	mov	r28, r17
    1870:	f0 cf       	rjmp	.-32     	; 0x1852 <oled_update_from_SRAM+0x18>
			oled_page_write(oled_read_SRAM());
		}
	}

	//Recover old indexes
	col_index = save_col;
    1872:	f0 92 3e 03 	sts	0x033E, r15
	page_index = save_page;
    1876:	00 93 3f 03 	sts	0x033F, r16
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	08 95       	ret

00001886 <oled_clear_SRAM>:

void oled_clear_SRAM()
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
	for (uint16_t i = 0; i < 0x400; i++) ext_mem_write((char *)(SRAM_BUFFER+i),0);
    188a:	c0 e0       	ldi	r28, 0x00	; 0
    188c:	d0 e0       	ldi	r29, 0x00	; 0
    188e:	80 91 5d 01 	lds	r24, 0x015D
    1892:	90 91 5e 01 	lds	r25, 0x015E
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	8c 0f       	add	r24, r28
    189a:	9d 1f       	adc	r25, r29
    189c:	0e 94 04 0b 	call	0x1608	; 0x1608 <ext_mem_write>
    18a0:	21 96       	adiw	r28, 0x01	; 1
    18a2:	c1 15       	cp	r28, r1
    18a4:	84 e0       	ldi	r24, 0x04	; 4
    18a6:	d8 07       	cpc	r29, r24
    18a8:	91 f7       	brne	.-28     	; 0x188e <oled_clear_SRAM+0x8>
}
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	08 95       	ret

000018b0 <oled_init>:


void oled_init()
{
	//Enable external memory
	ext_mem_init();
    18b0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ext_mem_init>
	
	//Set row and col pointer to 0
	page_index = 0;
    18b4:	10 92 3f 03 	sts	0x033F, r1
	col_index = 0;
    18b8:	10 92 3e 03 	sts	0x033E, r1
	
	//Configures the oled (copied from datasheet (shamelessly))
	*OLED_CMD = DISPLAY_OFF;									//Display  off
    18bc:	e0 91 61 01 	lds	r30, 0x0161
    18c0:	f0 91 62 01 	lds	r31, 0x0162
    18c4:	8e ea       	ldi	r24, 0xAE	; 174
    18c6:	80 83       	st	Z, r24
	*OLED_CMD = SEGMENT_REMAP_MODE_0;							//Segment  remap
    18c8:	e0 91 61 01 	lds	r30, 0x0161
    18cc:	f0 91 62 01 	lds	r31, 0x0162
    18d0:	81 ea       	ldi	r24, 0xA1	; 161
    18d2:	80 83       	st	Z, r24
	*OLED_CMD = COMMON_PADS_HARDWARE;							//Common  pads  hardware:  alternative
    18d4:	e0 91 61 01 	lds	r30, 0x0161
    18d8:	f0 91 62 01 	lds	r31, 0x0162
    18dc:	8a ed       	ldi	r24, 0xDA	; 218
    18de:	80 83       	st	Z, r24
	*OLED_CMD = 0x12;
    18e0:	e0 91 61 01 	lds	r30, 0x0161
    18e4:	f0 91 62 01 	lds	r31, 0x0162
    18e8:	82 e1       	ldi	r24, 0x12	; 18
    18ea:	80 83       	st	Z, r24
	*OLED_CMD = COMMON_OUTPUT_SCAN_DIRECTION;					//Common output scan direction:com63~com0
    18ec:	e0 91 61 01 	lds	r30, 0x0161
    18f0:	f0 91 62 01 	lds	r31, 0x0162
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	80 83       	st	Z, r24
	*OLED_CMD = MULTIPLEX_RATIO_MODE_63;						//Multiplex  ration  mode:63
    18f8:	e0 91 61 01 	lds	r30, 0x0161
    18fc:	f0 91 62 01 	lds	r31, 0x0162
    1900:	88 ea       	ldi	r24, 0xA8	; 168
    1902:	80 83       	st	Z, r24
	*OLED_CMD = 0x3f;
    1904:	e0 91 61 01 	lds	r30, 0x0161
    1908:	f0 91 62 01 	lds	r31, 0x0162
    190c:	8f e3       	ldi	r24, 0x3F	; 63
    190e:	80 83       	st	Z, r24
	*OLED_CMD = DISPLAY_DIVITE_RATIO_OSC_FREQ_MODE;				//Display divide ratio/osc. freq. mode
    1910:	e0 91 61 01 	lds	r30, 0x0161
    1914:	f0 91 62 01 	lds	r31, 0x0162
    1918:	85 ed       	ldi	r24, 0xD5	; 213
    191a:	80 83       	st	Z, r24
	*OLED_CMD = 0x80;
    191c:	e0 91 61 01 	lds	r30, 0x0161
    1920:	f0 91 62 01 	lds	r31, 0x0162
    1924:	80 e8       	ldi	r24, 0x80	; 128
    1926:	80 83       	st	Z, r24
	*OLED_CMD = CONTRAST_CONTROL;								//Contrast  control
    1928:	e0 91 61 01 	lds	r30, 0x0161
    192c:	f0 91 62 01 	lds	r31, 0x0162
    1930:	81 e8       	ldi	r24, 0x81	; 129
    1932:	80 83       	st	Z, r24
	*OLED_CMD = 0x50;
    1934:	e0 91 61 01 	lds	r30, 0x0161
    1938:	f0 91 62 01 	lds	r31, 0x0162
    193c:	80 e5       	ldi	r24, 0x50	; 80
    193e:	80 83       	st	Z, r24
	*OLED_CMD = PRE_CHARGE_PERIOD;								//Set  pre-charge  period
    1940:	e0 91 61 01 	lds	r30, 0x0161
    1944:	f0 91 62 01 	lds	r31, 0x0162
    1948:	89 ed       	ldi	r24, 0xD9	; 217
    194a:	80 83       	st	Z, r24
	*OLED_CMD = 0x21;
    194c:	e0 91 61 01 	lds	r30, 0x0161
    1950:	f0 91 62 01 	lds	r31, 0x0162
    1954:	81 e2       	ldi	r24, 0x21	; 33
    1956:	80 83       	st	Z, r24
	*OLED_CMD = SET_MEMORY_ADDRESSING_MODE_PAGE;				//Set  Memory  Addressing  Mode
    1958:	e0 91 61 01 	lds	r30, 0x0161
    195c:	f0 91 62 01 	lds	r31, 0x0162
    1960:	82 e2       	ldi	r24, 0x22	; 34
    1962:	80 83       	st	Z, r24
	*OLED_CMD = 0x02;
    1964:	e0 91 61 01 	lds	r30, 0x0161
    1968:	f0 91 62 01 	lds	r31, 0x0162
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	80 83       	st	Z, r24
	*OLED_CMD = VCOM_DESELECT_LEVEL_MODE;						//VCOM  deselect  level  mode
    1970:	e0 91 61 01 	lds	r30, 0x0161
    1974:	f0 91 62 01 	lds	r31, 0x0162
    1978:	8b ed       	ldi	r24, 0xDB	; 219
    197a:	80 83       	st	Z, r24
	*OLED_CMD = 0x30;
    197c:	e0 91 61 01 	lds	r30, 0x0161
    1980:	f0 91 62 01 	lds	r31, 0x0162
    1984:	80 e3       	ldi	r24, 0x30	; 48
    1986:	80 83       	st	Z, r24
	*OLED_CMD = MASTER_CONFIG;									//Master  configuration
    1988:	e0 91 61 01 	lds	r30, 0x0161
    198c:	f0 91 62 01 	lds	r31, 0x0162
    1990:	8d ea       	ldi	r24, 0xAD	; 173
    1992:	80 83       	st	Z, r24
	*OLED_CMD = 0x00;
    1994:	e0 91 61 01 	lds	r30, 0x0161
    1998:	f0 91 62 01 	lds	r31, 0x0162
    199c:	10 82       	st	Z, r1
	*OLED_CMD = OUT_FOLLOWS_RAM_CONTENT;						//Out  follows  RAM  content
    199e:	e0 91 61 01 	lds	r30, 0x0161
    19a2:	f0 91 62 01 	lds	r31, 0x0162
    19a6:	84 ea       	ldi	r24, 0xA4	; 164
    19a8:	80 83       	st	Z, r24
	*OLED_CMD = SET_NORMAL_DISPLAY;								//Set  normal  display
    19aa:	e0 91 61 01 	lds	r30, 0x0161
    19ae:	f0 91 62 01 	lds	r31, 0x0162
    19b2:	86 ea       	ldi	r24, 0xA6	; 166
    19b4:	80 83       	st	Z, r24
	*OLED_CMD = 0x40;
    19b6:	e0 91 61 01 	lds	r30, 0x0161
    19ba:	f0 91 62 01 	lds	r31, 0x0162
    19be:	80 e4       	ldi	r24, 0x40	; 64
    19c0:	80 83       	st	Z, r24
	*OLED_CMD = DISPLAY_ON;										//Display  on
    19c2:	e0 91 61 01 	lds	r30, 0x0161
    19c6:	f0 91 62 01 	lds	r31, 0x0162
    19ca:	8f ea       	ldi	r24, 0xAF	; 175
    19cc:	80 83       	st	Z, r24
	
	//Clears the screen
	oled_clear_screen();
    19ce:	0e 94 4b 0b 	call	0x1696	; 0x1696 <oled_clear_screen>

	//Clear SRAM buffer
	oled_clear_SRAM();
    19d2:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
    19d6:	08 95       	ret

000019d8 <oled_cstring_write>:
{
	for (uint16_t i = 0; i < 0x400; i++) ext_mem_write((char *)(SRAM_BUFFER+i),0);
}

void oled_cstring_write(char *c, int size)
{	
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	ec 01       	movw	r28, r24
	int i = 0;
	if (size == 0) while (c[i] != '\0'){ oled_char_write_small(c[i]); i++; }
    19de:	61 15       	cp	r22, r1
    19e0:	71 05       	cpc	r23, r1
    19e2:	51 f4       	brne	.+20     	; 0x19f8 <oled_cstring_write+0x20>
    19e4:	88 81       	ld	r24, Y
    19e6:	88 23       	and	r24, r24
    19e8:	01 f1       	breq	.+64     	; 0x1a2a <oled_cstring_write+0x52>
    19ea:	21 96       	adiw	r28, 0x01	; 1
    19ec:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <oled_char_write_small>
    19f0:	89 91       	ld	r24, Y+
    19f2:	81 11       	cpse	r24, r1
    19f4:	fb cf       	rjmp	.-10     	; 0x19ec <oled_cstring_write+0x14>
    19f6:	19 c0       	rjmp	.+50     	; 0x1a2a <oled_cstring_write+0x52>
	else if (size == 1) while (c[i] != '\0'){ oled_char_write_normal(c[i]); i++; }
    19f8:	61 30       	cpi	r22, 0x01	; 1
    19fa:	71 05       	cpc	r23, r1
    19fc:	51 f4       	brne	.+20     	; 0x1a12 <oled_cstring_write+0x3a>
    19fe:	88 81       	ld	r24, Y
    1a00:	88 23       	and	r24, r24
    1a02:	99 f0       	breq	.+38     	; 0x1a2a <oled_cstring_write+0x52>
    1a04:	21 96       	adiw	r28, 0x01	; 1
    1a06:	0e 94 b3 0b 	call	0x1766	; 0x1766 <oled_char_write_normal>
    1a0a:	89 91       	ld	r24, Y+
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	fb cf       	rjmp	.-10     	; 0x1a06 <oled_cstring_write+0x2e>
    1a10:	0c c0       	rjmp	.+24     	; 0x1a2a <oled_cstring_write+0x52>
	else if (size == 2) while (c[i] != '\0'){ oled_char_write_big(c[i]); i++; }	
    1a12:	62 30       	cpi	r22, 0x02	; 2
    1a14:	71 05       	cpc	r23, r1
    1a16:	49 f4       	brne	.+18     	; 0x1a2a <oled_cstring_write+0x52>
    1a18:	88 81       	ld	r24, Y
    1a1a:	88 23       	and	r24, r24
    1a1c:	31 f0       	breq	.+12     	; 0x1a2a <oled_cstring_write+0x52>
    1a1e:	21 96       	adiw	r28, 0x01	; 1
    1a20:	0e 94 8e 0b 	call	0x171c	; 0x171c <oled_char_write_big>
    1a24:	89 91       	ld	r24, Y+
    1a26:	81 11       	cpse	r24, r1
    1a28:	fb cf       	rjmp	.-10     	; 0x1a20 <oled_cstring_write+0x48>
		
}
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	08 95       	ret

00001a30 <oled_write_pixel>:

void oled_write_pixel(int x, int y, int t)
{
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	ea 01       	movw	r28, r20
	//Save current row and column index
	uint8_t save_col = col_index;
    1a3c:	00 91 3e 03 	lds	r16, 0x033E
	uint8_t save_page = page_index;
    1a40:	10 91 3f 03 	lds	r17, 0x033F
	
	//Calculate position
	int page = y/8;
	int pixel_offset = y%8;
    1a44:	9b 01       	movw	r18, r22
    1a46:	27 70       	andi	r18, 0x07	; 7
    1a48:	30 78       	andi	r19, 0x80	; 128
    1a4a:	33 23       	and	r19, r19
    1a4c:	34 f4       	brge	.+12     	; 0x1a5a <oled_write_pixel+0x2a>
    1a4e:	21 50       	subi	r18, 0x01	; 1
    1a50:	31 09       	sbc	r19, r1
    1a52:	28 6f       	ori	r18, 0xF8	; 248
    1a54:	3f 6f       	ori	r19, 0xFF	; 255
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	f2 2e       	mov	r15, r18
	//Save current row and column index
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;
	
	//Calculate position
	int page = y/8;
    1a5c:	fb 01       	movw	r30, r22
    1a5e:	ff 23       	and	r31, r31
    1a60:	0c f4       	brge	.+2      	; 0x1a64 <oled_write_pixel+0x34>
    1a62:	37 96       	adiw	r30, 0x07	; 7
    1a64:	bf 01       	movw	r22, r30
    1a66:	75 95       	asr	r23
    1a68:	67 95       	ror	r22
    1a6a:	75 95       	asr	r23
    1a6c:	67 95       	ror	r22
    1a6e:	75 95       	asr	r23
    1a70:	67 95       	ror	r22
	int pixel_offset = y%8;
	
	int column = x;
	oled_go_to(column,page);
    1a72:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
	
	if (t == 0)
    1a76:	cd 2b       	or	r28, r29
    1a78:	79 f4       	brne	.+30     	; 0x1a98 <oled_write_pixel+0x68>
	{
		//Turn off pixel
		char current_state = oled_read_SRAM();
    1a7a:	0e 94 02 0c 	call	0x1804	; 0x1804 <oled_read_SRAM>
		oled_write_SRAM(current_state & ~(1 << pixel_offset));
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	9a 01       	movw	r18, r20
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <oled_write_pixel+0x5a>
    1a86:	22 0f       	add	r18, r18
    1a88:	33 1f       	adc	r19, r19
    1a8a:	fa 94       	dec	r15
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <oled_write_pixel+0x56>
    1a8e:	20 95       	com	r18
    1a90:	82 23       	and	r24, r18
    1a92:	0e 94 75 0b 	call	0x16ea	; 0x16ea <oled_write_SRAM>
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <oled_write_pixel+0x82>
	}
	else
	{
		//Turn on pixel
		char current_state = oled_read_SRAM();
    1a98:	0e 94 02 0c 	call	0x1804	; 0x1804 <oled_read_SRAM>
		char new_state = current_state | (1 << pixel_offset);
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	9a 01       	movw	r18, r20
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <oled_write_pixel+0x78>
    1aa4:	22 0f       	add	r18, r18
    1aa6:	33 1f       	adc	r19, r19
    1aa8:	fa 94       	dec	r15
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <oled_write_pixel+0x74>
		oled_write_SRAM(new_state);
    1aac:	82 2b       	or	r24, r18
    1aae:	0e 94 75 0b 	call	0x16ea	; 0x16ea <oled_write_SRAM>
	}
	
	//Recover old indexes
	col_index = save_col;
    1ab2:	00 93 3e 03 	sts	0x033E, r16
	page_index = save_page;
    1ab6:	10 93 3f 03 	sts	0x033F, r17
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	08 95       	ret

00001ac6 <oled_write_line>:

void oled_write_line(int x0, int y0, int x1, int y1)
{
    1ac6:	2f 92       	push	r2
    1ac8:	3f 92       	push	r3
    1aca:	4f 92       	push	r4
    1acc:	5f 92       	push	r5
    1ace:	6f 92       	push	r6
    1ad0:	7f 92       	push	r7
    1ad2:	8f 92       	push	r8
    1ad4:	9f 92       	push	r9
    1ad6:	af 92       	push	r10
    1ad8:	bf 92       	push	r11
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	28 97       	sbiw	r28, 0x08	; 8
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	2c 01       	movw	r4, r24
    1afc:	3b 01       	movw	r6, r22
    1afe:	8a 01       	movw	r16, r20
    1b00:	19 01       	movw	r2, r18
	//Calculates derivatives
	float dy_dx;
	float dx_dy;
	if ((x1 - x0) == 0)
    1b02:	48 17       	cp	r20, r24
    1b04:	59 07       	cpc	r21, r25
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <oled_write_line+0x44>
    1b08:	ad c0       	rjmp	.+346    	; 0x1c64 <oled_write_line+0x19e>
	{
		dy_dx = 100000;
		dx_dy = 0;
	}
	else if (((y1 - y0) == 0))
    1b0a:	26 17       	cp	r18, r22
    1b0c:	37 07       	cpc	r19, r23
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <oled_write_line+0x4c>
    1b10:	44 c0       	rjmp	.+136    	; 0x1b9a <oled_write_line+0xd4>
		dy_dx = 0;
		dx_dy = 100000;
	}
	else
	{
		dy_dx = ((float)(y1 - y0))/(x1 - x0);
    1b12:	b9 01       	movw	r22, r18
    1b14:	66 19       	sub	r22, r6
    1b16:	77 09       	sbc	r23, r7
    1b18:	88 27       	eor	r24, r24
    1b1a:	77 fd       	sbrc	r23, 7
    1b1c:	80 95       	com	r24
    1b1e:	98 2f       	mov	r25, r24
    1b20:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1b24:	4b 01       	movw	r8, r22
    1b26:	5c 01       	movw	r10, r24
    1b28:	b8 01       	movw	r22, r16
    1b2a:	64 19       	sub	r22, r4
    1b2c:	75 09       	sbc	r23, r5
    1b2e:	88 27       	eor	r24, r24
    1b30:	77 fd       	sbrc	r23, 7
    1b32:	80 95       	com	r24
    1b34:	98 2f       	mov	r25, r24
    1b36:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1b3a:	6b 01       	movw	r12, r22
    1b3c:	7c 01       	movw	r14, r24
    1b3e:	9b 01       	movw	r18, r22
    1b40:	ac 01       	movw	r20, r24
    1b42:	c5 01       	movw	r24, r10
    1b44:	b4 01       	movw	r22, r8
    1b46:	0e 94 21 10 	call	0x2042	; 0x2042 <__divsf3>
    1b4a:	69 83       	std	Y+1, r22	; 0x01
    1b4c:	7a 83       	std	Y+2, r23	; 0x02
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	9c 83       	std	Y+4, r25	; 0x04
		dx_dy = ((float)(x1 - x0))/(y1 - y0);
    1b52:	a5 01       	movw	r20, r10
    1b54:	94 01       	movw	r18, r8
    1b56:	c7 01       	movw	r24, r14
    1b58:	b6 01       	movw	r22, r12
    1b5a:	0e 94 21 10 	call	0x2042	; 0x2042 <__divsf3>
    1b5e:	6d 83       	std	Y+5, r22	; 0x05
    1b60:	7e 83       	std	Y+6, r23	; 0x06
    1b62:	8f 83       	std	Y+7, r24	; 0x07
    1b64:	98 87       	std	Y+8, r25	; 0x08
	}
	
	
	//Iterates over x-axis or y-axis, depending on derivative. This gives a clear line
	if (dy_dx < 1 && dy_dx > -1)
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	69 81       	ldd	r22, Y+1	; 0x01
    1b70:	7a 81       	ldd	r23, Y+2	; 0x02
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    1b7a:	88 23       	and	r24, r24
    1b7c:	0c f0       	brlt	.+2      	; 0x1b80 <oled_write_line+0xba>
    1b7e:	76 c0       	rjmp	.+236    	; 0x1c6c <oled_write_line+0x1a6>
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f eb       	ldi	r21, 0xBF	; 191
    1b88:	69 81       	ldd	r22, Y+1	; 0x01
    1b8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__gesf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	2c f0       	brlt	.+10     	; 0x1ba2 <oled_write_line+0xdc>
    1b98:	69 c0       	rjmp	.+210    	; 0x1c6c <oled_write_line+0x1a6>
		dy_dx = 100000;
		dx_dy = 0;
	}
	else if (((y1 - y0) == 0))
	{
		dy_dx = 0;
    1b9a:	19 82       	std	Y+1, r1	; 0x01
    1b9c:	1a 82       	std	Y+2, r1	; 0x02
    1b9e:	1b 82       	std	Y+3, r1	; 0x03
    1ba0:	1c 82       	std	Y+4, r1	; 0x04
	
	//Iterates over x-axis or y-axis, depending on derivative. This gives a clear line
	if (dy_dx < 1 && dy_dx > -1)
	{
		//If x1 < x0 we switch positions
		if (x1 < x0)
    1ba2:	04 15       	cp	r16, r4
    1ba4:	15 05       	cpc	r17, r5
    1ba6:	34 f4       	brge	.+12     	; 0x1bb4 <oled_write_line+0xee>
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
			y0 = ym;
    1ba8:	31 01       	movw	r6, r2
    1baa:	94 2d       	mov	r25, r4
    1bac:	85 2d       	mov	r24, r5
			int ym = y1;
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
    1bae:	28 01       	movw	r4, r16
		if (x1 < x0)
		{
			int xm = x1;
			int ym = y1;
			
			x1 = x0;
    1bb0:	09 2f       	mov	r16, r25
    1bb2:	18 2f       	mov	r17, r24
			
			x0 = xm;
			y0 = ym;
		}
		
		float ypos = (float)y0;
    1bb4:	b3 01       	movw	r22, r6
    1bb6:	88 27       	eor	r24, r24
    1bb8:	77 fd       	sbrc	r23, 7
    1bba:	80 95       	com	r24
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1bc2:	4b 01       	movw	r8, r22
    1bc4:	5c 01       	movw	r10, r24
		float xpos = (float)x0;
    1bc6:	b2 01       	movw	r22, r4
    1bc8:	88 27       	eor	r24, r24
    1bca:	77 fd       	sbrc	r23, 7
    1bcc:	80 95       	com	r24
    1bce:	98 2f       	mov	r25, r24
    1bd0:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1bd4:	6b 01       	movw	r12, r22
    1bd6:	7c 01       	movw	r14, r24
		oled_write_pixel(xpos,ypos,1);
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	b3 01       	movw	r22, r6
    1bde:	c2 01       	movw	r24, r4
    1be0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <oled_write_pixel>
		for (xpos; xpos < x1; xpos++)
    1be4:	b8 01       	movw	r22, r16
    1be6:	88 27       	eor	r24, r24
    1be8:	77 fd       	sbrc	r23, 7
    1bea:	80 95       	com	r24
    1bec:	98 2f       	mov	r25, r24
    1bee:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1bf2:	6d 83       	std	Y+5, r22	; 0x05
    1bf4:	7e 83       	std	Y+6, r23	; 0x06
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
    1bf8:	98 87       	std	Y+8, r25	; 0x08
    1bfa:	9b 01       	movw	r18, r22
    1bfc:	ac 01       	movw	r20, r24
    1bfe:	c7 01       	movw	r24, r14
    1c00:	b6 01       	movw	r22, r12
    1c02:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	0c f0       	brlt	.+2      	; 0x1c0c <oled_write_line+0x146>
    1c0a:	91 c0       	rjmp	.+290    	; 0x1d2e <oled_write_line+0x268>
		{
			ypos+=dy_dx;
    1c0c:	29 81       	ldd	r18, Y+1	; 0x01
    1c0e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c10:	4b 81       	ldd	r20, Y+3	; 0x03
    1c12:	5c 81       	ldd	r21, Y+4	; 0x04
    1c14:	c5 01       	movw	r24, r10
    1c16:	b4 01       	movw	r22, r8
    1c18:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__addsf3>
    1c1c:	4b 01       	movw	r8, r22
    1c1e:	5c 01       	movw	r10, r24
			oled_write_pixel(xpos,ypos,1);
    1c20:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
    1c24:	2b 01       	movw	r4, r22
    1c26:	3c 01       	movw	r6, r24
    1c28:	c7 01       	movw	r24, r14
    1c2a:	b6 01       	movw	r22, r12
    1c2c:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	b2 01       	movw	r22, r4
    1c3a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <oled_write_pixel>
		}
		
		float ypos = (float)y0;
		float xpos = (float)x0;
		oled_write_pixel(xpos,ypos,1);
		for (xpos; xpos < x1; xpos++)
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	c7 01       	movw	r24, r14
    1c48:	b6 01       	movw	r22, r12
    1c4a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__addsf3>
    1c4e:	6b 01       	movw	r12, r22
    1c50:	7c 01       	movw	r14, r24
    1c52:	2d 81       	ldd	r18, Y+5	; 0x05
    1c54:	3e 81       	ldd	r19, Y+6	; 0x06
    1c56:	4f 81       	ldd	r20, Y+7	; 0x07
    1c58:	58 85       	ldd	r21, Y+8	; 0x08
    1c5a:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	ac f2       	brlt	.-86     	; 0x1c0c <oled_write_line+0x146>
    1c62:	65 c0       	rjmp	.+202    	; 0x1d2e <oled_write_line+0x268>
	float dy_dx;
	float dx_dy;
	if ((x1 - x0) == 0)
	{
		dy_dx = 100000;
		dx_dy = 0;
    1c64:	1d 82       	std	Y+5, r1	; 0x05
    1c66:	1e 82       	std	Y+6, r1	; 0x06
    1c68:	1f 82       	std	Y+7, r1	; 0x07
    1c6a:	18 86       	std	Y+8, r1	; 0x08
		
	}
	else //Iterates over y
	{
		//If y1 < y0 we switch positions
		if (y1 < y0)
    1c6c:	26 14       	cp	r2, r6
    1c6e:	37 04       	cpc	r3, r7
    1c70:	34 f4       	brge	.+12     	; 0x1c7e <oled_write_line+0x1b8>
    1c72:	96 2d       	mov	r25, r6
    1c74:	87 2d       	mov	r24, r7
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
			y0 = ym;
    1c76:	31 01       	movw	r6, r2
		{
			int xm = x1;
			int ym = y1;
			
			x1 = x0;
			y1 = y0;
    1c78:	29 2e       	mov	r2, r25
    1c7a:	38 2e       	mov	r3, r24
			
			x0 = xm;
    1c7c:	28 01       	movw	r4, r16
			y0 = ym;
		}
		
		float ypos = (float)y0;
    1c7e:	b3 01       	movw	r22, r6
    1c80:	88 27       	eor	r24, r24
    1c82:	77 fd       	sbrc	r23, 7
    1c84:	80 95       	com	r24
    1c86:	98 2f       	mov	r25, r24
    1c88:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1c8c:	6b 01       	movw	r12, r22
    1c8e:	7c 01       	movw	r14, r24
		float xpos = (float)x0;
    1c90:	b2 01       	movw	r22, r4
    1c92:	88 27       	eor	r24, r24
    1c94:	77 fd       	sbrc	r23, 7
    1c96:	80 95       	com	r24
    1c98:	98 2f       	mov	r25, r24
    1c9a:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1c9e:	4b 01       	movw	r8, r22
    1ca0:	5c 01       	movw	r10, r24
		oled_write_pixel(xpos,ypos,1);
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	b3 01       	movw	r22, r6
    1ca8:	c2 01       	movw	r24, r4
    1caa:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <oled_write_pixel>
		for (ypos; ypos < y1; ypos++)
    1cae:	b1 01       	movw	r22, r2
    1cb0:	88 27       	eor	r24, r24
    1cb2:	77 fd       	sbrc	r23, 7
    1cb4:	80 95       	com	r24
    1cb6:	98 2f       	mov	r25, r24
    1cb8:	0e 94 bc 10 	call	0x2178	; 0x2178 <__floatsisf>
    1cbc:	69 83       	std	Y+1, r22	; 0x01
    1cbe:	7a 83       	std	Y+2, r23	; 0x02
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
    1cc4:	9b 01       	movw	r18, r22
    1cc6:	ac 01       	movw	r20, r24
    1cc8:	c7 01       	movw	r24, r14
    1cca:	b6 01       	movw	r22, r12
    1ccc:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	6c f5       	brge	.+90     	; 0x1d2e <oled_write_line+0x268>
		{
			xpos+=dx_dy;
    1cd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd8:	4f 81       	ldd	r20, Y+7	; 0x07
    1cda:	58 85       	ldd	r21, Y+8	; 0x08
    1cdc:	c5 01       	movw	r24, r10
    1cde:	b4 01       	movw	r22, r8
    1ce0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__addsf3>
    1ce4:	4b 01       	movw	r8, r22
    1ce6:	5c 01       	movw	r10, r24
			oled_write_pixel(xpos,ypos,1);
    1ce8:	c7 01       	movw	r24, r14
    1cea:	b6 01       	movw	r22, r12
    1cec:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
    1cf0:	2b 01       	movw	r4, r22
    1cf2:	3c 01       	movw	r6, r24
    1cf4:	c5 01       	movw	r24, r10
    1cf6:	b4 01       	movw	r22, r8
    1cf8:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixsfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	b2 01       	movw	r22, r4
    1d06:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <oled_write_pixel>
		}
		
		float ypos = (float)y0;
		float xpos = (float)x0;
		oled_write_pixel(xpos,ypos,1);
		for (ypos; ypos < y1; ypos++)
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	c7 01       	movw	r24, r14
    1d14:	b6 01       	movw	r22, r12
    1d16:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__addsf3>
    1d1a:	6b 01       	movw	r12, r22
    1d1c:	7c 01       	movw	r14, r24
    1d1e:	29 81       	ldd	r18, Y+1	; 0x01
    1d20:	3a 81       	ldd	r19, Y+2	; 0x02
    1d22:	4b 81       	ldd	r20, Y+3	; 0x03
    1d24:	5c 81       	ldd	r21, Y+4	; 0x04
    1d26:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	9c f2       	brlt	.-90     	; 0x1cd4 <oled_write_line+0x20e>
		{
			xpos+=dx_dy;
			oled_write_pixel(xpos,ypos,1);
		}
	}
}
    1d2e:	28 96       	adiw	r28, 0x08	; 8
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	af 90       	pop	r10
    1d4e:	9f 90       	pop	r9
    1d50:	8f 90       	pop	r8
    1d52:	7f 90       	pop	r7
    1d54:	6f 90       	pop	r6
    1d56:	5f 90       	pop	r5
    1d58:	4f 90       	pop	r4
    1d5a:	3f 90       	pop	r3
    1d5c:	2f 90       	pop	r2
    1d5e:	08 95       	ret

00001d60 <main>:
#include "App.h"


int main(void)
{ 
	app_init(); //Initializes game
    1d60:	0e 94 3e 05 	call	0xa7c	; 0xa7c <app_init>
	
	
	
	
		app_setup(); //Enters name, difficulty, etc
    1d64:	0e 94 b1 03 	call	0x762	; 0x762 <app_setup>
		app_run();	//Runs the game/application 
    1d68:	0e 94 cc 03 	call	0x798	; 0x798 <app_run>
	//	if (!app_endscreen()) break; //Shows score asks if player wants to replay

	//app_goodbye_message(); //Thanks player for playing
	
	return 0;
}
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	08 95       	ret

00001d72 <opt_constr>:

//Previous input, hinders several inputs in short timespan
struct input prev_input;

void opt_constr(struct option *o, char *name, void (*a)())
{
    1d72:	fc 01       	movw	r30, r24
	//Sets initial name
	o->name = name;
    1d74:	71 83       	std	Z+1, r23	; 0x01
    1d76:	60 83       	st	Z, r22
	
	//Sets initial next pointer
	o->next = NULL;
    1d78:	15 82       	std	Z+5, r1	; 0x05
    1d7a:	14 82       	std	Z+4, r1	; 0x04

	//Sets action
	o->action = a;
    1d7c:	53 83       	std	Z+3, r21	; 0x03
    1d7e:	42 83       	std	Z+2, r20	; 0x02
	
	//Sets submenu
	o->submenu = NULL;
    1d80:	11 86       	std	Z+9, r1	; 0x09
    1d82:	10 86       	std	Z+8, r1	; 0x08
    1d84:	08 95       	ret

00001d86 <menu_constr>:
}

void menu_constr(struct menu *m, char *name)
{
    1d86:	fc 01       	movw	r30, r24
	//Resets headline
	m->headline = name;
    1d88:	71 83       	std	Z+1, r23	; 0x01
    1d8a:	60 83       	st	Z, r22

	//Sets root node as NULL
	m->root_option = NULL;
    1d8c:	13 82       	std	Z+3, r1	; 0x03
    1d8e:	12 82       	std	Z+2, r1	; 0x02
	
	//Sets cursor position at start
	m->cursor_pos = 0;
    1d90:	15 82       	std	Z+5, r1	; 0x05
    1d92:	14 82       	std	Z+4, r1	; 0x04
	
	//Sets current menu pointer
	m->curr_menu = m;
    1d94:	97 83       	std	Z+7, r25	; 0x07
    1d96:	86 83       	std	Z+6, r24	; 0x06
	
	//Sets parent menu
	m->parent_menu = NULL;
    1d98:	11 86       	std	Z+9, r1	; 0x09
    1d9a:	10 86       	std	Z+8, r1	; 0x08
    1d9c:	08 95       	ret

00001d9e <menu_print>:
	
}

void menu_print(struct menu *m)
{
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	8c 01       	movw	r16, r24
	//Print headline
	oled_go_to(HEADLINE_START_COLUMN, HEADLINE_START_PAGE);
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	8a e0       	ldi	r24, 0x0A	; 10
    1dae:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
	oled_cstring_write(m->curr_menu->headline,HEADLINE_SIZE);
    1db2:	d8 01       	movw	r26, r16
    1db4:	16 96       	adiw	r26, 0x06	; 6
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	17 97       	sbiw	r26, 0x07	; 7
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
	
	//Print option-nodes
	struct option *opt_element = m->curr_menu->root_option;
    1dc8:	d8 01       	movw	r26, r16
    1dca:	16 96       	adiw	r26, 0x06	; 6
    1dcc:	ed 91       	ld	r30, X+
    1dce:	fc 91       	ld	r31, X
    1dd0:	17 97       	sbiw	r26, 0x07	; 7
    1dd2:	c2 81       	ldd	r28, Z+2	; 0x02
    1dd4:	d3 81       	ldd	r29, Z+3	; 0x03
	uint8_t col_number = 0;
	
	while (opt_element != NULL)
    1dd6:	20 97       	sbiw	r28, 0x00	; 0
    1dd8:	99 f0       	breq	.+38     	; 0x1e00 <menu_print+0x62>
    1dda:	68 94       	set
    1ddc:	ff 24       	eor	r15, r15
    1dde:	f1 f8       	bld	r15, 1
	{
		oled_go_to(OPTION_START_COLUMN, OPTION_START_PAGE+col_number);
    1de0:	6f 2d       	mov	r22, r15
    1de2:	84 e1       	ldi	r24, 0x14	; 20
    1de4:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
		oled_cstring_write(opt_element->name,OPTION_SIZE);
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	88 81       	ld	r24, Y
    1dee:	99 81       	ldd	r25, Y+1	; 0x01
    1df0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
		opt_element = opt_element->next;
    1df4:	0c 80       	ldd	r0, Y+4	; 0x04
    1df6:	dd 81       	ldd	r29, Y+5	; 0x05
    1df8:	c0 2d       	mov	r28, r0
    1dfa:	f3 94       	inc	r15
	
	//Print option-nodes
	struct option *opt_element = m->curr_menu->root_option;
	uint8_t col_number = 0;
	
	while (opt_element != NULL)
    1dfc:	20 97       	sbiw	r28, 0x00	; 0
    1dfe:	81 f7       	brne	.-32     	; 0x1de0 <menu_print+0x42>
		oled_cstring_write(opt_element->name,OPTION_SIZE);
		opt_element = opt_element->next;
		col_number += 1;
	}
	//Print Cursor
	oled_go_to(CURSOR_START_COLUMN,OPTION_START_PAGE+m->curr_menu->cursor_pos);
    1e00:	d8 01       	movw	r26, r16
    1e02:	16 96       	adiw	r26, 0x06	; 6
    1e04:	ed 91       	ld	r30, X+
    1e06:	fc 91       	ld	r31, X
    1e08:	17 97       	sbiw	r26, 0x07	; 7
    1e0a:	64 81       	ldd	r22, Z+4	; 0x04
    1e0c:	6e 5f       	subi	r22, 0xFE	; 254
    1e0e:	8a e0       	ldi	r24, 0x0A	; 10
    1e10:	0e 94 0a 0b 	call	0x1614	; 0x1614 <oled_go_to>
	oled_cstring_write(CURSOR_TYPE,OPTION_SIZE);
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	83 e6       	ldi	r24, 0x63	; 99
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <oled_cstring_write>
	
}
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	08 95       	ret

00001e2c <menu_count_options>:
}

int menu_count_options(struct menu *m)
{
	int number = 0;
	struct option *curr_option = m->root_option;
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	12 96       	adiw	r26, 0x02	; 2
    1e30:	ed 91       	ld	r30, X+
    1e32:	fc 91       	ld	r31, X
    1e34:	13 97       	sbiw	r26, 0x03	; 3
	
	//Iterates through linked list
	while (curr_option != NULL)
    1e36:	30 97       	sbiw	r30, 0x00	; 0
    1e38:	49 f0       	breq	.+18     	; 0x1e4c <menu_count_options+0x20>
	
}

int menu_count_options(struct menu *m)
{
	int number = 0;
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
	struct option *curr_option = m->root_option;
	
	//Iterates through linked list
	while (curr_option != NULL)
	{
		number += 1;
    1e3e:	01 96       	adiw	r24, 0x01	; 1
		curr_option = curr_option->next;
    1e40:	04 80       	ldd	r0, Z+4	; 0x04
    1e42:	f5 81       	ldd	r31, Z+5	; 0x05
    1e44:	e0 2d       	mov	r30, r0
{
	int number = 0;
	struct option *curr_option = m->root_option;
	
	//Iterates through linked list
	while (curr_option != NULL)
    1e46:	30 97       	sbiw	r30, 0x00	; 0
    1e48:	d1 f7       	brne	.-12     	; 0x1e3e <menu_count_options+0x12>
    1e4a:	08 95       	ret
	
}

int menu_count_options(struct menu *m)
{
	int number = 0;
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
		number += 1;
		curr_option = curr_option->next;
	}
	
	return number;
}
    1e50:	08 95       	ret

00001e52 <menu_control>:
	oled_cstring_write(CURSOR_TYPE,OPTION_SIZE);
	
}

void menu_control(struct menu *m)
{
    1e52:	cf 92       	push	r12
    1e54:	df 92       	push	r13
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	6c 01       	movw	r12, r24
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
    1e64:	fc 01       	movw	r30, r24
    1e66:	06 81       	ldd	r16, Z+6	; 0x06
    1e68:	17 81       	ldd	r17, Z+7	; 0x07
	
	//Checks if something changed on screen (then we must refresh)
	int change = 0;
	
	//Moves cursor
	if (joystick_up()) //UP
    1e6a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <joystick_up>
    1e6e:	89 2b       	or	r24, r25
    1e70:	69 f0       	breq	.+26     	; 0x1e8c <menu_control+0x3a>
	{
		if (current_menu->cursor_pos > 0) current_menu->cursor_pos -= 1;
    1e72:	f8 01       	movw	r30, r16
    1e74:	84 81       	ldd	r24, Z+4	; 0x04
    1e76:	95 81       	ldd	r25, Z+5	; 0x05
    1e78:	18 16       	cp	r1, r24
    1e7a:	19 06       	cpc	r1, r25
    1e7c:	ec f4       	brge	.+58     	; 0x1eb8 <menu_control+0x66>
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	95 83       	std	Z+5, r25	; 0x05
    1e82:	84 83       	std	Z+4, r24	; 0x04
		change += 1;
    1e84:	ee 24       	eor	r14, r14
    1e86:	e3 94       	inc	r14
    1e88:	f1 2c       	mov	r15, r1
    1e8a:	20 c0       	rjmp	.+64     	; 0x1ecc <menu_control+0x7a>
	}
	else if (joystick_down()) //DOWN
    1e8c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <joystick_down>
    1e90:	89 2b       	or	r24, r25
    1e92:	b1 f0       	breq	.+44     	; 0x1ec0 <menu_control+0x6e>
	{
		if (current_menu->cursor_pos < menu_count_options(current_menu)-1)current_menu->cursor_pos += 1;
    1e94:	f8 01       	movw	r30, r16
    1e96:	c4 81       	ldd	r28, Z+4	; 0x04
    1e98:	d5 81       	ldd	r29, Z+5	; 0x05
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <menu_count_options>
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	c8 17       	cp	r28, r24
    1ea4:	d9 07       	cpc	r29, r25
    1ea6:	7c f4       	brge	.+30     	; 0x1ec6 <menu_control+0x74>
    1ea8:	21 96       	adiw	r28, 0x01	; 1
    1eaa:	f8 01       	movw	r30, r16
    1eac:	d5 83       	std	Z+5, r29	; 0x05
    1eae:	c4 83       	std	Z+4, r28	; 0x04
		change += 1;
    1eb0:	ee 24       	eor	r14, r14
    1eb2:	e3 94       	inc	r14
    1eb4:	f1 2c       	mov	r15, r1
    1eb6:	0a c0       	rjmp	.+20     	; 0x1ecc <menu_control+0x7a>
	
	//Moves cursor
	if (joystick_up()) //UP
	{
		if (current_menu->cursor_pos > 0) current_menu->cursor_pos -= 1;
		change += 1;
    1eb8:	ee 24       	eor	r14, r14
    1eba:	e3 94       	inc	r14
    1ebc:	f1 2c       	mov	r15, r1
    1ebe:	06 c0       	rjmp	.+12     	; 0x1ecc <menu_control+0x7a>
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
	struct option *opt_element = m->curr_menu->root_option;
	
	//Checks if something changed on screen (then we must refresh)
	int change = 0;
    1ec0:	e1 2c       	mov	r14, r1
    1ec2:	f1 2c       	mov	r15, r1
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <menu_control+0x7a>
		change += 1;
	}
	else if (joystick_down()) //DOWN
	{
		if (current_menu->cursor_pos < menu_count_options(current_menu)-1)current_menu->cursor_pos += 1;
		change += 1;
    1ec6:	ee 24       	eor	r14, r14
    1ec8:	e3 94       	inc	r14
    1eca:	f1 2c       	mov	r15, r1
	}
	
	if (joystick_right()) //ENTERS SUBMENU
    1ecc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <joystick_right>
    1ed0:	89 2b       	or	r24, r25
    1ed2:	11 f1       	breq	.+68     	; 0x1f18 <menu_control+0xc6>
	{
		//Finds target option
		struct option *target = current_menu->root_option;
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	c2 81       	ldd	r28, Z+2	; 0x02
    1ed8:	d3 81       	ldd	r29, Z+3	; 0x03
		
		if (target != NULL)
    1eda:	20 97       	sbiw	r28, 0x00	; 0
    1edc:	e9 f0       	breq	.+58     	; 0x1f18 <menu_control+0xc6>
		{
			for (int i = 0; i < current_menu->cursor_pos; i++) target = target->next;
    1ede:	44 81       	ldd	r20, Z+4	; 0x04
    1ee0:	55 81       	ldd	r21, Z+5	; 0x05
    1ee2:	14 16       	cp	r1, r20
    1ee4:	15 06       	cpc	r1, r21
    1ee6:	54 f4       	brge	.+20     	; 0x1efc <menu_control+0xaa>
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	0c 80       	ldd	r0, Y+4	; 0x04
    1eee:	dd 81       	ldd	r29, Y+5	; 0x05
    1ef0:	c0 2d       	mov	r28, r0
    1ef2:	2f 5f       	subi	r18, 0xFF	; 255
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	24 17       	cp	r18, r20
    1ef8:	35 07       	cpc	r19, r21
    1efa:	c1 f7       	brne	.-16     	; 0x1eec <menu_control+0x9a>

			//Executes action
			if (target->action != NULL) target->action();
    1efc:	ea 81       	ldd	r30, Y+2	; 0x02
    1efe:	fb 81       	ldd	r31, Y+3	; 0x03
    1f00:	30 97       	sbiw	r30, 0x00	; 0
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <menu_control+0xb4>
    1f04:	09 95       	icall
		
			//Enters submenu
			if (target->submenu != NULL) current_menu = target->submenu;
    1f06:	88 85       	ldd	r24, Y+8	; 0x08
    1f08:	99 85       	ldd	r25, Y+9	; 0x09
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <menu_control+0xbe>
}

void menu_control(struct menu *m)
{
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
    1f0e:	c8 01       	movw	r24, r16
			//Executes action
			if (target->action != NULL) target->action();
		
			//Enters submenu
			if (target->submenu != NULL) current_menu = target->submenu;
			change += 1;
    1f10:	ff ef       	ldi	r31, 0xFF	; 255
    1f12:	ef 1a       	sub	r14, r31
    1f14:	ff 0a       	sbc	r15, r31
    1f16:	8c 01       	movw	r16, r24
		}
		
	}
	
	if (joystick_left()) //Leaves submenu
    1f18:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <joystick_left>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	51 f0       	breq	.+20     	; 0x1f34 <menu_control+0xe2>
	{
		//Enters submenu
		if (current_menu->parent_menu != NULL ) current_menu = current_menu->parent_menu;
    1f20:	f8 01       	movw	r30, r16
    1f22:	80 85       	ldd	r24, Z+8	; 0x08
    1f24:	91 85       	ldd	r25, Z+9	; 0x09
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <menu_control+0xda>
    1f2a:	c8 01       	movw	r24, r16
		change += 1;
    1f2c:	ff ef       	ldi	r31, 0xFF	; 255
    1f2e:	ef 1a       	sub	r14, r31
    1f30:	ff 0a       	sbc	r15, r31
    1f32:	8c 01       	movw	r16, r24
	}
	
	//Updates curr_menu pointer in main menu
	m->curr_menu = current_menu;
    1f34:	f6 01       	movw	r30, r12
    1f36:	17 83       	std	Z+7, r17	; 0x07
    1f38:	06 83       	std	Z+6, r16	; 0x06
	
	//Current input is now previous input
	prev_input = CURRENT_INPUT;
    1f3a:	8e e0       	ldi	r24, 0x0E	; 14
    1f3c:	e0 e0       	ldi	r30, 0x00	; 0
    1f3e:	f3 e0       	ldi	r31, 0x03	; 3
    1f40:	a0 e4       	ldi	r26, 0x40	; 64
    1f42:	b3 e0       	ldi	r27, 0x03	; 3
    1f44:	01 90       	ld	r0, Z+
    1f46:	0d 92       	st	X+, r0
    1f48:	8a 95       	dec	r24
    1f4a:	e1 f7       	brne	.-8      	; 0x1f44 <menu_control+0xf2>
	
	if (change)
    1f4c:	ef 28       	or	r14, r15
    1f4e:	39 f0       	breq	.+14     	; 0x1f5e <menu_control+0x10c>
	{
		oled_clear_SRAM();
    1f50:	0e 94 43 0c 	call	0x1886	; 0x1886 <oled_clear_SRAM>
		menu_print(m->curr_menu);
    1f54:	f6 01       	movw	r30, r12
    1f56:	86 81       	ldd	r24, Z+6	; 0x06
    1f58:	97 81       	ldd	r25, Z+7	; 0x07
    1f5a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <menu_print>
	}
	
	
	
}
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	08 95       	ret

00001f70 <__subsf3>:
    1f70:	50 58       	subi	r21, 0x80	; 128

00001f72 <__addsf3>:
    1f72:	bb 27       	eor	r27, r27
    1f74:	aa 27       	eor	r26, r26
    1f76:	0e d0       	rcall	.+28     	; 0x1f94 <__addsf3x>
    1f78:	75 c1       	rjmp	.+746    	; 0x2264 <__fp_round>
    1f7a:	66 d1       	rcall	.+716    	; 0x2248 <__fp_pscA>
    1f7c:	30 f0       	brcs	.+12     	; 0x1f8a <__addsf3+0x18>
    1f7e:	6b d1       	rcall	.+726    	; 0x2256 <__fp_pscB>
    1f80:	20 f0       	brcs	.+8      	; 0x1f8a <__addsf3+0x18>
    1f82:	31 f4       	brne	.+12     	; 0x1f90 <__addsf3+0x1e>
    1f84:	9f 3f       	cpi	r25, 0xFF	; 255
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <__addsf3+0x1a>
    1f88:	1e f4       	brtc	.+6      	; 0x1f90 <__addsf3+0x1e>
    1f8a:	5b c1       	rjmp	.+694    	; 0x2242 <__fp_nan>
    1f8c:	0e f4       	brtc	.+2      	; 0x1f90 <__addsf3+0x1e>
    1f8e:	e0 95       	com	r30
    1f90:	e7 fb       	bst	r30, 7
    1f92:	51 c1       	rjmp	.+674    	; 0x2236 <__fp_inf>

00001f94 <__addsf3x>:
    1f94:	e9 2f       	mov	r30, r25
    1f96:	77 d1       	rcall	.+750    	; 0x2286 <__fp_split3>
    1f98:	80 f3       	brcs	.-32     	; 0x1f7a <__addsf3+0x8>
    1f9a:	ba 17       	cp	r27, r26
    1f9c:	62 07       	cpc	r22, r18
    1f9e:	73 07       	cpc	r23, r19
    1fa0:	84 07       	cpc	r24, r20
    1fa2:	95 07       	cpc	r25, r21
    1fa4:	18 f0       	brcs	.+6      	; 0x1fac <__addsf3x+0x18>
    1fa6:	71 f4       	brne	.+28     	; 0x1fc4 <__addsf3x+0x30>
    1fa8:	9e f5       	brtc	.+102    	; 0x2010 <__addsf3x+0x7c>
    1faa:	8f c1       	rjmp	.+798    	; 0x22ca <__fp_zero>
    1fac:	0e f4       	brtc	.+2      	; 0x1fb0 <__addsf3x+0x1c>
    1fae:	e0 95       	com	r30
    1fb0:	0b 2e       	mov	r0, r27
    1fb2:	ba 2f       	mov	r27, r26
    1fb4:	a0 2d       	mov	r26, r0
    1fb6:	0b 01       	movw	r0, r22
    1fb8:	b9 01       	movw	r22, r18
    1fba:	90 01       	movw	r18, r0
    1fbc:	0c 01       	movw	r0, r24
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	a0 01       	movw	r20, r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	ff 27       	eor	r31, r31
    1fc6:	59 1b       	sub	r21, r25
    1fc8:	99 f0       	breq	.+38     	; 0x1ff0 <__addsf3x+0x5c>
    1fca:	59 3f       	cpi	r21, 0xF9	; 249
    1fcc:	50 f4       	brcc	.+20     	; 0x1fe2 <__addsf3x+0x4e>
    1fce:	50 3e       	cpi	r21, 0xE0	; 224
    1fd0:	68 f1       	brcs	.+90     	; 0x202c <__addsf3x+0x98>
    1fd2:	1a 16       	cp	r1, r26
    1fd4:	f0 40       	sbci	r31, 0x00	; 0
    1fd6:	a2 2f       	mov	r26, r18
    1fd8:	23 2f       	mov	r18, r19
    1fda:	34 2f       	mov	r19, r20
    1fdc:	44 27       	eor	r20, r20
    1fde:	58 5f       	subi	r21, 0xF8	; 248
    1fe0:	f3 cf       	rjmp	.-26     	; 0x1fc8 <__addsf3x+0x34>
    1fe2:	46 95       	lsr	r20
    1fe4:	37 95       	ror	r19
    1fe6:	27 95       	ror	r18
    1fe8:	a7 95       	ror	r26
    1fea:	f0 40       	sbci	r31, 0x00	; 0
    1fec:	53 95       	inc	r21
    1fee:	c9 f7       	brne	.-14     	; 0x1fe2 <__addsf3x+0x4e>
    1ff0:	7e f4       	brtc	.+30     	; 0x2010 <__addsf3x+0x7c>
    1ff2:	1f 16       	cp	r1, r31
    1ff4:	ba 0b       	sbc	r27, r26
    1ff6:	62 0b       	sbc	r22, r18
    1ff8:	73 0b       	sbc	r23, r19
    1ffa:	84 0b       	sbc	r24, r20
    1ffc:	ba f0       	brmi	.+46     	; 0x202c <__addsf3x+0x98>
    1ffe:	91 50       	subi	r25, 0x01	; 1
    2000:	a1 f0       	breq	.+40     	; 0x202a <__addsf3x+0x96>
    2002:	ff 0f       	add	r31, r31
    2004:	bb 1f       	adc	r27, r27
    2006:	66 1f       	adc	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	88 1f       	adc	r24, r24
    200c:	c2 f7       	brpl	.-16     	; 0x1ffe <__addsf3x+0x6a>
    200e:	0e c0       	rjmp	.+28     	; 0x202c <__addsf3x+0x98>
    2010:	ba 0f       	add	r27, r26
    2012:	62 1f       	adc	r22, r18
    2014:	73 1f       	adc	r23, r19
    2016:	84 1f       	adc	r24, r20
    2018:	48 f4       	brcc	.+18     	; 0x202c <__addsf3x+0x98>
    201a:	87 95       	ror	r24
    201c:	77 95       	ror	r23
    201e:	67 95       	ror	r22
    2020:	b7 95       	ror	r27
    2022:	f7 95       	ror	r31
    2024:	9e 3f       	cpi	r25, 0xFE	; 254
    2026:	08 f0       	brcs	.+2      	; 0x202a <__addsf3x+0x96>
    2028:	b3 cf       	rjmp	.-154    	; 0x1f90 <__addsf3+0x1e>
    202a:	93 95       	inc	r25
    202c:	88 0f       	add	r24, r24
    202e:	08 f0       	brcs	.+2      	; 0x2032 <__addsf3x+0x9e>
    2030:	99 27       	eor	r25, r25
    2032:	ee 0f       	add	r30, r30
    2034:	97 95       	ror	r25
    2036:	87 95       	ror	r24
    2038:	08 95       	ret

0000203a <__cmpsf2>:
    203a:	d9 d0       	rcall	.+434    	; 0x21ee <__fp_cmp>
    203c:	08 f4       	brcc	.+2      	; 0x2040 <__cmpsf2+0x6>
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	08 95       	ret

00002042 <__divsf3>:
    2042:	0c d0       	rcall	.+24     	; 0x205c <__divsf3x>
    2044:	0f c1       	rjmp	.+542    	; 0x2264 <__fp_round>
    2046:	07 d1       	rcall	.+526    	; 0x2256 <__fp_pscB>
    2048:	40 f0       	brcs	.+16     	; 0x205a <__divsf3+0x18>
    204a:	fe d0       	rcall	.+508    	; 0x2248 <__fp_pscA>
    204c:	30 f0       	brcs	.+12     	; 0x205a <__divsf3+0x18>
    204e:	21 f4       	brne	.+8      	; 0x2058 <__divsf3+0x16>
    2050:	5f 3f       	cpi	r21, 0xFF	; 255
    2052:	19 f0       	breq	.+6      	; 0x205a <__divsf3+0x18>
    2054:	f0 c0       	rjmp	.+480    	; 0x2236 <__fp_inf>
    2056:	51 11       	cpse	r21, r1
    2058:	39 c1       	rjmp	.+626    	; 0x22cc <__fp_szero>
    205a:	f3 c0       	rjmp	.+486    	; 0x2242 <__fp_nan>

0000205c <__divsf3x>:
    205c:	14 d1       	rcall	.+552    	; 0x2286 <__fp_split3>
    205e:	98 f3       	brcs	.-26     	; 0x2046 <__divsf3+0x4>

00002060 <__divsf3_pse>:
    2060:	99 23       	and	r25, r25
    2062:	c9 f3       	breq	.-14     	; 0x2056 <__divsf3+0x14>
    2064:	55 23       	and	r21, r21
    2066:	b1 f3       	breq	.-20     	; 0x2054 <__divsf3+0x12>
    2068:	95 1b       	sub	r25, r21
    206a:	55 0b       	sbc	r21, r21
    206c:	bb 27       	eor	r27, r27
    206e:	aa 27       	eor	r26, r26
    2070:	62 17       	cp	r22, r18
    2072:	73 07       	cpc	r23, r19
    2074:	84 07       	cpc	r24, r20
    2076:	38 f0       	brcs	.+14     	; 0x2086 <__divsf3_pse+0x26>
    2078:	9f 5f       	subi	r25, 0xFF	; 255
    207a:	5f 4f       	sbci	r21, 0xFF	; 255
    207c:	22 0f       	add	r18, r18
    207e:	33 1f       	adc	r19, r19
    2080:	44 1f       	adc	r20, r20
    2082:	aa 1f       	adc	r26, r26
    2084:	a9 f3       	breq	.-22     	; 0x2070 <__divsf3_pse+0x10>
    2086:	33 d0       	rcall	.+102    	; 0x20ee <__divsf3_pse+0x8e>
    2088:	0e 2e       	mov	r0, r30
    208a:	3a f0       	brmi	.+14     	; 0x209a <__divsf3_pse+0x3a>
    208c:	e0 e8       	ldi	r30, 0x80	; 128
    208e:	30 d0       	rcall	.+96     	; 0x20f0 <__divsf3_pse+0x90>
    2090:	91 50       	subi	r25, 0x01	; 1
    2092:	50 40       	sbci	r21, 0x00	; 0
    2094:	e6 95       	lsr	r30
    2096:	00 1c       	adc	r0, r0
    2098:	ca f7       	brpl	.-14     	; 0x208c <__divsf3_pse+0x2c>
    209a:	29 d0       	rcall	.+82     	; 0x20ee <__divsf3_pse+0x8e>
    209c:	fe 2f       	mov	r31, r30
    209e:	27 d0       	rcall	.+78     	; 0x20ee <__divsf3_pse+0x8e>
    20a0:	66 0f       	add	r22, r22
    20a2:	77 1f       	adc	r23, r23
    20a4:	88 1f       	adc	r24, r24
    20a6:	bb 1f       	adc	r27, r27
    20a8:	26 17       	cp	r18, r22
    20aa:	37 07       	cpc	r19, r23
    20ac:	48 07       	cpc	r20, r24
    20ae:	ab 07       	cpc	r26, r27
    20b0:	b0 e8       	ldi	r27, 0x80	; 128
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <__divsf3_pse+0x56>
    20b4:	bb 0b       	sbc	r27, r27
    20b6:	80 2d       	mov	r24, r0
    20b8:	bf 01       	movw	r22, r30
    20ba:	ff 27       	eor	r31, r31
    20bc:	93 58       	subi	r25, 0x83	; 131
    20be:	5f 4f       	sbci	r21, 0xFF	; 255
    20c0:	2a f0       	brmi	.+10     	; 0x20cc <__divsf3_pse+0x6c>
    20c2:	9e 3f       	cpi	r25, 0xFE	; 254
    20c4:	51 05       	cpc	r21, r1
    20c6:	68 f0       	brcs	.+26     	; 0x20e2 <__divsf3_pse+0x82>
    20c8:	b6 c0       	rjmp	.+364    	; 0x2236 <__fp_inf>
    20ca:	00 c1       	rjmp	.+512    	; 0x22cc <__fp_szero>
    20cc:	5f 3f       	cpi	r21, 0xFF	; 255
    20ce:	ec f3       	brlt	.-6      	; 0x20ca <__divsf3_pse+0x6a>
    20d0:	98 3e       	cpi	r25, 0xE8	; 232
    20d2:	dc f3       	brlt	.-10     	; 0x20ca <__divsf3_pse+0x6a>
    20d4:	86 95       	lsr	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	b7 95       	ror	r27
    20dc:	f7 95       	ror	r31
    20de:	9f 5f       	subi	r25, 0xFF	; 255
    20e0:	c9 f7       	brne	.-14     	; 0x20d4 <__divsf3_pse+0x74>
    20e2:	88 0f       	add	r24, r24
    20e4:	91 1d       	adc	r25, r1
    20e6:	96 95       	lsr	r25
    20e8:	87 95       	ror	r24
    20ea:	97 f9       	bld	r25, 7
    20ec:	08 95       	ret
    20ee:	e1 e0       	ldi	r30, 0x01	; 1
    20f0:	66 0f       	add	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	bb 1f       	adc	r27, r27
    20f8:	62 17       	cp	r22, r18
    20fa:	73 07       	cpc	r23, r19
    20fc:	84 07       	cpc	r24, r20
    20fe:	ba 07       	cpc	r27, r26
    2100:	20 f0       	brcs	.+8      	; 0x210a <__divsf3_pse+0xaa>
    2102:	62 1b       	sub	r22, r18
    2104:	73 0b       	sbc	r23, r19
    2106:	84 0b       	sbc	r24, r20
    2108:	ba 0b       	sbc	r27, r26
    210a:	ee 1f       	adc	r30, r30
    210c:	88 f7       	brcc	.-30     	; 0x20f0 <__divsf3_pse+0x90>
    210e:	e0 95       	com	r30
    2110:	08 95       	ret

00002112 <__fixsfsi>:
    2112:	04 d0       	rcall	.+8      	; 0x211c <__fixunssfsi>
    2114:	68 94       	set
    2116:	b1 11       	cpse	r27, r1
    2118:	d9 c0       	rjmp	.+434    	; 0x22cc <__fp_szero>
    211a:	08 95       	ret

0000211c <__fixunssfsi>:
    211c:	bc d0       	rcall	.+376    	; 0x2296 <__fp_splitA>
    211e:	88 f0       	brcs	.+34     	; 0x2142 <__fixunssfsi+0x26>
    2120:	9f 57       	subi	r25, 0x7F	; 127
    2122:	90 f0       	brcs	.+36     	; 0x2148 <__fixunssfsi+0x2c>
    2124:	b9 2f       	mov	r27, r25
    2126:	99 27       	eor	r25, r25
    2128:	b7 51       	subi	r27, 0x17	; 23
    212a:	a0 f0       	brcs	.+40     	; 0x2154 <__fixunssfsi+0x38>
    212c:	d1 f0       	breq	.+52     	; 0x2162 <__fixunssfsi+0x46>
    212e:	66 0f       	add	r22, r22
    2130:	77 1f       	adc	r23, r23
    2132:	88 1f       	adc	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	1a f0       	brmi	.+6      	; 0x213e <__fixunssfsi+0x22>
    2138:	ba 95       	dec	r27
    213a:	c9 f7       	brne	.-14     	; 0x212e <__fixunssfsi+0x12>
    213c:	12 c0       	rjmp	.+36     	; 0x2162 <__fixunssfsi+0x46>
    213e:	b1 30       	cpi	r27, 0x01	; 1
    2140:	81 f0       	breq	.+32     	; 0x2162 <__fixunssfsi+0x46>
    2142:	c3 d0       	rcall	.+390    	; 0x22ca <__fp_zero>
    2144:	b1 e0       	ldi	r27, 0x01	; 1
    2146:	08 95       	ret
    2148:	c0 c0       	rjmp	.+384    	; 0x22ca <__fp_zero>
    214a:	67 2f       	mov	r22, r23
    214c:	78 2f       	mov	r23, r24
    214e:	88 27       	eor	r24, r24
    2150:	b8 5f       	subi	r27, 0xF8	; 248
    2152:	39 f0       	breq	.+14     	; 0x2162 <__fixunssfsi+0x46>
    2154:	b9 3f       	cpi	r27, 0xF9	; 249
    2156:	cc f3       	brlt	.-14     	; 0x214a <__fixunssfsi+0x2e>
    2158:	86 95       	lsr	r24
    215a:	77 95       	ror	r23
    215c:	67 95       	ror	r22
    215e:	b3 95       	inc	r27
    2160:	d9 f7       	brne	.-10     	; 0x2158 <__fixunssfsi+0x3c>
    2162:	3e f4       	brtc	.+14     	; 0x2172 <__fixunssfsi+0x56>
    2164:	90 95       	com	r25
    2166:	80 95       	com	r24
    2168:	70 95       	com	r23
    216a:	61 95       	neg	r22
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	8f 4f       	sbci	r24, 0xFF	; 255
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	08 95       	ret

00002174 <__floatunsisf>:
    2174:	e8 94       	clt
    2176:	09 c0       	rjmp	.+18     	; 0x218a <__floatsisf+0x12>

00002178 <__floatsisf>:
    2178:	97 fb       	bst	r25, 7
    217a:	3e f4       	brtc	.+14     	; 0x218a <__floatsisf+0x12>
    217c:	90 95       	com	r25
    217e:	80 95       	com	r24
    2180:	70 95       	com	r23
    2182:	61 95       	neg	r22
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	8f 4f       	sbci	r24, 0xFF	; 255
    2188:	9f 4f       	sbci	r25, 0xFF	; 255
    218a:	99 23       	and	r25, r25
    218c:	a9 f0       	breq	.+42     	; 0x21b8 <__floatsisf+0x40>
    218e:	f9 2f       	mov	r31, r25
    2190:	96 e9       	ldi	r25, 0x96	; 150
    2192:	bb 27       	eor	r27, r27
    2194:	93 95       	inc	r25
    2196:	f6 95       	lsr	r31
    2198:	87 95       	ror	r24
    219a:	77 95       	ror	r23
    219c:	67 95       	ror	r22
    219e:	b7 95       	ror	r27
    21a0:	f1 11       	cpse	r31, r1
    21a2:	f8 cf       	rjmp	.-16     	; 0x2194 <__floatsisf+0x1c>
    21a4:	fa f4       	brpl	.+62     	; 0x21e4 <__floatsisf+0x6c>
    21a6:	bb 0f       	add	r27, r27
    21a8:	11 f4       	brne	.+4      	; 0x21ae <__floatsisf+0x36>
    21aa:	60 ff       	sbrs	r22, 0
    21ac:	1b c0       	rjmp	.+54     	; 0x21e4 <__floatsisf+0x6c>
    21ae:	6f 5f       	subi	r22, 0xFF	; 255
    21b0:	7f 4f       	sbci	r23, 0xFF	; 255
    21b2:	8f 4f       	sbci	r24, 0xFF	; 255
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	16 c0       	rjmp	.+44     	; 0x21e4 <__floatsisf+0x6c>
    21b8:	88 23       	and	r24, r24
    21ba:	11 f0       	breq	.+4      	; 0x21c0 <__floatsisf+0x48>
    21bc:	96 e9       	ldi	r25, 0x96	; 150
    21be:	11 c0       	rjmp	.+34     	; 0x21e2 <__floatsisf+0x6a>
    21c0:	77 23       	and	r23, r23
    21c2:	21 f0       	breq	.+8      	; 0x21cc <__floatsisf+0x54>
    21c4:	9e e8       	ldi	r25, 0x8E	; 142
    21c6:	87 2f       	mov	r24, r23
    21c8:	76 2f       	mov	r23, r22
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <__floatsisf+0x5e>
    21cc:	66 23       	and	r22, r22
    21ce:	71 f0       	breq	.+28     	; 0x21ec <__floatsisf+0x74>
    21d0:	96 e8       	ldi	r25, 0x86	; 134
    21d2:	86 2f       	mov	r24, r22
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	2a f0       	brmi	.+10     	; 0x21e4 <__floatsisf+0x6c>
    21da:	9a 95       	dec	r25
    21dc:	66 0f       	add	r22, r22
    21de:	77 1f       	adc	r23, r23
    21e0:	88 1f       	adc	r24, r24
    21e2:	da f7       	brpl	.-10     	; 0x21da <__floatsisf+0x62>
    21e4:	88 0f       	add	r24, r24
    21e6:	96 95       	lsr	r25
    21e8:	87 95       	ror	r24
    21ea:	97 f9       	bld	r25, 7
    21ec:	08 95       	ret

000021ee <__fp_cmp>:
    21ee:	99 0f       	add	r25, r25
    21f0:	00 08       	sbc	r0, r0
    21f2:	55 0f       	add	r21, r21
    21f4:	aa 0b       	sbc	r26, r26
    21f6:	e0 e8       	ldi	r30, 0x80	; 128
    21f8:	fe ef       	ldi	r31, 0xFE	; 254
    21fa:	16 16       	cp	r1, r22
    21fc:	17 06       	cpc	r1, r23
    21fe:	e8 07       	cpc	r30, r24
    2200:	f9 07       	cpc	r31, r25
    2202:	c0 f0       	brcs	.+48     	; 0x2234 <__fp_cmp+0x46>
    2204:	12 16       	cp	r1, r18
    2206:	13 06       	cpc	r1, r19
    2208:	e4 07       	cpc	r30, r20
    220a:	f5 07       	cpc	r31, r21
    220c:	98 f0       	brcs	.+38     	; 0x2234 <__fp_cmp+0x46>
    220e:	62 1b       	sub	r22, r18
    2210:	73 0b       	sbc	r23, r19
    2212:	84 0b       	sbc	r24, r20
    2214:	95 0b       	sbc	r25, r21
    2216:	39 f4       	brne	.+14     	; 0x2226 <__fp_cmp+0x38>
    2218:	0a 26       	eor	r0, r26
    221a:	61 f0       	breq	.+24     	; 0x2234 <__fp_cmp+0x46>
    221c:	23 2b       	or	r18, r19
    221e:	24 2b       	or	r18, r20
    2220:	25 2b       	or	r18, r21
    2222:	21 f4       	brne	.+8      	; 0x222c <__fp_cmp+0x3e>
    2224:	08 95       	ret
    2226:	0a 26       	eor	r0, r26
    2228:	09 f4       	brne	.+2      	; 0x222c <__fp_cmp+0x3e>
    222a:	a1 40       	sbci	r26, 0x01	; 1
    222c:	a6 95       	lsr	r26
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	81 1d       	adc	r24, r1
    2232:	81 1d       	adc	r24, r1
    2234:	08 95       	ret

00002236 <__fp_inf>:
    2236:	97 f9       	bld	r25, 7
    2238:	9f 67       	ori	r25, 0x7F	; 127
    223a:	80 e8       	ldi	r24, 0x80	; 128
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	08 95       	ret

00002242 <__fp_nan>:
    2242:	9f ef       	ldi	r25, 0xFF	; 255
    2244:	80 ec       	ldi	r24, 0xC0	; 192
    2246:	08 95       	ret

00002248 <__fp_pscA>:
    2248:	00 24       	eor	r0, r0
    224a:	0a 94       	dec	r0
    224c:	16 16       	cp	r1, r22
    224e:	17 06       	cpc	r1, r23
    2250:	18 06       	cpc	r1, r24
    2252:	09 06       	cpc	r0, r25
    2254:	08 95       	ret

00002256 <__fp_pscB>:
    2256:	00 24       	eor	r0, r0
    2258:	0a 94       	dec	r0
    225a:	12 16       	cp	r1, r18
    225c:	13 06       	cpc	r1, r19
    225e:	14 06       	cpc	r1, r20
    2260:	05 06       	cpc	r0, r21
    2262:	08 95       	ret

00002264 <__fp_round>:
    2264:	09 2e       	mov	r0, r25
    2266:	03 94       	inc	r0
    2268:	00 0c       	add	r0, r0
    226a:	11 f4       	brne	.+4      	; 0x2270 <__fp_round+0xc>
    226c:	88 23       	and	r24, r24
    226e:	52 f0       	brmi	.+20     	; 0x2284 <__fp_round+0x20>
    2270:	bb 0f       	add	r27, r27
    2272:	40 f4       	brcc	.+16     	; 0x2284 <__fp_round+0x20>
    2274:	bf 2b       	or	r27, r31
    2276:	11 f4       	brne	.+4      	; 0x227c <__fp_round+0x18>
    2278:	60 ff       	sbrs	r22, 0
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <__fp_round+0x20>
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	8f 4f       	sbci	r24, 0xFF	; 255
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	08 95       	ret

00002286 <__fp_split3>:
    2286:	57 fd       	sbrc	r21, 7
    2288:	90 58       	subi	r25, 0x80	; 128
    228a:	44 0f       	add	r20, r20
    228c:	55 1f       	adc	r21, r21
    228e:	59 f0       	breq	.+22     	; 0x22a6 <__fp_splitA+0x10>
    2290:	5f 3f       	cpi	r21, 0xFF	; 255
    2292:	71 f0       	breq	.+28     	; 0x22b0 <__fp_splitA+0x1a>
    2294:	47 95       	ror	r20

00002296 <__fp_splitA>:
    2296:	88 0f       	add	r24, r24
    2298:	97 fb       	bst	r25, 7
    229a:	99 1f       	adc	r25, r25
    229c:	61 f0       	breq	.+24     	; 0x22b6 <__fp_splitA+0x20>
    229e:	9f 3f       	cpi	r25, 0xFF	; 255
    22a0:	79 f0       	breq	.+30     	; 0x22c0 <__fp_splitA+0x2a>
    22a2:	87 95       	ror	r24
    22a4:	08 95       	ret
    22a6:	12 16       	cp	r1, r18
    22a8:	13 06       	cpc	r1, r19
    22aa:	14 06       	cpc	r1, r20
    22ac:	55 1f       	adc	r21, r21
    22ae:	f2 cf       	rjmp	.-28     	; 0x2294 <__fp_split3+0xe>
    22b0:	46 95       	lsr	r20
    22b2:	f1 df       	rcall	.-30     	; 0x2296 <__fp_splitA>
    22b4:	08 c0       	rjmp	.+16     	; 0x22c6 <__fp_splitA+0x30>
    22b6:	16 16       	cp	r1, r22
    22b8:	17 06       	cpc	r1, r23
    22ba:	18 06       	cpc	r1, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	f1 cf       	rjmp	.-30     	; 0x22a2 <__fp_splitA+0xc>
    22c0:	86 95       	lsr	r24
    22c2:	71 05       	cpc	r23, r1
    22c4:	61 05       	cpc	r22, r1
    22c6:	08 94       	sec
    22c8:	08 95       	ret

000022ca <__fp_zero>:
    22ca:	e8 94       	clt

000022cc <__fp_szero>:
    22cc:	bb 27       	eor	r27, r27
    22ce:	66 27       	eor	r22, r22
    22d0:	77 27       	eor	r23, r23
    22d2:	cb 01       	movw	r24, r22
    22d4:	97 f9       	bld	r25, 7
    22d6:	08 95       	ret

000022d8 <__gesf2>:
    22d8:	8a df       	rcall	.-236    	; 0x21ee <__fp_cmp>
    22da:	08 f4       	brcc	.+2      	; 0x22de <__gesf2+0x6>
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	08 95       	ret

000022e0 <__udivmodsi4>:
    22e0:	a1 e2       	ldi	r26, 0x21	; 33
    22e2:	1a 2e       	mov	r1, r26
    22e4:	aa 1b       	sub	r26, r26
    22e6:	bb 1b       	sub	r27, r27
    22e8:	fd 01       	movw	r30, r26
    22ea:	0d c0       	rjmp	.+26     	; 0x2306 <__udivmodsi4_ep>

000022ec <__udivmodsi4_loop>:
    22ec:	aa 1f       	adc	r26, r26
    22ee:	bb 1f       	adc	r27, r27
    22f0:	ee 1f       	adc	r30, r30
    22f2:	ff 1f       	adc	r31, r31
    22f4:	a2 17       	cp	r26, r18
    22f6:	b3 07       	cpc	r27, r19
    22f8:	e4 07       	cpc	r30, r20
    22fa:	f5 07       	cpc	r31, r21
    22fc:	20 f0       	brcs	.+8      	; 0x2306 <__udivmodsi4_ep>
    22fe:	a2 1b       	sub	r26, r18
    2300:	b3 0b       	sbc	r27, r19
    2302:	e4 0b       	sbc	r30, r20
    2304:	f5 0b       	sbc	r31, r21

00002306 <__udivmodsi4_ep>:
    2306:	66 1f       	adc	r22, r22
    2308:	77 1f       	adc	r23, r23
    230a:	88 1f       	adc	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	1a 94       	dec	r1
    2310:	69 f7       	brne	.-38     	; 0x22ec <__udivmodsi4_loop>
    2312:	60 95       	com	r22
    2314:	70 95       	com	r23
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	9b 01       	movw	r18, r22
    231c:	ac 01       	movw	r20, r24
    231e:	bd 01       	movw	r22, r26
    2320:	cf 01       	movw	r24, r30
    2322:	08 95       	ret

00002324 <sprintf>:
    2324:	ae e0       	ldi	r26, 0x0E	; 14
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e8 e9       	ldi	r30, 0x98	; 152
    232a:	f1 e1       	ldi	r31, 0x11	; 17
    232c:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__prologue_saves__+0x1c>
    2330:	0d 89       	ldd	r16, Y+21	; 0x15
    2332:	1e 89       	ldd	r17, Y+22	; 0x16
    2334:	86 e0       	ldi	r24, 0x06	; 6
    2336:	8c 83       	std	Y+4, r24	; 0x04
    2338:	1a 83       	std	Y+2, r17	; 0x02
    233a:	09 83       	std	Y+1, r16	; 0x01
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	9f e7       	ldi	r25, 0x7F	; 127
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
    2344:	ae 01       	movw	r20, r28
    2346:	47 5e       	subi	r20, 0xE7	; 231
    2348:	5f 4f       	sbci	r21, 0xFF	; 255
    234a:	6f 89       	ldd	r22, Y+23	; 0x17
    234c:	78 8d       	ldd	r23, Y+24	; 0x18
    234e:	ce 01       	movw	r24, r28
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	0e 94 b4 11 	call	0x2368	; 0x2368 <vfprintf>
    2356:	ef 81       	ldd	r30, Y+7	; 0x07
    2358:	f8 85       	ldd	r31, Y+8	; 0x08
    235a:	e0 0f       	add	r30, r16
    235c:	f1 1f       	adc	r31, r17
    235e:	10 82       	st	Z, r1
    2360:	2e 96       	adiw	r28, 0x0e	; 14
    2362:	e4 e0       	ldi	r30, 0x04	; 4
    2364:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__epilogue_restores__+0x1c>

00002368 <vfprintf>:
    2368:	ac e0       	ldi	r26, 0x0C	; 12
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ea eb       	ldi	r30, 0xBA	; 186
    236e:	f1 e1       	ldi	r31, 0x11	; 17
    2370:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__prologue_saves__>
    2374:	7c 01       	movw	r14, r24
    2376:	6b 01       	movw	r12, r22
    2378:	8a 01       	movw	r16, r20
    237a:	fc 01       	movw	r30, r24
    237c:	17 82       	std	Z+7, r1	; 0x07
    237e:	16 82       	std	Z+6, r1	; 0x06
    2380:	83 81       	ldd	r24, Z+3	; 0x03
    2382:	81 ff       	sbrs	r24, 1
    2384:	bd c1       	rjmp	.+890    	; 0x2700 <vfprintf+0x398>
    2386:	ce 01       	movw	r24, r28
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	4c 01       	movw	r8, r24
    238c:	f7 01       	movw	r30, r14
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	f6 01       	movw	r30, r12
    2392:	93 fd       	sbrc	r25, 3
    2394:	85 91       	lpm	r24, Z+
    2396:	93 ff       	sbrs	r25, 3
    2398:	81 91       	ld	r24, Z+
    239a:	6f 01       	movw	r12, r30
    239c:	88 23       	and	r24, r24
    239e:	09 f4       	brne	.+2      	; 0x23a2 <vfprintf+0x3a>
    23a0:	ab c1       	rjmp	.+854    	; 0x26f8 <vfprintf+0x390>
    23a2:	85 32       	cpi	r24, 0x25	; 37
    23a4:	39 f4       	brne	.+14     	; 0x23b4 <vfprintf+0x4c>
    23a6:	93 fd       	sbrc	r25, 3
    23a8:	85 91       	lpm	r24, Z+
    23aa:	93 ff       	sbrs	r25, 3
    23ac:	81 91       	ld	r24, Z+
    23ae:	6f 01       	movw	r12, r30
    23b0:	85 32       	cpi	r24, 0x25	; 37
    23b2:	29 f4       	brne	.+10     	; 0x23be <vfprintf+0x56>
    23b4:	b7 01       	movw	r22, r14
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    23bc:	e7 cf       	rjmp	.-50     	; 0x238c <vfprintf+0x24>
    23be:	51 2c       	mov	r5, r1
    23c0:	31 2c       	mov	r3, r1
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	20 32       	cpi	r18, 0x20	; 32
    23c6:	a0 f4       	brcc	.+40     	; 0x23f0 <vfprintf+0x88>
    23c8:	8b 32       	cpi	r24, 0x2B	; 43
    23ca:	69 f0       	breq	.+26     	; 0x23e6 <vfprintf+0x7e>
    23cc:	30 f4       	brcc	.+12     	; 0x23da <vfprintf+0x72>
    23ce:	80 32       	cpi	r24, 0x20	; 32
    23d0:	59 f0       	breq	.+22     	; 0x23e8 <vfprintf+0x80>
    23d2:	83 32       	cpi	r24, 0x23	; 35
    23d4:	69 f4       	brne	.+26     	; 0x23f0 <vfprintf+0x88>
    23d6:	20 61       	ori	r18, 0x10	; 16
    23d8:	2c c0       	rjmp	.+88     	; 0x2432 <vfprintf+0xca>
    23da:	8d 32       	cpi	r24, 0x2D	; 45
    23dc:	39 f0       	breq	.+14     	; 0x23ec <vfprintf+0x84>
    23de:	80 33       	cpi	r24, 0x30	; 48
    23e0:	39 f4       	brne	.+14     	; 0x23f0 <vfprintf+0x88>
    23e2:	21 60       	ori	r18, 0x01	; 1
    23e4:	26 c0       	rjmp	.+76     	; 0x2432 <vfprintf+0xca>
    23e6:	22 60       	ori	r18, 0x02	; 2
    23e8:	24 60       	ori	r18, 0x04	; 4
    23ea:	23 c0       	rjmp	.+70     	; 0x2432 <vfprintf+0xca>
    23ec:	28 60       	ori	r18, 0x08	; 8
    23ee:	21 c0       	rjmp	.+66     	; 0x2432 <vfprintf+0xca>
    23f0:	27 fd       	sbrc	r18, 7
    23f2:	27 c0       	rjmp	.+78     	; 0x2442 <vfprintf+0xda>
    23f4:	30 ed       	ldi	r19, 0xD0	; 208
    23f6:	38 0f       	add	r19, r24
    23f8:	3a 30       	cpi	r19, 0x0A	; 10
    23fa:	78 f4       	brcc	.+30     	; 0x241a <vfprintf+0xb2>
    23fc:	26 ff       	sbrs	r18, 6
    23fe:	06 c0       	rjmp	.+12     	; 0x240c <vfprintf+0xa4>
    2400:	fa e0       	ldi	r31, 0x0A	; 10
    2402:	5f 9e       	mul	r5, r31
    2404:	30 0d       	add	r19, r0
    2406:	11 24       	eor	r1, r1
    2408:	53 2e       	mov	r5, r19
    240a:	13 c0       	rjmp	.+38     	; 0x2432 <vfprintf+0xca>
    240c:	8a e0       	ldi	r24, 0x0A	; 10
    240e:	38 9e       	mul	r3, r24
    2410:	30 0d       	add	r19, r0
    2412:	11 24       	eor	r1, r1
    2414:	33 2e       	mov	r3, r19
    2416:	20 62       	ori	r18, 0x20	; 32
    2418:	0c c0       	rjmp	.+24     	; 0x2432 <vfprintf+0xca>
    241a:	8e 32       	cpi	r24, 0x2E	; 46
    241c:	21 f4       	brne	.+8      	; 0x2426 <vfprintf+0xbe>
    241e:	26 fd       	sbrc	r18, 6
    2420:	6b c1       	rjmp	.+726    	; 0x26f8 <vfprintf+0x390>
    2422:	20 64       	ori	r18, 0x40	; 64
    2424:	06 c0       	rjmp	.+12     	; 0x2432 <vfprintf+0xca>
    2426:	8c 36       	cpi	r24, 0x6C	; 108
    2428:	11 f4       	brne	.+4      	; 0x242e <vfprintf+0xc6>
    242a:	20 68       	ori	r18, 0x80	; 128
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <vfprintf+0xca>
    242e:	88 36       	cpi	r24, 0x68	; 104
    2430:	41 f4       	brne	.+16     	; 0x2442 <vfprintf+0xda>
    2432:	f6 01       	movw	r30, r12
    2434:	93 fd       	sbrc	r25, 3
    2436:	85 91       	lpm	r24, Z+
    2438:	93 ff       	sbrs	r25, 3
    243a:	81 91       	ld	r24, Z+
    243c:	6f 01       	movw	r12, r30
    243e:	81 11       	cpse	r24, r1
    2440:	c1 cf       	rjmp	.-126    	; 0x23c4 <vfprintf+0x5c>
    2442:	98 2f       	mov	r25, r24
    2444:	9f 7d       	andi	r25, 0xDF	; 223
    2446:	95 54       	subi	r25, 0x45	; 69
    2448:	93 30       	cpi	r25, 0x03	; 3
    244a:	28 f4       	brcc	.+10     	; 0x2456 <vfprintf+0xee>
    244c:	0c 5f       	subi	r16, 0xFC	; 252
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	ff e3       	ldi	r31, 0x3F	; 63
    2452:	f9 83       	std	Y+1, r31	; 0x01
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <vfprintf+0x108>
    2456:	83 36       	cpi	r24, 0x63	; 99
    2458:	31 f0       	breq	.+12     	; 0x2466 <vfprintf+0xfe>
    245a:	83 37       	cpi	r24, 0x73	; 115
    245c:	71 f0       	breq	.+28     	; 0x247a <vfprintf+0x112>
    245e:	83 35       	cpi	r24, 0x53	; 83
    2460:	09 f0       	breq	.+2      	; 0x2464 <vfprintf+0xfc>
    2462:	5b c0       	rjmp	.+182    	; 0x251a <vfprintf+0x1b2>
    2464:	22 c0       	rjmp	.+68     	; 0x24aa <vfprintf+0x142>
    2466:	f8 01       	movw	r30, r16
    2468:	80 81       	ld	r24, Z
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	0e 5f       	subi	r16, 0xFE	; 254
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	44 24       	eor	r4, r4
    2472:	43 94       	inc	r4
    2474:	51 2c       	mov	r5, r1
    2476:	54 01       	movw	r10, r8
    2478:	15 c0       	rjmp	.+42     	; 0x24a4 <vfprintf+0x13c>
    247a:	38 01       	movw	r6, r16
    247c:	f2 e0       	ldi	r31, 0x02	; 2
    247e:	6f 0e       	add	r6, r31
    2480:	71 1c       	adc	r7, r1
    2482:	f8 01       	movw	r30, r16
    2484:	a0 80       	ld	r10, Z
    2486:	b1 80       	ldd	r11, Z+1	; 0x01
    2488:	26 ff       	sbrs	r18, 6
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <vfprintf+0x12a>
    248c:	65 2d       	mov	r22, r5
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <vfprintf+0x12e>
    2492:	6f ef       	ldi	r22, 0xFF	; 255
    2494:	7f ef       	ldi	r23, 0xFF	; 255
    2496:	c5 01       	movw	r24, r10
    2498:	2c 87       	std	Y+12, r18	; 0x0c
    249a:	0e 94 91 13 	call	0x2722	; 0x2722 <strnlen>
    249e:	2c 01       	movw	r4, r24
    24a0:	83 01       	movw	r16, r6
    24a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    24a4:	2f 77       	andi	r18, 0x7F	; 127
    24a6:	22 2e       	mov	r2, r18
    24a8:	17 c0       	rjmp	.+46     	; 0x24d8 <vfprintf+0x170>
    24aa:	38 01       	movw	r6, r16
    24ac:	f2 e0       	ldi	r31, 0x02	; 2
    24ae:	6f 0e       	add	r6, r31
    24b0:	71 1c       	adc	r7, r1
    24b2:	f8 01       	movw	r30, r16
    24b4:	a0 80       	ld	r10, Z
    24b6:	b1 80       	ldd	r11, Z+1	; 0x01
    24b8:	26 ff       	sbrs	r18, 6
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <vfprintf+0x15a>
    24bc:	65 2d       	mov	r22, r5
    24be:	70 e0       	ldi	r23, 0x00	; 0
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <vfprintf+0x15e>
    24c2:	6f ef       	ldi	r22, 0xFF	; 255
    24c4:	7f ef       	ldi	r23, 0xFF	; 255
    24c6:	c5 01       	movw	r24, r10
    24c8:	2c 87       	std	Y+12, r18	; 0x0c
    24ca:	0e 94 86 13 	call	0x270c	; 0x270c <strnlen_P>
    24ce:	2c 01       	movw	r4, r24
    24d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    24d2:	20 68       	ori	r18, 0x80	; 128
    24d4:	22 2e       	mov	r2, r18
    24d6:	83 01       	movw	r16, r6
    24d8:	23 fc       	sbrc	r2, 3
    24da:	1b c0       	rjmp	.+54     	; 0x2512 <vfprintf+0x1aa>
    24dc:	83 2d       	mov	r24, r3
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	48 16       	cp	r4, r24
    24e2:	59 06       	cpc	r5, r25
    24e4:	b0 f4       	brcc	.+44     	; 0x2512 <vfprintf+0x1aa>
    24e6:	b7 01       	movw	r22, r14
    24e8:	80 e2       	ldi	r24, 0x20	; 32
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    24f0:	3a 94       	dec	r3
    24f2:	f4 cf       	rjmp	.-24     	; 0x24dc <vfprintf+0x174>
    24f4:	f5 01       	movw	r30, r10
    24f6:	27 fc       	sbrc	r2, 7
    24f8:	85 91       	lpm	r24, Z+
    24fa:	27 fe       	sbrs	r2, 7
    24fc:	81 91       	ld	r24, Z+
    24fe:	5f 01       	movw	r10, r30
    2500:	b7 01       	movw	r22, r14
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    2508:	31 10       	cpse	r3, r1
    250a:	3a 94       	dec	r3
    250c:	f1 e0       	ldi	r31, 0x01	; 1
    250e:	4f 1a       	sub	r4, r31
    2510:	51 08       	sbc	r5, r1
    2512:	41 14       	cp	r4, r1
    2514:	51 04       	cpc	r5, r1
    2516:	71 f7       	brne	.-36     	; 0x24f4 <vfprintf+0x18c>
    2518:	e5 c0       	rjmp	.+458    	; 0x26e4 <vfprintf+0x37c>
    251a:	84 36       	cpi	r24, 0x64	; 100
    251c:	11 f0       	breq	.+4      	; 0x2522 <vfprintf+0x1ba>
    251e:	89 36       	cpi	r24, 0x69	; 105
    2520:	39 f5       	brne	.+78     	; 0x2570 <vfprintf+0x208>
    2522:	f8 01       	movw	r30, r16
    2524:	27 ff       	sbrs	r18, 7
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <vfprintf+0x1ce>
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	0c 5f       	subi	r16, 0xFC	; 252
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	08 c0       	rjmp	.+16     	; 0x2546 <vfprintf+0x1de>
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	88 27       	eor	r24, r24
    253c:	77 fd       	sbrc	r23, 7
    253e:	80 95       	com	r24
    2540:	98 2f       	mov	r25, r24
    2542:	0e 5f       	subi	r16, 0xFE	; 254
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	2f 76       	andi	r18, 0x6F	; 111
    2548:	b2 2e       	mov	r11, r18
    254a:	97 ff       	sbrs	r25, 7
    254c:	09 c0       	rjmp	.+18     	; 0x2560 <vfprintf+0x1f8>
    254e:	90 95       	com	r25
    2550:	80 95       	com	r24
    2552:	70 95       	com	r23
    2554:	61 95       	neg	r22
    2556:	7f 4f       	sbci	r23, 0xFF	; 255
    2558:	8f 4f       	sbci	r24, 0xFF	; 255
    255a:	9f 4f       	sbci	r25, 0xFF	; 255
    255c:	20 68       	ori	r18, 0x80	; 128
    255e:	b2 2e       	mov	r11, r18
    2560:	2a e0       	ldi	r18, 0x0A	; 10
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	a4 01       	movw	r20, r8
    2566:	0e 94 ce 13 	call	0x279c	; 0x279c <__ultoa_invert>
    256a:	a8 2e       	mov	r10, r24
    256c:	a8 18       	sub	r10, r8
    256e:	44 c0       	rjmp	.+136    	; 0x25f8 <vfprintf+0x290>
    2570:	85 37       	cpi	r24, 0x75	; 117
    2572:	29 f4       	brne	.+10     	; 0x257e <vfprintf+0x216>
    2574:	2f 7e       	andi	r18, 0xEF	; 239
    2576:	b2 2e       	mov	r11, r18
    2578:	2a e0       	ldi	r18, 0x0A	; 10
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	25 c0       	rjmp	.+74     	; 0x25c8 <vfprintf+0x260>
    257e:	f2 2f       	mov	r31, r18
    2580:	f9 7f       	andi	r31, 0xF9	; 249
    2582:	bf 2e       	mov	r11, r31
    2584:	8f 36       	cpi	r24, 0x6F	; 111
    2586:	c1 f0       	breq	.+48     	; 0x25b8 <vfprintf+0x250>
    2588:	18 f4       	brcc	.+6      	; 0x2590 <vfprintf+0x228>
    258a:	88 35       	cpi	r24, 0x58	; 88
    258c:	79 f0       	breq	.+30     	; 0x25ac <vfprintf+0x244>
    258e:	b4 c0       	rjmp	.+360    	; 0x26f8 <vfprintf+0x390>
    2590:	80 37       	cpi	r24, 0x70	; 112
    2592:	19 f0       	breq	.+6      	; 0x259a <vfprintf+0x232>
    2594:	88 37       	cpi	r24, 0x78	; 120
    2596:	21 f0       	breq	.+8      	; 0x25a0 <vfprintf+0x238>
    2598:	af c0       	rjmp	.+350    	; 0x26f8 <vfprintf+0x390>
    259a:	2f 2f       	mov	r18, r31
    259c:	20 61       	ori	r18, 0x10	; 16
    259e:	b2 2e       	mov	r11, r18
    25a0:	b4 fe       	sbrs	r11, 4
    25a2:	0d c0       	rjmp	.+26     	; 0x25be <vfprintf+0x256>
    25a4:	8b 2d       	mov	r24, r11
    25a6:	84 60       	ori	r24, 0x04	; 4
    25a8:	b8 2e       	mov	r11, r24
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <vfprintf+0x256>
    25ac:	24 ff       	sbrs	r18, 4
    25ae:	0a c0       	rjmp	.+20     	; 0x25c4 <vfprintf+0x25c>
    25b0:	9f 2f       	mov	r25, r31
    25b2:	96 60       	ori	r25, 0x06	; 6
    25b4:	b9 2e       	mov	r11, r25
    25b6:	06 c0       	rjmp	.+12     	; 0x25c4 <vfprintf+0x25c>
    25b8:	28 e0       	ldi	r18, 0x08	; 8
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	05 c0       	rjmp	.+10     	; 0x25c8 <vfprintf+0x260>
    25be:	20 e1       	ldi	r18, 0x10	; 16
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <vfprintf+0x260>
    25c4:	20 e1       	ldi	r18, 0x10	; 16
    25c6:	32 e0       	ldi	r19, 0x02	; 2
    25c8:	f8 01       	movw	r30, r16
    25ca:	b7 fe       	sbrs	r11, 7
    25cc:	07 c0       	rjmp	.+14     	; 0x25dc <vfprintf+0x274>
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	0c 5f       	subi	r16, 0xFC	; 252
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	06 c0       	rjmp	.+12     	; 0x25e8 <vfprintf+0x280>
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 5f       	subi	r16, 0xFE	; 254
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	a4 01       	movw	r20, r8
    25ea:	0e 94 ce 13 	call	0x279c	; 0x279c <__ultoa_invert>
    25ee:	a8 2e       	mov	r10, r24
    25f0:	a8 18       	sub	r10, r8
    25f2:	fb 2d       	mov	r31, r11
    25f4:	ff 77       	andi	r31, 0x7F	; 127
    25f6:	bf 2e       	mov	r11, r31
    25f8:	b6 fe       	sbrs	r11, 6
    25fa:	0b c0       	rjmp	.+22     	; 0x2612 <vfprintf+0x2aa>
    25fc:	2b 2d       	mov	r18, r11
    25fe:	2e 7f       	andi	r18, 0xFE	; 254
    2600:	a5 14       	cp	r10, r5
    2602:	50 f4       	brcc	.+20     	; 0x2618 <vfprintf+0x2b0>
    2604:	b4 fe       	sbrs	r11, 4
    2606:	0a c0       	rjmp	.+20     	; 0x261c <vfprintf+0x2b4>
    2608:	b2 fc       	sbrc	r11, 2
    260a:	08 c0       	rjmp	.+16     	; 0x261c <vfprintf+0x2b4>
    260c:	2b 2d       	mov	r18, r11
    260e:	2e 7e       	andi	r18, 0xEE	; 238
    2610:	05 c0       	rjmp	.+10     	; 0x261c <vfprintf+0x2b4>
    2612:	7a 2c       	mov	r7, r10
    2614:	2b 2d       	mov	r18, r11
    2616:	03 c0       	rjmp	.+6      	; 0x261e <vfprintf+0x2b6>
    2618:	7a 2c       	mov	r7, r10
    261a:	01 c0       	rjmp	.+2      	; 0x261e <vfprintf+0x2b6>
    261c:	75 2c       	mov	r7, r5
    261e:	24 ff       	sbrs	r18, 4
    2620:	0d c0       	rjmp	.+26     	; 0x263c <vfprintf+0x2d4>
    2622:	fe 01       	movw	r30, r28
    2624:	ea 0d       	add	r30, r10
    2626:	f1 1d       	adc	r31, r1
    2628:	80 81       	ld	r24, Z
    262a:	80 33       	cpi	r24, 0x30	; 48
    262c:	11 f4       	brne	.+4      	; 0x2632 <vfprintf+0x2ca>
    262e:	29 7e       	andi	r18, 0xE9	; 233
    2630:	09 c0       	rjmp	.+18     	; 0x2644 <vfprintf+0x2dc>
    2632:	22 ff       	sbrs	r18, 2
    2634:	06 c0       	rjmp	.+12     	; 0x2642 <vfprintf+0x2da>
    2636:	73 94       	inc	r7
    2638:	73 94       	inc	r7
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <vfprintf+0x2dc>
    263c:	82 2f       	mov	r24, r18
    263e:	86 78       	andi	r24, 0x86	; 134
    2640:	09 f0       	breq	.+2      	; 0x2644 <vfprintf+0x2dc>
    2642:	73 94       	inc	r7
    2644:	23 fd       	sbrc	r18, 3
    2646:	13 c0       	rjmp	.+38     	; 0x266e <vfprintf+0x306>
    2648:	20 ff       	sbrs	r18, 0
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <vfprintf+0x2f0>
    264c:	5a 2c       	mov	r5, r10
    264e:	73 14       	cp	r7, r3
    2650:	18 f4       	brcc	.+6      	; 0x2658 <vfprintf+0x2f0>
    2652:	53 0c       	add	r5, r3
    2654:	57 18       	sub	r5, r7
    2656:	73 2c       	mov	r7, r3
    2658:	73 14       	cp	r7, r3
    265a:	68 f4       	brcc	.+26     	; 0x2676 <vfprintf+0x30e>
    265c:	b7 01       	movw	r22, r14
    265e:	80 e2       	ldi	r24, 0x20	; 32
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	2c 87       	std	Y+12, r18	; 0x0c
    2664:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    2668:	73 94       	inc	r7
    266a:	2c 85       	ldd	r18, Y+12	; 0x0c
    266c:	f5 cf       	rjmp	.-22     	; 0x2658 <vfprintf+0x2f0>
    266e:	73 14       	cp	r7, r3
    2670:	10 f4       	brcc	.+4      	; 0x2676 <vfprintf+0x30e>
    2672:	37 18       	sub	r3, r7
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <vfprintf+0x310>
    2676:	31 2c       	mov	r3, r1
    2678:	24 ff       	sbrs	r18, 4
    267a:	12 c0       	rjmp	.+36     	; 0x26a0 <vfprintf+0x338>
    267c:	b7 01       	movw	r22, r14
    267e:	80 e3       	ldi	r24, 0x30	; 48
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	2c 87       	std	Y+12, r18	; 0x0c
    2684:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    2688:	2c 85       	ldd	r18, Y+12	; 0x0c
    268a:	22 ff       	sbrs	r18, 2
    268c:	17 c0       	rjmp	.+46     	; 0x26bc <vfprintf+0x354>
    268e:	21 ff       	sbrs	r18, 1
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <vfprintf+0x330>
    2692:	88 e5       	ldi	r24, 0x58	; 88
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	02 c0       	rjmp	.+4      	; 0x269c <vfprintf+0x334>
    2698:	88 e7       	ldi	r24, 0x78	; 120
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	b7 01       	movw	r22, r14
    269e:	0c c0       	rjmp	.+24     	; 0x26b8 <vfprintf+0x350>
    26a0:	82 2f       	mov	r24, r18
    26a2:	86 78       	andi	r24, 0x86	; 134
    26a4:	59 f0       	breq	.+22     	; 0x26bc <vfprintf+0x354>
    26a6:	21 fd       	sbrc	r18, 1
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <vfprintf+0x346>
    26aa:	80 e2       	ldi	r24, 0x20	; 32
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <vfprintf+0x348>
    26ae:	8b e2       	ldi	r24, 0x2B	; 43
    26b0:	27 fd       	sbrc	r18, 7
    26b2:	8d e2       	ldi	r24, 0x2D	; 45
    26b4:	b7 01       	movw	r22, r14
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    26bc:	a5 14       	cp	r10, r5
    26be:	38 f4       	brcc	.+14     	; 0x26ce <vfprintf+0x366>
    26c0:	b7 01       	movw	r22, r14
    26c2:	80 e3       	ldi	r24, 0x30	; 48
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    26ca:	5a 94       	dec	r5
    26cc:	f7 cf       	rjmp	.-18     	; 0x26bc <vfprintf+0x354>
    26ce:	aa 94       	dec	r10
    26d0:	f4 01       	movw	r30, r8
    26d2:	ea 0d       	add	r30, r10
    26d4:	f1 1d       	adc	r31, r1
    26d6:	80 81       	ld	r24, Z
    26d8:	b7 01       	movw	r22, r14
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    26e0:	a1 10       	cpse	r10, r1
    26e2:	f5 cf       	rjmp	.-22     	; 0x26ce <vfprintf+0x366>
    26e4:	33 20       	and	r3, r3
    26e6:	09 f4       	brne	.+2      	; 0x26ea <vfprintf+0x382>
    26e8:	51 ce       	rjmp	.-862    	; 0x238c <vfprintf+0x24>
    26ea:	b7 01       	movw	r22, r14
    26ec:	80 e2       	ldi	r24, 0x20	; 32
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 9c 13 	call	0x2738	; 0x2738 <fputc>
    26f4:	3a 94       	dec	r3
    26f6:	f6 cf       	rjmp	.-20     	; 0x26e4 <vfprintf+0x37c>
    26f8:	f7 01       	movw	r30, r14
    26fa:	86 81       	ldd	r24, Z+6	; 0x06
    26fc:	97 81       	ldd	r25, Z+7	; 0x07
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <vfprintf+0x39c>
    2700:	8f ef       	ldi	r24, 0xFF	; 255
    2702:	9f ef       	ldi	r25, 0xFF	; 255
    2704:	2c 96       	adiw	r28, 0x0c	; 12
    2706:	e2 e1       	ldi	r30, 0x12	; 18
    2708:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__epilogue_restores__>

0000270c <strnlen_P>:
    270c:	fc 01       	movw	r30, r24
    270e:	05 90       	lpm	r0, Z+
    2710:	61 50       	subi	r22, 0x01	; 1
    2712:	70 40       	sbci	r23, 0x00	; 0
    2714:	01 10       	cpse	r0, r1
    2716:	d8 f7       	brcc	.-10     	; 0x270e <strnlen_P+0x2>
    2718:	80 95       	com	r24
    271a:	90 95       	com	r25
    271c:	8e 0f       	add	r24, r30
    271e:	9f 1f       	adc	r25, r31
    2720:	08 95       	ret

00002722 <strnlen>:
    2722:	fc 01       	movw	r30, r24
    2724:	61 50       	subi	r22, 0x01	; 1
    2726:	70 40       	sbci	r23, 0x00	; 0
    2728:	01 90       	ld	r0, Z+
    272a:	01 10       	cpse	r0, r1
    272c:	d8 f7       	brcc	.-10     	; 0x2724 <strnlen+0x2>
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	8e 0f       	add	r24, r30
    2734:	9f 1f       	adc	r25, r31
    2736:	08 95       	ret

00002738 <fputc>:
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	18 2f       	mov	r17, r24
    2742:	09 2f       	mov	r16, r25
    2744:	eb 01       	movw	r28, r22
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	81 fd       	sbrc	r24, 1
    274a:	03 c0       	rjmp	.+6      	; 0x2752 <fputc+0x1a>
    274c:	8f ef       	ldi	r24, 0xFF	; 255
    274e:	9f ef       	ldi	r25, 0xFF	; 255
    2750:	20 c0       	rjmp	.+64     	; 0x2792 <fputc+0x5a>
    2752:	82 ff       	sbrs	r24, 2
    2754:	10 c0       	rjmp	.+32     	; 0x2776 <fputc+0x3e>
    2756:	4e 81       	ldd	r20, Y+6	; 0x06
    2758:	5f 81       	ldd	r21, Y+7	; 0x07
    275a:	2c 81       	ldd	r18, Y+4	; 0x04
    275c:	3d 81       	ldd	r19, Y+5	; 0x05
    275e:	42 17       	cp	r20, r18
    2760:	53 07       	cpc	r21, r19
    2762:	7c f4       	brge	.+30     	; 0x2782 <fputc+0x4a>
    2764:	e8 81       	ld	r30, Y
    2766:	f9 81       	ldd	r31, Y+1	; 0x01
    2768:	9f 01       	movw	r18, r30
    276a:	2f 5f       	subi	r18, 0xFF	; 255
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	39 83       	std	Y+1, r19	; 0x01
    2770:	28 83       	st	Y, r18
    2772:	10 83       	st	Z, r17
    2774:	06 c0       	rjmp	.+12     	; 0x2782 <fputc+0x4a>
    2776:	e8 85       	ldd	r30, Y+8	; 0x08
    2778:	f9 85       	ldd	r31, Y+9	; 0x09
    277a:	81 2f       	mov	r24, r17
    277c:	09 95       	icall
    277e:	89 2b       	or	r24, r25
    2780:	29 f7       	brne	.-54     	; 0x274c <fputc+0x14>
    2782:	2e 81       	ldd	r18, Y+6	; 0x06
    2784:	3f 81       	ldd	r19, Y+7	; 0x07
    2786:	2f 5f       	subi	r18, 0xFF	; 255
    2788:	3f 4f       	sbci	r19, 0xFF	; 255
    278a:	3f 83       	std	Y+7, r19	; 0x07
    278c:	2e 83       	std	Y+6, r18	; 0x06
    278e:	81 2f       	mov	r24, r17
    2790:	90 2f       	mov	r25, r16
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	08 95       	ret

0000279c <__ultoa_invert>:
    279c:	fa 01       	movw	r30, r20
    279e:	aa 27       	eor	r26, r26
    27a0:	28 30       	cpi	r18, 0x08	; 8
    27a2:	51 f1       	breq	.+84     	; 0x27f8 <__ultoa_invert+0x5c>
    27a4:	20 31       	cpi	r18, 0x10	; 16
    27a6:	81 f1       	breq	.+96     	; 0x2808 <__ultoa_invert+0x6c>
    27a8:	e8 94       	clt
    27aa:	6f 93       	push	r22
    27ac:	6e 7f       	andi	r22, 0xFE	; 254
    27ae:	6e 5f       	subi	r22, 0xFE	; 254
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	8f 4f       	sbci	r24, 0xFF	; 255
    27b4:	9f 4f       	sbci	r25, 0xFF	; 255
    27b6:	af 4f       	sbci	r26, 0xFF	; 255
    27b8:	b1 e0       	ldi	r27, 0x01	; 1
    27ba:	3e d0       	rcall	.+124    	; 0x2838 <__ultoa_invert+0x9c>
    27bc:	b4 e0       	ldi	r27, 0x04	; 4
    27be:	3c d0       	rcall	.+120    	; 0x2838 <__ultoa_invert+0x9c>
    27c0:	67 0f       	add	r22, r23
    27c2:	78 1f       	adc	r23, r24
    27c4:	89 1f       	adc	r24, r25
    27c6:	9a 1f       	adc	r25, r26
    27c8:	a1 1d       	adc	r26, r1
    27ca:	68 0f       	add	r22, r24
    27cc:	79 1f       	adc	r23, r25
    27ce:	8a 1f       	adc	r24, r26
    27d0:	91 1d       	adc	r25, r1
    27d2:	a1 1d       	adc	r26, r1
    27d4:	6a 0f       	add	r22, r26
    27d6:	71 1d       	adc	r23, r1
    27d8:	81 1d       	adc	r24, r1
    27da:	91 1d       	adc	r25, r1
    27dc:	a1 1d       	adc	r26, r1
    27de:	20 d0       	rcall	.+64     	; 0x2820 <__ultoa_invert+0x84>
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <__ultoa_invert+0x48>
    27e2:	68 94       	set
    27e4:	3f 91       	pop	r19
    27e6:	2a e0       	ldi	r18, 0x0A	; 10
    27e8:	26 9f       	mul	r18, r22
    27ea:	11 24       	eor	r1, r1
    27ec:	30 19       	sub	r19, r0
    27ee:	30 5d       	subi	r19, 0xD0	; 208
    27f0:	31 93       	st	Z+, r19
    27f2:	de f6       	brtc	.-74     	; 0x27aa <__ultoa_invert+0xe>
    27f4:	cf 01       	movw	r24, r30
    27f6:	08 95       	ret
    27f8:	46 2f       	mov	r20, r22
    27fa:	47 70       	andi	r20, 0x07	; 7
    27fc:	40 5d       	subi	r20, 0xD0	; 208
    27fe:	41 93       	st	Z+, r20
    2800:	b3 e0       	ldi	r27, 0x03	; 3
    2802:	0f d0       	rcall	.+30     	; 0x2822 <__ultoa_invert+0x86>
    2804:	c9 f7       	brne	.-14     	; 0x27f8 <__ultoa_invert+0x5c>
    2806:	f6 cf       	rjmp	.-20     	; 0x27f4 <__ultoa_invert+0x58>
    2808:	46 2f       	mov	r20, r22
    280a:	4f 70       	andi	r20, 0x0F	; 15
    280c:	40 5d       	subi	r20, 0xD0	; 208
    280e:	4a 33       	cpi	r20, 0x3A	; 58
    2810:	18 f0       	brcs	.+6      	; 0x2818 <__ultoa_invert+0x7c>
    2812:	49 5d       	subi	r20, 0xD9	; 217
    2814:	31 fd       	sbrc	r19, 1
    2816:	40 52       	subi	r20, 0x20	; 32
    2818:	41 93       	st	Z+, r20
    281a:	02 d0       	rcall	.+4      	; 0x2820 <__ultoa_invert+0x84>
    281c:	a9 f7       	brne	.-22     	; 0x2808 <__ultoa_invert+0x6c>
    281e:	ea cf       	rjmp	.-44     	; 0x27f4 <__ultoa_invert+0x58>
    2820:	b4 e0       	ldi	r27, 0x04	; 4
    2822:	a6 95       	lsr	r26
    2824:	97 95       	ror	r25
    2826:	87 95       	ror	r24
    2828:	77 95       	ror	r23
    282a:	67 95       	ror	r22
    282c:	ba 95       	dec	r27
    282e:	c9 f7       	brne	.-14     	; 0x2822 <__ultoa_invert+0x86>
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	61 05       	cpc	r22, r1
    2834:	71 05       	cpc	r23, r1
    2836:	08 95       	ret
    2838:	9b 01       	movw	r18, r22
    283a:	ac 01       	movw	r20, r24
    283c:	0a 2e       	mov	r0, r26
    283e:	06 94       	lsr	r0
    2840:	57 95       	ror	r21
    2842:	47 95       	ror	r20
    2844:	37 95       	ror	r19
    2846:	27 95       	ror	r18
    2848:	ba 95       	dec	r27
    284a:	c9 f7       	brne	.-14     	; 0x283e <__ultoa_invert+0xa2>
    284c:	62 0f       	add	r22, r18
    284e:	73 1f       	adc	r23, r19
    2850:	84 1f       	adc	r24, r20
    2852:	95 1f       	adc	r25, r21
    2854:	a0 1d       	adc	r26, r0
    2856:	08 95       	ret

00002858 <__prologue_saves__>:
    2858:	2f 92       	push	r2
    285a:	3f 92       	push	r3
    285c:	4f 92       	push	r4
    285e:	5f 92       	push	r5
    2860:	6f 92       	push	r6
    2862:	7f 92       	push	r7
    2864:	8f 92       	push	r8
    2866:	9f 92       	push	r9
    2868:	af 92       	push	r10
    286a:	bf 92       	push	r11
    286c:	cf 92       	push	r12
    286e:	df 92       	push	r13
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	0f 93       	push	r16
    2876:	1f 93       	push	r17
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	ca 1b       	sub	r28, r26
    2882:	db 0b       	sbc	r29, r27
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	09 94       	ijmp

00002890 <__epilogue_restores__>:
    2890:	2a 88       	ldd	r2, Y+18	; 0x12
    2892:	39 88       	ldd	r3, Y+17	; 0x11
    2894:	48 88       	ldd	r4, Y+16	; 0x10
    2896:	5f 84       	ldd	r5, Y+15	; 0x0f
    2898:	6e 84       	ldd	r6, Y+14	; 0x0e
    289a:	7d 84       	ldd	r7, Y+13	; 0x0d
    289c:	8c 84       	ldd	r8, Y+12	; 0x0c
    289e:	9b 84       	ldd	r9, Y+11	; 0x0b
    28a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    28a2:	b9 84       	ldd	r11, Y+9	; 0x09
    28a4:	c8 84       	ldd	r12, Y+8	; 0x08
    28a6:	df 80       	ldd	r13, Y+7	; 0x07
    28a8:	ee 80       	ldd	r14, Y+6	; 0x06
    28aa:	fd 80       	ldd	r15, Y+5	; 0x05
    28ac:	0c 81       	ldd	r16, Y+4	; 0x04
    28ae:	1b 81       	ldd	r17, Y+3	; 0x03
    28b0:	aa 81       	ldd	r26, Y+2	; 0x02
    28b2:	b9 81       	ldd	r27, Y+1	; 0x01
    28b4:	ce 0f       	add	r28, r30
    28b6:	d1 1d       	adc	r29, r1
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	ed 01       	movw	r28, r26
    28c4:	08 95       	ret

000028c6 <_exit>:
    28c6:	f8 94       	cli

000028c8 <__stop_program>:
    28c8:	ff cf       	rjmp	.-2      	; 0x28c8 <__stop_program>
