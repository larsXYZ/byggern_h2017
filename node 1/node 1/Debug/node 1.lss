
node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  000030a8  0000313c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ca  008002a0  008002a0  000032dc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000408  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004cd7  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001500  00000000  00000000  00008417  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000178c  00000000  00000000  00009917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b7c  00000000  00000000  0000b0a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d0f  00000000  00000000  0000bc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002746  00000000  00000000  0000c92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a8  00000000  00000000  0000f075  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_1>
       8:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_2>
       c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	12 e0       	ldi	r17, 0x02	; 2
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e8 ea       	ldi	r30, 0xA8	; 168
     6d4:	f0 e3       	ldi	r31, 0x30	; 48
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	a0 3a       	cpi	r26, 0xA0	; 160
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	a0 ea       	ldi	r26, 0xA0	; 160
     6e6:	b2 e0       	ldi	r27, 0x02	; 2
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	aa 36       	cpi	r26, 0x6A	; 106
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <main>
     6f6:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <CAN_init>:
#include <avr/interrupt.h>

volatile int message_received = 0;

void CAN_init(char mode)
{
     6fe:	cf 93       	push	r28
     700:	c8 2f       	mov	r28, r24
	//Resets MCP-Values
	MCP_init();
     702:	0e 94 6d 04 	call	0x8da	; 0x8da <MCP_init>
	
	//Sets receive control register, disables rollover for RX-buffer 0
	MCP_bit_modify(MCP_RXB0CTRL,0b01100000,0xFF);
     706:	4f ef       	ldi	r20, 0xFF	; 255
     708:	60 e6       	ldi	r22, 0x60	; 96
     70a:	80 e6       	ldi	r24, 0x60	; 96
     70c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP_bit_modify>

	//Interrupt when message is received
	MCP_bit_modify(MCP_CANINTE, 0x01, 0x01);
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	8b e2       	ldi	r24, 0x2B	; 43
     716:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP_bit_modify>
	
	//Sets mode of operation
	switch (mode)
     71a:	cc 23       	and	r28, r28
     71c:	19 f0       	breq	.+6      	; 0x724 <CAN_init+0x26>
     71e:	c1 30       	cpi	r28, 0x01	; 1
     720:	39 f0       	breq	.+14     	; 0x730 <CAN_init+0x32>
     722:	0b c0       	rjmp	.+22     	; 0x73a <CAN_init+0x3c>
	{
		case CAN_MODE_LOOPBACK: //Loopback mode
		{
			MCP_bit_modify(MCP_CANCTRL,0xE0,(0x40));
     724:	40 e4       	ldi	r20, 0x40	; 64
     726:	60 ee       	ldi	r22, 0xE0	; 224
     728:	8f e0       	ldi	r24, 0x0F	; 15
     72a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP_bit_modify>
			break;
     72e:	05 c0       	rjmp	.+10     	; 0x73a <CAN_init+0x3c>
		}
		
		case CAN_MODE_NORMAL: //Normal operations
		{
			MCP_bit_modify(MCP_CANCTRL,0xE0,(0x00));
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	60 ee       	ldi	r22, 0xE0	; 224
     734:	8f e0       	ldi	r24, 0x0F	; 15
     736:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP_bit_modify>
	}
	
	//Initializing interrupt
	#ifdef __AVR_ATmega162__
	
	MCUCR |= (1<<ISC01); 
     73a:	85 b7       	in	r24, 0x35	; 53
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
     740:	8b b7       	in	r24, 0x3b	; 59
     742:	80 64       	ori	r24, 0x40	; 64
     744:	8b bf       	out	0x3b, r24	; 59
	
	EICRB |= (1<<ISC51); //Falling edge causes interrupt
	EIMSK |= (1<<INT5); //Sets PE5 as input for interrupts
	
	#endif
}
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <CAN_send_frame>:

void CAN_send_frame(struct can_frame* message)
{
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	7c 01       	movw	r14, r24
	
	//Sets ID
	MCP_write((message->id >> 3), MCP_TXB0SIDH); //Higher ID-bits 10 - 3
     758:	fc 01       	movw	r30, r24
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	95 95       	asr	r25
     764:	87 95       	ror	r24
     766:	95 95       	asr	r25
     768:	87 95       	ror	r24
     76a:	61 e3       	ldi	r22, 0x31	; 49
     76c:	0e 94 2e 04 	call	0x85c	; 0x85c <MCP_write>
	MCP_write((message->id << 5), MCP_TXB0SIDL); //Lower ID-bits 2-0
     770:	f7 01       	movw	r30, r14
     772:	80 81       	ld	r24, Z
     774:	62 e3       	ldi	r22, 0x32	; 50
     776:	82 95       	swap	r24
     778:	88 0f       	add	r24, r24
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	0e 94 2e 04 	call	0x85c	; 0x85c <MCP_write>
	
	//Sets Data length
	MCP_write(message->length, MCP_TXB0DLC);
     780:	65 e3       	ldi	r22, 0x35	; 53
     782:	f7 01       	movw	r30, r14
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	0e 94 2e 04 	call	0x85c	; 0x85c <MCP_write>
	
	//Sets Data bytes
	for (int i = 0; i < message->length; i++)
     78a:	f7 01       	movw	r30, r14
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	18 16       	cp	r1, r24
     790:	ac f4       	brge	.+42     	; 0x7bc <CAN_send_frame+0x72>
     792:	87 01       	movw	r16, r14
     794:	0d 5f       	subi	r16, 0xFD	; 253
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	6c 2f       	mov	r22, r28
     79e:	6a 5c       	subi	r22, 0xCA	; 202
	{
		MCP_write(message->data[i], MCP_TXB0D0 + i);
     7a0:	f8 01       	movw	r30, r16
     7a2:	81 91       	ld	r24, Z+
     7a4:	8f 01       	movw	r16, r30
     7a6:	0e 94 2e 04 	call	0x85c	; 0x85c <MCP_write>
	
	//Sets Data length
	MCP_write(message->length, MCP_TXB0DLC);
	
	//Sets Data bytes
	for (int i = 0; i < message->length; i++)
     7aa:	21 96       	adiw	r28, 0x01	; 1
     7ac:	f7 01       	movw	r30, r14
     7ae:	22 81       	ldd	r18, Z+2	; 0x02
     7b0:	33 27       	eor	r19, r19
     7b2:	27 fd       	sbrc	r18, 7
     7b4:	30 95       	com	r19
     7b6:	c2 17       	cp	r28, r18
     7b8:	d3 07       	cpc	r29, r19
     7ba:	84 f3       	brlt	.-32     	; 0x79c <CAN_send_frame+0x52>
	{
		MCP_write(message->data[i], MCP_TXB0D0 + i);
	}
	
	//Sends
	MCP_RTS(0);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 46 04 	call	0x88c	; 0x88c <MCP_RTS>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	08 95       	ret

000007d0 <__vector_1>:

//Enables interrupt vector

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	8f 93       	push	r24
     7dc:	9f 93       	push	r25
}

int CAN_int_vector()
{
	//Tell rest of the program we have mail
	message_received = 1;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	90 93 a1 02 	sts	0x02A1, r25
     7e6:	80 93 a0 02 	sts	0x02A0, r24

#ifdef __AVR_ATmega162__
ISR(INT0_vect)
{
	CAN_int_vector();
}
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <CAN_send_parameter>:
	return 0;
	
}

void CAN_send_parameter(int id, float parameter)
{
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	2b 97       	sbiw	r28, 0x0b	; 11
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	8c 01       	movw	r16, r24
     812:	cb 01       	movw	r24, r22
     814:	ba 01       	movw	r22, r20
	//We need to send a valid regulator parameter
	if (id != ID_REGULATOR_KI && id != ID_REGULATOR_KP) return;
     816:	98 01       	movw	r18, r16
     818:	22 50       	subi	r18, 0x02	; 2
     81a:	31 09       	sbc	r19, r1
     81c:	22 30       	cpi	r18, 0x02	; 2
     81e:	31 05       	cpc	r19, r1
     820:	90 f4       	brcc	.+36     	; 0x846 <CAN_send_parameter+0x4e>

	//Multiplies by 1000 and splits into lower and higher bits
	uint16_t total_par = (uint16_t)(parameter * 1000);
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	4a e7       	ldi	r20, 0x7A	; 122
     828:	54 e4       	ldi	r21, 0x44	; 68
     82a:	0e 94 b0 14 	call	0x2960	; 0x2960 <__mulsf3>
     82e:	0e 94 ce 13 	call	0x279c	; 0x279c <__fixunssfsi>
	uint8_t lowerbits = total_par;
	uint8_t higherbits = (total_par >> 8);

	//Constructs frame
	struct can_frame message;
	message.length = 2;
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	8b 83       	std	Y+3, r24	; 0x03
	message.data[0] = higherbits;
     836:	7c 83       	std	Y+4, r23	; 0x04
	message.data[1] = lowerbits;
     838:	6d 83       	std	Y+5, r22	; 0x05
	message.id = id;
     83a:	1a 83       	std	Y+2, r17	; 0x02
     83c:	09 83       	std	Y+1, r16	; 0x01

	CAN_send_frame(&message);
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_send_frame>

     846:	2b 96       	adiw	r28, 0x0b	; 11
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	08 95       	ret

0000085c <MCP_write>:
	SPI_init();
	MCP_reset();
}

void MCP_write(char byte, char address)
{
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	c8 2f       	mov	r28, r24
     862:	d6 2f       	mov	r29, r22
	SPI_select_slave(1);
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
	SPI_send_byte(MCP_WRITE);
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_send_byte(address);
     872:	8d 2f       	mov	r24, r29
     874:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_send_byte(byte);
     878:	8c 2f       	mov	r24, r28
     87a:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_select_slave(0);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
}
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <MCP_RTS>:
	SPI_select_slave(0);
	return received_message;
}

void MCP_RTS(char buffer)
{
     88c:	cf 93       	push	r28
	//Creates the instruction
	char instr = 128;
	if (buffer == 0) instr += 1;
     88e:	88 23       	and	r24, r24
     890:	31 f0       	breq	.+12     	; 0x89e <MCP_RTS+0x12>
	else if (buffer == 1) instr += 2;
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	31 f0       	breq	.+12     	; 0x8a2 <MCP_RTS+0x16>
	else if (buffer == 2) instr += 4;	
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	31 f0       	breq	.+12     	; 0x8a6 <MCP_RTS+0x1a>
}

void MCP_RTS(char buffer)
{
	//Creates the instruction
	char instr = 128;
     89a:	c0 e8       	ldi	r28, 0x80	; 128
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <MCP_RTS+0x1c>
	if (buffer == 0) instr += 1;
     89e:	c1 e8       	ldi	r28, 0x81	; 129
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <MCP_RTS+0x1c>
	else if (buffer == 1) instr += 2;
     8a2:	c2 e8       	ldi	r28, 0x82	; 130
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <MCP_RTS+0x1c>
	else if (buffer == 2) instr += 4;	
     8a6:	c4 e8       	ldi	r28, 0x84	; 132

	//Sends instruction
	SPI_select_slave(1);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
	SPI_send_byte(instr);
     8b0:	8c 2f       	mov	r24, r28
     8b2:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_select_slave(0);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
}
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <MCP_reset>:

void MCP_reset()
{
	SPI_select_slave(1);
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
	SPI_send_byte(MCP_RESET);
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_select_slave(0);
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
     8d8:	08 95       	ret

000008da <MCP_init>:
#include "MCP2515.h"
#include "SPI_driver.h"

void MCP_init()
{
	SPI_init();
     8da:	0e 94 90 04 	call	0x920	; 0x920 <SPI_init>
	MCP_reset();
     8de:	0e 94 61 04 	call	0x8c2	; 0x8c2 <MCP_reset>
     8e2:	08 95       	ret

000008e4 <MCP_bit_modify>:
	SPI_select_slave(0);
	return received_data;
}

void MCP_bit_modify(char address, char mask_byte, char data_byte)
{
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	18 2f       	mov	r17, r24
     8ec:	d6 2f       	mov	r29, r22
     8ee:	c4 2f       	mov	r28, r20
	SPI_select_slave(1);
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
	SPI_send_byte(MCP_BITMOD); //Instruction
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_send_byte(address);
     8fe:	81 2f       	mov	r24, r17
     900:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_send_byte(mask_byte);
     904:	8d 2f       	mov	r24, r29
     906:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_send_byte(data_byte);
     90a:	8c 2f       	mov	r24, r28
     90c:	0e 94 98 04 	call	0x930	; 0x930 <SPI_send_byte>
	SPI_select_slave(0);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 9e 04 	call	0x93c	; 0x93c <SPI_select_slave>
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	08 95       	ret

00000920 <SPI_init>:

void SPI_init()
{
	
	//Sets SPI_MISO as output
	DDRB |= (1<<SPI_MOSI);
     920:	bd 9a       	sbi	0x17, 5	; 23
	
	//Sets SPI_SCK as output
	DDRB |= (1<<SPI_SCK);
     922:	bf 9a       	sbi	0x17, 7	; 23
	
	//Sets SPI_SS as output
	DDRB |= (1<<SPI_SS);
     924:	bc 9a       	sbi	0x17, 4	; 23
	#ifdef __AVR_ATmega2560__
	DDRB |= (1<<PB0); 
	#endif
	
	//Sets SPI_MISO as input
	DDRB &= ~(1<<SPI_MISO);
     926:	be 98       	cbi	0x17, 6	; 23
	
	//Enables master mode
	SPCR |= (1<<MSTR);
     928:	6c 9a       	sbi	0x0d, 4	; 13

	//Sets leading and trailing edge config, Sets transmittion rate, MCP2515 wants under 10 MHz -> f_osc / 64 is fine
	SPCR |= (0<<CPOL) | (0<<CPHA) | (1<<SPR1);
     92a:	69 9a       	sbi	0x0d, 1	; 13
	
	//Enables SPI
	SPCR |= (1<<SPE);
     92c:	6e 9a       	sbi	0x0d, 6	; 13
     92e:	08 95       	ret

00000930 <SPI_send_byte>:
}

int SPI_send_byte(uint8_t message)
{
	//Puts message in SPI DATA REGISTER
	SPDR = message;
     930:	8f b9       	out	0x0f, r24	; 15
	
	//Waits for transmission to complete
	while (!(SPSR & (1<<SPIF)));
     932:	77 9b       	sbis	0x0e, 7	; 14
     934:	fe cf       	rjmp	.-4      	; 0x932 <SPI_send_byte+0x2>
	
	return 0;
}
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	08 95       	ret

0000093c <SPI_select_slave>:
	return SPDR;
}

void SPI_select_slave(int mode)
{
	if (mode == 1)
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	91 05       	cpc	r25, r1
     940:	11 f4       	brne	.+4      	; 0x946 <SPI_select_slave+0xa>
	{
		//Selects slave
		PORTB &= ~(1<<SPI_SS);
     942:	c4 98       	cbi	0x18, 4	; 24
     944:	08 95       	ret
	}
	else if (mode == 0)
     946:	89 2b       	or	r24, r25
     948:	09 f4       	brne	.+2      	; 0x94c <SPI_select_slave+0x10>
	{
		//Deselects slave
		PORTB |= (1<<SPI_SS);
     94a:	c4 9a       	sbi	0x18, 4	; 24
     94c:	08 95       	ret

0000094e <UART_send>:
}

void UART_send(unsigned char message)
{
	//Waiting for data buffer to be ready
	while ( !( UCSR0A & (1<<UDRE0)) ){;}
     94e:	5d 9b       	sbis	0x0b, 5	; 11
     950:	fe cf       	rjmp	.-4      	; 0x94e <UART_send>
	
	//Fills data buffer
	UDR0 = message;
     952:	8c b9       	out	0x0c, r24	; 12
     954:	08 95       	ret

00000956 <UART_init>:

static FILE usart_stdout = FDEV_SETUP_STREAM(UART_send, NULL, _FDEV_SETUP_WRITE);

void UART_init(int baudrate)
{
	uint16_t MYUBRR = (F_CPU/16/baudrate)-1;
     956:	9c 01       	movw	r18, r24
     958:	44 27       	eor	r20, r20
     95a:	37 fd       	sbrc	r19, 7
     95c:	40 95       	com	r20
     95e:	54 2f       	mov	r21, r20
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 eb       	ldi	r23, 0xB0	; 176
     964:	84 e0       	ldi	r24, 0x04	; 4
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__udivmodsi4>
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	31 09       	sbc	r19, r1
	
	//Setting baud rate
	UBRR0H = (unsigned char)(MYUBRR >>8);
     970:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char)(MYUBRR );
     972:	29 b9       	out	0x09, r18	; 9
	
	//Enabling interrupts
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     974:	88 e1       	ldi	r24, 0x18	; 24
     976:	8a b9       	out	0x0a, r24	; 10
	
	//Setting frame format
	#ifdef __AVR_ATmega162__
	UCSR0C = (1<<URSEL0) | (1<<UCSZ00) | (1<<UCSZ01);
     978:	86 e8       	ldi	r24, 0x86	; 134
     97a:	80 bd       	out	0x20, r24	; 32
	#elif __AVR_ATmega2560__
	UCSR0C = (3<<UCSZ00);
	#endif
	
	//Links prinf() to USART output
	stdout = &usart_stdout;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	90 93 67 03 	sts	0x0367, r25
     984:	80 93 66 03 	sts	0x0366, r24
     988:	08 95       	ret

0000098a <opt_exit_application>:
	oled_update_from_SRAM();
}

void opt_exit_application()
{
	NEXT_MENU = 2;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 0d 03 	sts	0x030D, r25
     992:	80 93 0c 03 	sts	0x030C, r24
     996:	08 95       	ret

00000998 <opt_end_game>:
	}
}

void opt_end_game()
{
	NEXT_MENU = 1;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	90 93 0d 03 	sts	0x030D, r25
     9a0:	80 93 0c 03 	sts	0x030C, r24
     9a4:	08 95       	ret

000009a6 <opt_continue_game>:
}

void opt_continue_game()
{
	NEXT_MENU = 0;
     9a6:	10 92 0d 03 	sts	0x030D, r1
     9aa:	10 92 0c 03 	sts	0x030C, r1
     9ae:	08 95       	ret

000009b0 <app_setup>:
}

void app_setup()
{
		
	opt_select_name(); 
     9b0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <opt_select_name>
	opt_select_tuning();
     9b4:	0e 94 2e 09 	call	0x125c	; 0x125c <opt_select_tuning>
	opt_select_music(); 
     9b8:	0e 94 01 0a 	call	0x1402	; 0x1402 <opt_select_music>
     9bc:	08 95       	ret

000009be <app_main_menu>:
}

int app_main_menu()
{
	NEXT_MENU = 0; 
     9be:	10 92 0d 03 	sts	0x030D, r1
     9c2:	10 92 0c 03 	sts	0x030C, r1
	oled_clear_SRAM();
     9c6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
	oled_update_from_SRAM();
     9ca:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	menu_print(&main_menu);
     9ce:	8e e0       	ldi	r24, 0x0E	; 14
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	0e 94 0f 12 	call	0x241e	; 0x241e <menu_print>
	
	
	while (!NEXT_MENU)
     9d6:	80 91 0c 03 	lds	r24, 0x030C
     9da:	90 91 0d 03 	lds	r25, 0x030D
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	71 f4       	brne	.+28     	; 0x9fe <app_main_menu+0x40>
	{
		adc_update_current_input();
     9e2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <adc_update_current_input>
		menu_control(&main_menu);
     9e6:	8e e0       	ldi	r24, 0x0E	; 14
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	0e 94 69 12 	call	0x24d2	; 0x24d2 <menu_control>
		oled_update_from_SRAM();
     9ee:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	oled_clear_SRAM();
	oled_update_from_SRAM();
	menu_print(&main_menu);
	
	
	while (!NEXT_MENU)
     9f2:	80 91 0c 03 	lds	r24, 0x030C
     9f6:	90 91 0d 03 	lds	r25, 0x030D
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	91 f3       	breq	.-28     	; 0x9e2 <app_main_menu+0x24>
		adc_update_current_input();
		menu_control(&main_menu);
		oled_update_from_SRAM();
	}
	
	if (NEXT_MENU == 2) return 1;
     9fe:	02 97       	sbiw	r24, 0x02	; 2
     a00:	39 f0       	breq	.+14     	; 0xa10 <app_main_menu+0x52>
	else
	{
		NEXT_MENU = 0;
     a02:	10 92 0d 03 	sts	0x030D, r1
     a06:	10 92 0c 03 	sts	0x030C, r1
		return 0;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	08 95       	ret
		adc_update_current_input();
		menu_control(&main_menu);
		oled_update_from_SRAM();
	}
	
	if (NEXT_MENU == 2) return 1;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
		NEXT_MENU = 0;
		return 0;
	}
	
	
}
     a14:	08 95       	ret

00000a16 <app_logo>:
	
}

void app_logo()
{
	oled_go_to(1,1);
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	oled_cstring_write("Made by:",2);
     a1e:	62 e0       	ldi	r22, 0x02	; 2
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	87 e6       	ldi	r24, 0x67	; 103
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
	
	//L
	oled_write_line(10,20,10,40);
     a2a:	28 e2       	ldi	r18, 0x28	; 40
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	4a e0       	ldi	r20, 0x0A	; 10
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	64 e1       	ldi	r22, 0x14	; 20
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(10,40,20,40);
     a3e:	28 e2       	ldi	r18, 0x28	; 40
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	44 e1       	ldi	r20, 0x14	; 20
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	68 e2       	ldi	r22, 0x28	; 40
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	8a e0       	ldi	r24, 0x0A	; 10
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	
	//A
	oled_write_line(20,40,25,20);
     a52:	24 e1       	ldi	r18, 0x14	; 20
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	49 e1       	ldi	r20, 0x19	; 25
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	68 e2       	ldi	r22, 0x28	; 40
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	84 e1       	ldi	r24, 0x14	; 20
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(23,30,27,30);
     a66:	2e e1       	ldi	r18, 0x1E	; 30
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	4b e1       	ldi	r20, 0x1B	; 27
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	6e e1       	ldi	r22, 0x1E	; 30
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	87 e1       	ldi	r24, 0x17	; 23
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(25,20,30,40);
     a7a:	28 e2       	ldi	r18, 0x28	; 40
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	4e e1       	ldi	r20, 0x1E	; 30
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	64 e1       	ldi	r22, 0x14	; 20
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	89 e1       	ldi	r24, 0x19	; 25
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	
	//R
	oled_write_line(30,40,30,20);
     a8e:	24 e1       	ldi	r18, 0x14	; 20
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	4e e1       	ldi	r20, 0x1E	; 30
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	68 e2       	ldi	r22, 0x28	; 40
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	8e e1       	ldi	r24, 0x1E	; 30
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(30,20,35,20);
     aa2:	24 e1       	ldi	r18, 0x14	; 20
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	43 e2       	ldi	r20, 0x23	; 35
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	64 e1       	ldi	r22, 0x14	; 20
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(35,20,35,25);
     ab6:	29 e1       	ldi	r18, 0x19	; 25
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	43 e2       	ldi	r20, 0x23	; 35
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	64 e1       	ldi	r22, 0x14	; 20
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	83 e2       	ldi	r24, 0x23	; 35
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(35,25,30,25);
     aca:	29 e1       	ldi	r18, 0x19	; 25
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4e e1       	ldi	r20, 0x1E	; 30
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	69 e1       	ldi	r22, 0x19	; 25
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	83 e2       	ldi	r24, 0x23	; 35
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(30,25,35,40);
     ade:	28 e2       	ldi	r18, 0x28	; 40
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	43 e2       	ldi	r20, 0x23	; 35
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	69 e1       	ldi	r22, 0x19	; 25
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	8e e1       	ldi	r24, 0x1E	; 30
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	
	//S
	oled_write_line(37,40,47,40);
     af2:	28 e2       	ldi	r18, 0x28	; 40
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	4f e2       	ldi	r20, 0x2F	; 47
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	68 e2       	ldi	r22, 0x28	; 40
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	85 e2       	ldi	r24, 0x25	; 37
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(47,40,47,30);
     b06:	2e e1       	ldi	r18, 0x1E	; 30
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	4f e2       	ldi	r20, 0x2F	; 47
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	68 e2       	ldi	r22, 0x28	; 40
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	8f e2       	ldi	r24, 0x2F	; 47
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(47,30,35,30);
     b1a:	2e e1       	ldi	r18, 0x1E	; 30
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	43 e2       	ldi	r20, 0x23	; 35
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	6e e1       	ldi	r22, 0x1E	; 30
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	8f e2       	ldi	r24, 0x2F	; 47
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(37,30,37,20);
     b2e:	24 e1       	ldi	r18, 0x14	; 20
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	45 e2       	ldi	r20, 0x25	; 37
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	6e e1       	ldi	r22, 0x1E	; 30
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	85 e2       	ldi	r24, 0x25	; 37
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(37,20,47,20);
     b42:	24 e1       	ldi	r18, 0x14	; 20
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	4f e2       	ldi	r20, 0x2F	; 47
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	64 e1       	ldi	r22, 0x14	; 20
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	85 e2       	ldi	r24, 0x25	; 37
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	
	oled_go_to(52,4);
     b56:	64 e0       	ldi	r22, 0x04	; 4
     b58:	84 e3       	ldi	r24, 0x34	; 52
     b5a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	oled_cstring_write("&",2);
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	80 e7       	ldi	r24, 0x70	; 112
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
	
	//P
	oled_write_line(65,40,65,20);
     b6a:	24 e1       	ldi	r18, 0x14	; 20
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	41 e4       	ldi	r20, 0x41	; 65
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	68 e2       	ldi	r22, 0x28	; 40
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	81 e4       	ldi	r24, 0x41	; 65
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(65,20,75,20);
     b7e:	24 e1       	ldi	r18, 0x14	; 20
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4b e4       	ldi	r20, 0x4B	; 75
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	64 e1       	ldi	r22, 0x14	; 20
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	81 e4       	ldi	r24, 0x41	; 65
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(75,20,75,30);
     b92:	2e e1       	ldi	r18, 0x1E	; 30
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4b e4       	ldi	r20, 0x4B	; 75
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	64 e1       	ldi	r22, 0x14	; 20
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	8b e4       	ldi	r24, 0x4B	; 75
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(75,30,65,30);
     ba6:	2e e1       	ldi	r18, 0x1E	; 30
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	41 e4       	ldi	r20, 0x41	; 65
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	6e e1       	ldi	r22, 0x1E	; 30
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	8b e4       	ldi	r24, 0x4B	; 75
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	
	//E
	oled_write_line(77,40,77,20);
     bba:	24 e1       	ldi	r18, 0x14	; 20
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	4d e4       	ldi	r20, 0x4D	; 77
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	68 e2       	ldi	r22, 0x28	; 40
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	8d e4       	ldi	r24, 0x4D	; 77
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(77,20,85,20);
     bce:	24 e1       	ldi	r18, 0x14	; 20
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	45 e5       	ldi	r20, 0x55	; 85
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	64 e1       	ldi	r22, 0x14	; 20
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	8d e4       	ldi	r24, 0x4D	; 77
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(77,30,85,30);
     be2:	2e e1       	ldi	r18, 0x1E	; 30
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	45 e5       	ldi	r20, 0x55	; 85
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	6e e1       	ldi	r22, 0x1E	; 30
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	8d e4       	ldi	r24, 0x4D	; 77
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(77,40,85,40);
     bf6:	28 e2       	ldi	r18, 0x28	; 40
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	45 e5       	ldi	r20, 0x55	; 85
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	68 e2       	ldi	r22, 0x28	; 40
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	8d e4       	ldi	r24, 0x4D	; 77
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	
	//R
	oled_write_line(87,40,87,20);
     c0a:	24 e1       	ldi	r18, 0x14	; 20
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	47 e5       	ldi	r20, 0x57	; 87
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	68 e2       	ldi	r22, 0x28	; 40
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	87 e5       	ldi	r24, 0x57	; 87
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(87,20,95,20);
     c1e:	24 e1       	ldi	r18, 0x14	; 20
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	4f e5       	ldi	r20, 0x5F	; 95
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	64 e1       	ldi	r22, 0x14	; 20
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	87 e5       	ldi	r24, 0x57	; 87
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(95,20,95,25);
     c32:	29 e1       	ldi	r18, 0x19	; 25
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	4f e5       	ldi	r20, 0x5F	; 95
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	64 e1       	ldi	r22, 0x14	; 20
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	8f e5       	ldi	r24, 0x5F	; 95
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(95,25,87,25);
     c46:	29 e1       	ldi	r18, 0x19	; 25
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	47 e5       	ldi	r20, 0x57	; 87
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	69 e1       	ldi	r22, 0x19	; 25
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	8f e5       	ldi	r24, 0x5F	; 95
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	oled_write_line(87,25,95,40);
     c5a:	28 e2       	ldi	r18, 0x28	; 40
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	4f e5       	ldi	r20, 0x5F	; 95
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	69 e1       	ldi	r22, 0x19	; 25
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	87 e5       	ldi	r24, 0x57	; 87
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
	
	oled_go_to(50,7);
     c6e:	67 e0       	ldi	r22, 0x07	; 7
     c70:	82 e3       	ldi	r24, 0x32	; 50
     c72:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	oled_cstring_write("TTK4155, H2017",1);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	82 e7       	ldi	r24, 0x72	; 114
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>

	oled_update_from_SRAM();
     c82:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	9e e0       	ldi	r25, 0x0E	; 14
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	90 40       	sbci	r25, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <app_logo+0x276>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <app_logo+0x280>
     c96:	00 00       	nop
     c98:	08 95       	ret

00000c9a <app_init>:
int EXIT_APPLICATION = 0;



void app_init()
{
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
	//Initialize drivers
	UART_init(9600);
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	95 e2       	ldi	r25, 0x25	; 37
     ca2:	0e 94 ab 04 	call	0x956	; 0x956 <UART_init>
	oled_init();
     ca6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <oled_init>
	adc_init();
     caa:	0e 94 cc 0b 	call	0x1798	; 0x1798 <adc_init>
	music_init();
     cae:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <music_init>
	CAN_init(CAN_MODE_NORMAL);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <CAN_init>
	
	//Current score
	CURRENT_SCORE = 255*100;
     cb8:	8c e9       	ldi	r24, 0x9C	; 156
     cba:	93 e6       	ldi	r25, 0x63	; 99
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	80 93 fe 02 	sts	0x02FE, r24
     cc4:	90 93 ff 02 	sts	0x02FF, r25
     cc8:	a0 93 00 03 	sts	0x0300, r26
     ccc:	b0 93 01 03 	sts	0x0301, r27
	
	//Shows logo
	music_start_up_sound();
     cd0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <music_start_up_sound>
	app_logo();
     cd4:	0e 94 0b 05 	call	0xa16	; 0xa16 <app_logo>
	
	//Creating menus
	menu_constr(&setup_menu, "Settings");
     cd8:	61 e8       	ldi	r22, 0x81	; 129
     cda:	71 e0       	ldi	r23, 0x01	; 1
     cdc:	88 e1       	ldi	r24, 0x18	; 24
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	0e 94 03 12 	call	0x2406	; 0x2406 <menu_constr>
	setup_menu.parent_menu = &main_menu;
     ce4:	8e e0       	ldi	r24, 0x0E	; 14
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	90 93 21 03 	sts	0x0321, r25
     cec:	80 93 20 03 	sts	0x0320, r24
	
	opt_constr(&enter_name,"Enter Name", opt_select_name);
     cf0:	41 e6       	ldi	r20, 0x61	; 97
     cf2:	58 e0       	ldi	r21, 0x08	; 8
     cf4:	6a e8       	ldi	r22, 0x8A	; 138
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	86 ec       	ldi	r24, 0xC6	; 198
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	setup_menu.root_option = &enter_name;
     d00:	86 ec       	ldi	r24, 0xC6	; 198
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	90 93 1b 03 	sts	0x031B, r25
     d08:	80 93 1a 03 	sts	0x031A, r24
	enter_name.parent = &setup_menu;
     d0c:	c8 e1       	ldi	r28, 0x18	; 24
     d0e:	d3 e0       	ldi	r29, 0x03	; 3
     d10:	d0 93 cd 02 	sts	0x02CD, r29
     d14:	c0 93 cc 02 	sts	0x02CC, r28
	
	opt_constr(&enter_music,"Music Selection", opt_select_music);
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	5a e0       	ldi	r21, 0x0A	; 10
     d1c:	65 e9       	ldi	r22, 0x95	; 149
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	88 ea       	ldi	r24, 0xA8	; 168
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	enter_name.next = &enter_music;
     d28:	88 ea       	ldi	r24, 0xA8	; 168
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	90 93 cb 02 	sts	0x02CB, r25
     d30:	80 93 ca 02 	sts	0x02CA, r24
	
	opt_constr(&enter_tuning_option,"Tuning", opt_select_tuning);
     d34:	4e e2       	ldi	r20, 0x2E	; 46
     d36:	59 e0       	ldi	r21, 0x09	; 9
     d38:	65 ea       	ldi	r22, 0xA5	; 165
     d3a:	71 e0       	ldi	r23, 0x01	; 1
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	93 e0       	ldi	r25, 0x03	; 3
     d40:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	enter_music.next = &enter_tuning_option;
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	90 93 ad 02 	sts	0x02AD, r25
     d4c:	80 93 ac 02 	sts	0x02AC, r24
	 
	
	opt_constr(&highscore, "Highscores", view_highscore);
     d50:	46 ed       	ldi	r20, 0xD6	; 214
     d52:	5a e0       	ldi	r21, 0x0A	; 10
     d54:	6c ea       	ldi	r22, 0xAC	; 172
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	84 e2       	ldi	r24, 0x24	; 36
     d5a:	93 e0       	ldi	r25, 0x03	; 3
     d5c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	enter_tuning_option.next = &highscore;
     d60:	84 e2       	ldi	r24, 0x24	; 36
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	90 93 07 03 	sts	0x0307, r25
     d68:	80 93 06 03 	sts	0x0306, r24
	
	menu_constr(&main_menu, "Main Menu");
     d6c:	67 eb       	ldi	r22, 0xB7	; 183
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	8e e0       	ldi	r24, 0x0E	; 14
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	0e 94 03 12 	call	0x2406	; 0x2406 <menu_constr>
	
	opt_constr(&start_game, "Start Game", opt_run_game); 
     d78:	4e e8       	ldi	r20, 0x8E	; 142
     d7a:	5b e0       	ldi	r21, 0x0B	; 11
     d7c:	61 ec       	ldi	r22, 0xC1	; 193
     d7e:	71 e0       	ldi	r23, 0x01	; 1
     d80:	8a ed       	ldi	r24, 0xDA	; 218
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	main_menu.root_option = &start_game;
     d88:	8a ed       	ldi	r24, 0xDA	; 218
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	90 93 11 03 	sts	0x0311, r25
     d90:	80 93 10 03 	sts	0x0310, r24
	
	opt_constr(&go_to_settings, "Settings", NULL);
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	61 e8       	ldi	r22, 0x81	; 129
     d9a:	71 e0       	ldi	r23, 0x01	; 1
     d9c:	82 eb       	ldi	r24, 0xB2	; 178
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	main_menu.root_option->next = &go_to_settings;
     da4:	e0 91 10 03 	lds	r30, 0x0310
     da8:	f0 91 11 03 	lds	r31, 0x0311
     dac:	82 eb       	ldi	r24, 0xB2	; 178
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	95 83       	std	Z+5, r25	; 0x05
     db2:	84 83       	std	Z+4, r24	; 0x04
	go_to_settings.submenu = &setup_menu;
     db4:	d0 93 bb 02 	sts	0x02BB, r29
     db8:	c0 93 ba 02 	sts	0x02BA, r28
	
	opt_constr(&exit_application, "Exit game", opt_exit_application);
     dbc:	45 ec       	ldi	r20, 0xC5	; 197
     dbe:	54 e0       	ldi	r21, 0x04	; 4
     dc0:	6c ec       	ldi	r22, 0xCC	; 204
     dc2:	71 e0       	ldi	r23, 0x01	; 1
     dc4:	80 ed       	ldi	r24, 0xD0	; 208
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	go_to_settings.next = &exit_application; 
     dcc:	80 ed       	ldi	r24, 0xD0	; 208
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	90 93 b7 02 	sts	0x02B7, r25
     dd4:	80 93 b6 02 	sts	0x02B6, r24
	
	menu_constr(&restart_menu, "ROUND OVER");
     dd8:	66 ed       	ldi	r22, 0xD6	; 214
     dda:	71 e0       	ldi	r23, 0x01	; 1
     ddc:	8e e2       	ldi	r24, 0x2E	; 46
     dde:	93 e0       	ldi	r25, 0x03	; 3
     de0:	0e 94 03 12 	call	0x2406	; 0x2406 <menu_constr>
	opt_constr(&restart_game,"Continue",opt_continue_game);
     de4:	43 ed       	ldi	r20, 0xD3	; 211
     de6:	54 e0       	ldi	r21, 0x04	; 4
     de8:	61 ee       	ldi	r22, 0xE1	; 225
     dea:	71 e0       	ldi	r23, 0x01	; 1
     dec:	8c eb       	ldi	r24, 0xBC	; 188
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	opt_constr(&end_game, "End game",opt_end_game);
     df4:	4c ec       	ldi	r20, 0xCC	; 204
     df6:	54 e0       	ldi	r21, 0x04	; 4
     df8:	6a ee       	ldi	r22, 0xEA	; 234
     dfa:	71 e0       	ldi	r23, 0x01	; 1
     dfc:	84 ee       	ldi	r24, 0xE4	; 228
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <opt_constr>
	restart_menu.root_option = &restart_game;
     e04:	8c eb       	ldi	r24, 0xBC	; 188
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	90 93 31 03 	sts	0x0331, r25
     e0c:	80 93 30 03 	sts	0x0330, r24
	restart_game.next = &end_game;
     e10:	84 ee       	ldi	r24, 0xE4	; 228
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	90 93 c1 02 	sts	0x02C1, r25
     e18:	80 93 c0 02 	sts	0x02C0, r24
	
	//Enable interrupts
	sei();
     e1c:	78 94       	sei
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <int_to_cstring>:
	oled_update_from_SRAM();
	_delay_ms(1000);
}

char* int_to_cstring(int t)
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	2c 97       	sbiw	r28, 0x0c	; 12
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
	
	char str[12];
	sprintf(str, "%d", t);
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	83 ef       	ldi	r24, 0xF3	; 243
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	8e 01       	movw	r16, r28
     e4a:	0f 5f       	subi	r16, 0xFF	; 255
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	1f 93       	push	r17
     e50:	0f 93       	push	r16
     e52:	0e 94 81 15 	call	0x2b02	; 0x2b02 <sprintf>
	return str;
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
}
     e62:	c8 01       	movw	r24, r16
     e64:	2c 96       	adiw	r28, 0x0c	; 12
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <app_goodbye_message>:
	NEXT_MENU = 2;
}

void app_goodbye_message()
{
	oled_clear_SRAM();
     e7a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
	oled_update_from_SRAM();
     e7e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	oled_go_to(20,3);
     e82:	63 e0       	ldi	r22, 0x03	; 3
     e84:	84 e1       	ldi	r24, 0x14	; 20
     e86:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	oled_cstring_write("THANKS FOR",2);
     e8a:	62 e0       	ldi	r22, 0x02	; 2
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	8b e1       	ldi	r24, 0x1B	; 27
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
	oled_go_to(25,4);
     e96:	64 e0       	ldi	r22, 0x04	; 4
     e98:	89 e1       	ldi	r24, 0x19	; 25
     e9a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	oled_cstring_write("PLAYING!",2);
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	86 e2       	ldi	r24, 0x26	; 38
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
	oled_update_from_SRAM();
     eaa:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
     eae:	2f ef       	ldi	r18, 0xFF	; 255
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	9a e4       	ldi	r25, 0x4A	; 74
     eb4:	21 50       	subi	r18, 0x01	; 1
     eb6:	80 40       	sbci	r24, 0x00	; 0
     eb8:	90 40       	sbci	r25, 0x00	; 0
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <app_goodbye_message+0x3a>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <app_goodbye_message+0x44>
     ebe:	00 00       	nop
	_delay_ms(5000);
	oled_clear_SRAM();
     ec0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
	oled_update_from_SRAM();
     ec4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
     ec8:	08 95       	ret

00000eca <update_highscore>:
{
	NEXT_MENU = 0;
}

void update_highscore()
{
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
	//If score is 0 you dont get on highscore
	if (CURRENT_SCORE == 0) return;
     ed2:	60 91 fe 02 	lds	r22, 0x02FE
     ed6:	70 91 ff 02 	lds	r23, 0x02FF
     eda:	80 91 00 03 	lds	r24, 0x0300
     ede:	90 91 01 03 	lds	r25, 0x0301
     ee2:	61 15       	cp	r22, r1
     ee4:	71 05       	cpc	r23, r1
     ee6:	81 05       	cpc	r24, r1
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <update_highscore+0x24>
     eec:	75 c0       	rjmp	.+234    	; 0xfd8 <update_highscore+0x10e>
	
	//Finds your spot on the list
	int i = 0;
	while (CURRENT_SCORE/SCORE_DIVIDER < HIGHSCORE_LIST[i] && i < 10)	i++;
     eee:	24 e6       	ldi	r18, 0x64	; 100
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__divmodsi4>
     efa:	62 2f       	mov	r22, r18
     efc:	73 2f       	mov	r23, r19
     efe:	02 2f       	mov	r16, r18
     f00:	13 2f       	mov	r17, r19
     f02:	24 2f       	mov	r18, r20
     f04:	35 2f       	mov	r19, r21
     f06:	80 91 36 01 	lds	r24, 0x0136
     f0a:	90 91 37 01 	lds	r25, 0x0137
     f0e:	aa 27       	eor	r26, r26
     f10:	97 fd       	sbrc	r25, 7
     f12:	a0 95       	com	r26
     f14:	ba 2f       	mov	r27, r26
     f16:	08 17       	cp	r16, r24
     f18:	19 07       	cpc	r17, r25
     f1a:	2a 07       	cpc	r18, r26
     f1c:	3b 07       	cpc	r19, r27
     f1e:	a4 f5       	brge	.+104    	; 0xf88 <update_highscore+0xbe>
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	4f 5f       	subi	r20, 0xFF	; 255
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	81 91       	ld	r24, Z+
     f2e:	91 91       	ld	r25, Z+
     f30:	aa 27       	eor	r26, r26
     f32:	97 fd       	sbrc	r25, 7
     f34:	a0 95       	com	r26
     f36:	ba 2f       	mov	r27, r26
     f38:	08 17       	cp	r16, r24
     f3a:	19 07       	cpc	r17, r25
     f3c:	2a 07       	cpc	r18, r26
     f3e:	3b 07       	cpc	r19, r27
     f40:	9c f3       	brlt	.-26     	; 0xf28 <update_highscore+0x5e>

	//Check if you are off the list
	if (i > 9) return;
     f42:	4a 30       	cpi	r20, 0x0A	; 10
     f44:	51 05       	cpc	r21, r1
     f46:	e4 f0       	brlt	.+56     	; 0xf80 <update_highscore+0xb6>
     f48:	47 c0       	rjmp	.+142    	; 0xfd8 <update_highscore+0x10e>
	
	//Put score on highscore list and move all other down
	for (int q = 9;q > i; q--)
	{
		HIGHSCORE_LIST[q] = HIGHSCORE_LIST[q-1];
     f4a:	3e 91       	ld	r19, -X
     f4c:	2e 91       	ld	r18, -X
     f4e:	13 96       	adiw	r26, 0x03	; 3
     f50:	3c 93       	st	X, r19
     f52:	2e 93       	st	-X, r18
     f54:	12 97       	sbiw	r26, 0x02	; 2
     f56:	ef 01       	movw	r28, r30
     f58:	27 97       	sbiw	r28, 0x07	; 7
		for (int t = 0; t < 4; t++) HIGHSCORE_LIST_NAMES[q][t] = HIGHSCORE_LIST_NAMES[q-1][t];
     f5a:	28 81       	ld	r18, Y
     f5c:	24 96       	adiw	r28, 0x04	; 4
     f5e:	28 83       	st	Y, r18
     f60:	23 97       	sbiw	r28, 0x03	; 3
     f62:	28 81       	ld	r18, Y
     f64:	24 96       	adiw	r28, 0x04	; 4
     f66:	28 83       	st	Y, r18
     f68:	23 97       	sbiw	r28, 0x03	; 3
     f6a:	28 81       	ld	r18, Y
     f6c:	24 96       	adiw	r28, 0x04	; 4
     f6e:	28 83       	st	Y, r18
     f70:	23 97       	sbiw	r28, 0x03	; 3
     f72:	28 81       	ld	r18, Y
     f74:	20 83       	st	Z, r18
     f76:	fe 01       	movw	r30, r28

	//Check if you are off the list
	if (i > 9) return;
	
	//Put score on highscore list and move all other down
	for (int q = 9;q > i; q--)
     f78:	a8 17       	cp	r26, r24
     f7a:	b9 07       	cpc	r27, r25
     f7c:	31 f7       	brne	.-52     	; 0xf4a <update_highscore+0x80>
     f7e:	10 c0       	rjmp	.+32     	; 0xfa0 <update_highscore+0xd6>
     f80:	49 30       	cpi	r20, 0x09	; 9
     f82:	51 05       	cpc	r21, r1
     f84:	1c f0       	brlt	.+6      	; 0xf8c <update_highscore+0xc2>
     f86:	0c c0       	rjmp	.+24     	; 0xfa0 <update_highscore+0xd6>
	//If score is 0 you dont get on highscore
	if (CURRENT_SCORE == 0) return;
	
	//Finds your spot on the list
	int i = 0;
	while (CURRENT_SCORE/SCORE_DIVIDER < HIGHSCORE_LIST[i] && i < 10)	i++;
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	a8 e4       	ldi	r26, 0x48	; 72
     f8e:	b1 e0       	ldi	r27, 0x01	; 1
     f90:	e5 e3       	ldi	r30, 0x35	; 53
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	ca 01       	movw	r24, r20
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	8a 5c       	subi	r24, 0xCA	; 202
     f9c:	9e 4f       	sbci	r25, 0xFE	; 254
     f9e:	d5 cf       	rjmp	.-86     	; 0xf4a <update_highscore+0x80>
	for (int q = 9;q > i; q--)
	{
		HIGHSCORE_LIST[q] = HIGHSCORE_LIST[q-1];
		for (int t = 0; t < 4; t++) HIGHSCORE_LIST_NAMES[q][t] = HIGHSCORE_LIST_NAMES[q-1][t];
	}
	HIGHSCORE_LIST[i] = CURRENT_SCORE/SCORE_DIVIDER;
     fa0:	fa 01       	movw	r30, r20
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	ea 5c       	subi	r30, 0xCA	; 202
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	86 2f       	mov	r24, r22
     fac:	97 2f       	mov	r25, r23
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24
	for (int t = 0; t < 4; t++) HIGHSCORE_LIST_NAMES[i][t] = PLAYER_NAME[t];
     fb2:	fa 01       	movw	r30, r20
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	e2 5f       	subi	r30, 0xF2	; 242
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	80 91 4a 01 	lds	r24, 0x014A
     fc4:	80 83       	st	Z, r24
     fc6:	80 91 4b 01 	lds	r24, 0x014B
     fca:	81 83       	std	Z+1, r24	; 0x01
     fcc:	80 91 4c 01 	lds	r24, 0x014C
     fd0:	82 83       	std	Z+2, r24	; 0x02
     fd2:	80 91 4d 01 	lds	r24, 0x014D
     fd6:	83 83       	std	Z+3, r24	; 0x03
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <app_round_review>:
	oled_clear_SRAM();
	oled_update_from_SRAM();
}

int app_round_review()
{
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
	//Clears and prints menu
	oled_clear_SRAM();
     fea:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
	menu_print(&restart_menu);
     fee:	8e e2       	ldi	r24, 0x2E	; 46
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 0f 12 	call	0x241e	; 0x241e <menu_print>
	oled_update_from_SRAM();
     ff6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	NEXT_MENU = 3;
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	90 93 0d 03 	sts	0x030D, r25
    1002:	80 93 0c 03 	sts	0x030C, r24
		adc_update_current_input();
		menu_control(&restart_menu);
		oled_write_line(1,64,127,64);
		oled_go_to(5,6);
		oled_cstring_write("YOUR SCORE: ",2);
		oled_cstring_write(int_to_cstring(CURRENT_SCORE/SCORE_DIVIDER),1);
    1006:	0f 2e       	mov	r0, r31
    1008:	f4 e6       	ldi	r31, 0x64	; 100
    100a:	cf 2e       	mov	r12, r31
    100c:	d1 2c       	mov	r13, r1
    100e:	e1 2c       	mov	r14, r1
    1010:	f1 2c       	mov	r15, r1
    1012:	f0 2d       	mov	r31, r0
	NEXT_MENU = 3;
	
	//Print score and await player choice
	while (NEXT_MENU == 3)
	{
		adc_update_current_input();
    1014:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <adc_update_current_input>
		menu_control(&restart_menu);
    1018:	8e e2       	ldi	r24, 0x2E	; 46
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <menu_control>
		oled_write_line(1,64,127,64);
    1020:	20 e4       	ldi	r18, 0x40	; 64
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	4f e7       	ldi	r20, 0x7F	; 127
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	60 e4       	ldi	r22, 0x40	; 64
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 97 10 	call	0x212e	; 0x212e <oled_write_line>
		oled_go_to(5,6);
    1034:	66 e0       	ldi	r22, 0x06	; 6
    1036:	85 e0       	ldi	r24, 0x05	; 5
    1038:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
		oled_cstring_write("YOUR SCORE: ",2);
    103c:	62 e0       	ldi	r22, 0x02	; 2
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	8f e2       	ldi	r24, 0x2F	; 47
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		oled_cstring_write(int_to_cstring(CURRENT_SCORE/SCORE_DIVIDER),1);
    1048:	60 91 fe 02 	lds	r22, 0x02FE
    104c:	70 91 ff 02 	lds	r23, 0x02FF
    1050:	80 91 00 03 	lds	r24, 0x0300
    1054:	90 91 01 03 	lds	r25, 0x0301
    1058:	a7 01       	movw	r20, r14
    105a:	96 01       	movw	r18, r12
    105c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__divmodsi4>
    1060:	c9 01       	movw	r24, r18
    1062:	0e 94 12 07 	call	0xe24	; 0xe24 <int_to_cstring>
    1066:	61 e0       	ldi	r22, 0x01	; 1
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		oled_update_from_SRAM();
    106e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	menu_print(&restart_menu);
	oled_update_from_SRAM();
	NEXT_MENU = 3;
	
	//Print score and await player choice
	while (NEXT_MENU == 3)
    1072:	80 91 0c 03 	lds	r24, 0x030C
    1076:	90 91 0d 03 	lds	r25, 0x030D
    107a:	03 97       	sbiw	r24, 0x03	; 3
    107c:	59 f2       	breq	.-106    	; 0x1014 <app_round_review+0x32>
		oled_update_from_SRAM();
		
	}
	
	//Update highscore
	update_highscore();
    107e:	0e 94 65 07 	call	0xeca	; 0xeca <update_highscore>
	CURRENT_SCORE = 0;
    1082:	10 92 fe 02 	sts	0x02FE, r1
    1086:	10 92 ff 02 	sts	0x02FF, r1
    108a:	10 92 00 03 	sts	0x0300, r1
    108e:	10 92 01 03 	sts	0x0301, r1
	
	//Executes player choice
	if (NEXT_MENU) return 1;
    1092:	80 91 0c 03 	lds	r24, 0x030C
    1096:	90 91 0d 03 	lds	r25, 0x030D
    109a:	89 2b       	or	r24, r25
    109c:	59 f4       	brne	.+22     	; 0x10b4 <app_round_review+0xd2>
	else
	{
		oled_clear_SRAM();
    109e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
		oled_update_from_SRAM();
    10a2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
		menu_print(&main_menu);
    10a6:	8e e0       	ldi	r24, 0x0E	; 14
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 0f 12 	call	0x241e	; 0x241e <menu_print>
		return 0;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <app_round_review+0xd6>
	//Update highscore
	update_highscore();
	CURRENT_SCORE = 0;
	
	//Executes player choice
	if (NEXT_MENU) return 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
		oled_clear_SRAM();
		oled_update_from_SRAM();
		menu_print(&main_menu);
		return 0;
	}
}
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	08 95       	ret

000010c2 <opt_select_name>:
#include <util\delay.h>



void opt_select_name()
{
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
	//Sets up screen for functions
	oled_clear_SRAM();
    10da:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
	oled_home();
    10de:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <oled_home>
	oled_cstring_write("Enter name: ",2);
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	8c e3       	ldi	r24, 0x3C	; 60
    10e8:	92 e0       	ldi	r25, 0x02	; 2
    10ea:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
	int i = 0;
    10ee:	c0 e0       	ldi	r28, 0x00	; 0
    10f0:	d0 e0       	ldi	r29, 0x00	; 0
		//Read ADC
		adc_update_current_input();
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
    10f2:	0f 2e       	mov	r0, r31
    10f4:	f1 e4       	ldi	r31, 0x41	; 65
    10f6:	8f 2e       	mov	r8, r31
    10f8:	f0 2d       	mov	r31, r0
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
    10fa:	0f 2e       	mov	r0, r31
    10fc:	fa e5       	ldi	r31, 0x5A	; 90
    10fe:	9f 2e       	mov	r9, r31
    1100:	f0 2d       	mov	r31, r0
    1102:	c1 2c       	mov	r12, r1
    1104:	d1 2c       	mov	r13, r1
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
    1106:	aa 24       	eor	r10, r10
    1108:	a3 94       	inc	r10
    110a:	b1 2c       	mov	r11, r1
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
    110c:	68 94       	set
    110e:	ee 24       	eor	r14, r14
    1110:	e1 f8       	bld	r14, 1
    1112:	f1 2c       	mov	r15, r1
	int ToSettings = 0; 
	
	while(ToSettings == 0)
	{
		//Read ADC
		adc_update_current_input();
    1114:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <adc_update_current_input>
		
		//Reads input
		if (joystick_down() && (int)PLAYER_NAME[i] < (int)'Z') PLAYER_NAME[i]++;
    1118:	0e 94 86 0c 	call	0x190c	; 0x190c <joystick_down>
    111c:	89 2b       	or	r24, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <opt_select_name+0x76>
    1120:	fe 01       	movw	r30, r28
    1122:	e6 5b       	subi	r30, 0xB6	; 182
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	80 81       	ld	r24, Z
    1128:	8a 35       	cpi	r24, 0x5A	; 90
    112a:	30 f4       	brcc	.+12     	; 0x1138 <opt_select_name+0x76>
    112c:	fe 01       	movw	r30, r28
    112e:	e6 5b       	subi	r30, 0xB6	; 182
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	80 83       	st	Z, r24
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <opt_select_name+0x86>
		else if (joystick_down()) PLAYER_NAME[i] = 'A';
    1138:	0e 94 86 0c 	call	0x190c	; 0x190c <joystick_down>
    113c:	89 2b       	or	r24, r25
    113e:	21 f0       	breq	.+8      	; 0x1148 <opt_select_name+0x86>
    1140:	fe 01       	movw	r30, r28
    1142:	e6 5b       	subi	r30, 0xB6	; 182
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	80 82       	st	Z, r8
		if (joystick_up() && (int)PLAYER_NAME[i] > (int)'A') PLAYER_NAME[i]--;
    1148:	0e 94 9b 0c 	call	0x1936	; 0x1936 <joystick_up>
    114c:	89 2b       	or	r24, r25
    114e:	61 f0       	breq	.+24     	; 0x1168 <opt_select_name+0xa6>
    1150:	fe 01       	movw	r30, r28
    1152:	e6 5b       	subi	r30, 0xB6	; 182
    1154:	fe 4f       	sbci	r31, 0xFE	; 254
    1156:	80 81       	ld	r24, Z
    1158:	82 34       	cpi	r24, 0x42	; 66
    115a:	30 f0       	brcs	.+12     	; 0x1168 <opt_select_name+0xa6>
    115c:	fe 01       	movw	r30, r28
    115e:	e6 5b       	subi	r30, 0xB6	; 182
    1160:	fe 4f       	sbci	r31, 0xFE	; 254
    1162:	81 50       	subi	r24, 0x01	; 1
    1164:	80 83       	st	Z, r24
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <opt_select_name+0xb6>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
    1168:	0e 94 9b 0c 	call	0x1936	; 0x1936 <joystick_up>
    116c:	89 2b       	or	r24, r25
    116e:	21 f0       	breq	.+8      	; 0x1178 <opt_select_name+0xb6>
    1170:	fe 01       	movw	r30, r28
    1172:	e6 5b       	subi	r30, 0xB6	; 182
    1174:	fe 4f       	sbci	r31, 0xFE	; 254
    1176:	90 82       	st	Z, r9
		if (joystick_right() && i < 3) i++;
    1178:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    117c:	89 2b       	or	r24, r25
    117e:	21 f0       	breq	.+8      	; 0x1188 <opt_select_name+0xc6>
    1180:	c3 30       	cpi	r28, 0x03	; 3
    1182:	d1 05       	cpc	r29, r1
    1184:	0c f4       	brge	.+2      	; 0x1188 <opt_select_name+0xc6>
    1186:	21 96       	adiw	r28, 0x01	; 1
		if (joystick_left() && i >= 0) i--;
    1188:	0e 94 af 0c 	call	0x195e	; 0x195e <joystick_left>
    118c:	89 2b       	or	r24, r25
    118e:	19 f0       	breq	.+6      	; 0x1196 <opt_select_name+0xd4>
    1190:	dd 23       	and	r29, r29
    1192:	0c f0       	brlt	.+2      	; 0x1196 <opt_select_name+0xd4>
    1194:	21 97       	sbiw	r28, 0x01	; 1
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
    1196:	0e 94 af 0c 	call	0x195e	; 0x195e <joystick_left>
    119a:	89 2b       	or	r24, r25
    119c:	21 f0       	breq	.+8      	; 0x11a6 <opt_select_name+0xe4>
    119e:	cf 3f       	cpi	r28, 0xFF	; 255
    11a0:	2f ef       	ldi	r18, 0xFF	; 255
    11a2:	d2 07       	cpc	r29, r18
    11a4:	61 f0       	breq	.+24     	; 0x11be <opt_select_name+0xfc>
    11a6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    11aa:	89 2b       	or	r24, r25
    11ac:	69 f0       	breq	.+26     	; 0x11c8 <opt_select_name+0x106>
    11ae:	c3 30       	cpi	r28, 0x03	; 3
    11b0:	d1 05       	cpc	r29, r1
    11b2:	69 f4       	brne	.+26     	; 0x11ce <opt_select_name+0x10c>
		{
			ToSettings = 1;
    11b4:	0a 2d       	mov	r16, r10
    11b6:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
			if(i == 3) i = 2; 
    11b8:	ce 2d       	mov	r28, r14
    11ba:	df 2d       	mov	r29, r15
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <opt_select_name+0x110>
		else if (joystick_up()) PLAYER_NAME[i] = 'Z';
		if (joystick_right() && i < 3) i++;
		if (joystick_left() && i >= 0) i--;
		if ((joystick_left() && i == -1) || (joystick_right() && i == 3)) 
		{
			ToSettings = 1;
    11be:	0a 2d       	mov	r16, r10
    11c0:	1b 2d       	mov	r17, r11
			if(i == -1) i = 0; 
    11c2:	cc 2d       	mov	r28, r12
    11c4:	dd 2d       	mov	r29, r13
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <opt_select_name+0x110>
    11c8:	0c 2d       	mov	r16, r12
    11ca:	1d 2d       	mov	r17, r13
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <opt_select_name+0x110>
    11ce:	0c 2d       	mov	r16, r12
    11d0:	1d 2d       	mov	r17, r13
			if(i == 3) i = 2; 
		}
		
		//Print current Letter
		oled_go_to(60,3);
    11d2:	63 e0       	ldi	r22, 0x03	; 3
    11d4:	8c e3       	ldi	r24, 0x3C	; 60
    11d6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
		oled_cstring_write(PLAYER_NAME,2);
    11da:	6e 2d       	mov	r22, r14
    11dc:	7f 2d       	mov	r23, r15
    11de:	8a e4       	ldi	r24, 0x4A	; 74
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		
		oled_update_from_SRAM();
    11e6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
		
		
		
		if(!joystick_down() && !joystick_left() && !joystick_right() && !joystick_up())
    11ea:	0e 94 86 0c 	call	0x190c	; 0x190c <joystick_down>
    11ee:	89 2b       	or	r24, r25
    11f0:	29 f5       	brne	.+74     	; 0x123c <opt_select_name+0x17a>
    11f2:	0e 94 af 0c 	call	0x195e	; 0x195e <joystick_left>
    11f6:	89 2b       	or	r24, r25
    11f8:	09 f5       	brne	.+66     	; 0x123c <opt_select_name+0x17a>
    11fa:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    11fe:	89 2b       	or	r24, r25
    1200:	e9 f4       	brne	.+58     	; 0x123c <opt_select_name+0x17a>
    1202:	0e 94 9b 0c 	call	0x1936	; 0x1936 <joystick_up>
    1206:	89 2b       	or	r24, r25
    1208:	c9 f4       	brne	.+50     	; 0x123c <opt_select_name+0x17a>
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	2f e7       	ldi	r18, 0x7F	; 127
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	20 40       	sbci	r18, 0x00	; 0
    1214:	80 40       	sbci	r24, 0x00	; 0
    1216:	e1 f7       	brne	.-8      	; 0x1210 <opt_select_name+0x14e>
    1218:	00 c0       	rjmp	.+0      	; 0x121a <opt_select_name+0x158>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <opt_select_name+0x15a>
		{
			
			_delay_ms(100);
			
			oled_go_to(60+(8*i),3);
    121c:	63 e0       	ldi	r22, 0x03	; 3
    121e:	8c 2f       	mov	r24, r28
    1220:	88 0f       	add	r24, r24
    1222:	88 0f       	add	r24, r24
    1224:	88 0f       	add	r24, r24
    1226:	84 5c       	subi	r24, 0xC4	; 196
    1228:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
			oled_cstring_write("_",2);
    122c:	6e 2d       	mov	r22, r14
    122e:	7f 2d       	mov	r23, r15
    1230:	89 e4       	ldi	r24, 0x49	; 73
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		
			oled_update_from_SRAM();
    1238:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	oled_home();
	oled_cstring_write("Enter name: ",2);
	int i = 0;
	int ToSettings = 0; 
	
	while(ToSettings == 0)
    123c:	01 2b       	or	r16, r17
    123e:	09 f4       	brne	.+2      	; 0x1242 <opt_select_name+0x180>
    1240:	69 cf       	rjmp	.-302    	; 0x1114 <opt_select_name+0x52>
			oled_update_from_SRAM();
		}
		
	}
		
	}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	08 95       	ret

0000125c <opt_select_tuning>:
		
void opt_select_tuning()
{
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
		
		oled_clear_SRAM();
    126c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
		oled_home(); 
    1270:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <oled_home>
		oled_cstring_write("Tuning:", 2);
    1274:	62 e0       	ldi	r22, 0x02	; 2
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	8b e4       	ldi	r24, 0x4B	; 75
    127a:	92 e0       	ldi	r25, 0x02	; 2
    127c:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		
		int change = 1; 
    1280:	01 e0       	ldi	r16, 0x01	; 1
    1282:	10 e0       	ldi	r17, 0x00	; 0
			
			//Read ADC
			adc_update_current_input();
			
			//Reads input and decides min and max levels
			if(joystick_left()) completed = 1;
    1284:	ee 24       	eor	r14, r14
    1286:	e3 94       	inc	r14
    1288:	f1 2c       	mov	r15, r1
    128a:	c1 2c       	mov	r12, r1
    128c:	d1 2c       	mov	r13, r1

		while(completed == 0) 
		{
			
			//Read ADC
			adc_update_current_input();
    128e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <adc_update_current_input>
			
			//Reads input and decides min and max levels
			if(joystick_left()) completed = 1;
    1292:	0e 94 af 0c 	call	0x195e	; 0x195e <joystick_left>
    1296:	3e 2d       	mov	r19, r14
    1298:	2f 2d       	mov	r18, r15
    129a:	89 2b       	or	r24, r25
    129c:	11 f4       	brne	.+4      	; 0x12a2 <opt_select_tuning+0x46>
    129e:	3c 2d       	mov	r19, r12
    12a0:	2d 2d       	mov	r18, r13
    12a2:	c3 2f       	mov	r28, r19
    12a4:	d2 2f       	mov	r29, r18
			if(joystick_right()) completed = 1;
    12a6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    12aa:	89 2b       	or	r24, r25
    12ac:	11 f0       	breq	.+4      	; 0x12b2 <opt_select_tuning+0x56>
    12ae:	ce 2d       	mov	r28, r14
    12b0:	df 2d       	mov	r29, r15
			if (joystick_up() && CURRENT_TUNING < MAX_DIFFICULTY)
    12b2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <joystick_up>
    12b6:	89 2b       	or	r24, r25
    12b8:	71 f0       	breq	.+28     	; 0x12d6 <opt_select_tuning+0x7a>
    12ba:	80 91 a4 02 	lds	r24, 0x02A4
    12be:	90 91 a5 02 	lds	r25, 0x02A5
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	91 05       	cpc	r25, r1
    12c6:	3c f4       	brge	.+14     	; 0x12d6 <opt_select_tuning+0x7a>
			{
				 CURRENT_TUNING++;
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	90 93 a5 02 	sts	0x02A5, r25
    12ce:	80 93 a4 02 	sts	0x02A4, r24
				 change = 1; 
    12d2:	0e 2d       	mov	r16, r14
    12d4:	1f 2d       	mov	r17, r15
			} 
			if (joystick_down() && CURRENT_TUNING > 0)
    12d6:	0e 94 86 0c 	call	0x190c	; 0x190c <joystick_down>
    12da:	89 2b       	or	r24, r25
    12dc:	21 f1       	breq	.+72     	; 0x1326 <opt_select_tuning+0xca>
    12de:	80 91 a4 02 	lds	r24, 0x02A4
    12e2:	90 91 a5 02 	lds	r25, 0x02A5
    12e6:	18 16       	cp	r1, r24
    12e8:	19 06       	cpc	r1, r25
    12ea:	ec f4       	brge	.+58     	; 0x1326 <opt_select_tuning+0xca>
			{
				 CURRENT_TUNING--;
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	90 93 a5 02 	sts	0x02A5, r25
    12f2:	80 93 a4 02 	sts	0x02A4, r24
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
    12f6:	63 e0       	ldi	r22, 0x03	; 3
    12f8:	8c e3       	ldi	r24, 0x3C	; 60
    12fa:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
			oled_cstring_write(TUNING_NAME[CURRENT_TUNING],2);
    12fe:	80 91 a4 02 	lds	r24, 0x02A4
    1302:	90 91 a5 02 	lds	r25, 0x02A5
    1306:	9c 01       	movw	r18, r24
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	62 e0       	ldi	r22, 0x02	; 2
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	82 5b       	subi	r24, 0xB2	; 178
    131a:	9e 4f       	sbci	r25, 0xFE	; 254
    131c:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_update_from_SRAM();
    1320:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
    1324:	19 c0       	rjmp	.+50     	; 0x1358 <opt_select_tuning+0xfc>
				 CURRENT_TUNING--;
				 change = 1;
			}

			//print current level
			oled_go_to(60,3);
    1326:	63 e0       	ldi	r22, 0x03	; 3
    1328:	8c e3       	ldi	r24, 0x3C	; 60
    132a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
			oled_cstring_write(TUNING_NAME[CURRENT_TUNING],2);
    132e:	80 91 a4 02 	lds	r24, 0x02A4
    1332:	90 91 a5 02 	lds	r25, 0x02A5
    1336:	9c 01       	movw	r18, r24
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	82 5b       	subi	r24, 0xB2	; 178
    134a:	9e 4f       	sbci	r25, 0xFE	; 254
    134c:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_update_from_SRAM();
    1350:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
			
			if (change!= 0)
    1354:	01 2b       	or	r16, r17
    1356:	49 f0       	breq	.+18     	; 0x136a <opt_select_tuning+0x10e>
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	2f ef       	ldi	r18, 0xFF	; 255
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	91 50       	subi	r25, 0x01	; 1
    1360:	20 40       	sbci	r18, 0x00	; 0
    1362:	80 40       	sbci	r24, 0x00	; 0
    1364:	e1 f7       	brne	.-8      	; 0x135e <opt_select_tuning+0x102>
    1366:	00 c0       	rjmp	.+0      	; 0x1368 <opt_select_tuning+0x10c>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <opt_select_tuning+0x10e>
		oled_cstring_write("Tuning:", 2);
		
		int change = 1; 
		int completed= 0; 

		while(completed == 0) 
    136a:	cd 2b       	or	r28, r29
    136c:	19 f4       	brne	.+6      	; 0x1374 <opt_select_tuning+0x118>
    136e:	0c 2d       	mov	r16, r12
    1370:	1d 2d       	mov	r17, r13
    1372:	8d cf       	rjmp	.-230    	; 0x128e <opt_select_tuning+0x32>
				_delay_ms(200);
			}
		}
		
		//Send parameters to Node 2
		switch (CURRENT_TUNING)
    1374:	80 91 a4 02 	lds	r24, 0x02A4
    1378:	90 91 a5 02 	lds	r25, 0x02A5
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	b1 f0       	breq	.+44     	; 0x13ae <opt_select_tuning+0x152>
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	91 05       	cpc	r25, r1
    1386:	21 f1       	breq	.+72     	; 0x13d0 <opt_select_tuning+0x174>
    1388:	89 2b       	or	r24, r25
    138a:	91 f5       	brne	.+100    	; 0x13f0 <opt_select_tuning+0x194>
		{
			case (0):
			{
				CAN_send_parameter(ID_REGULATOR_KP, 7.5);
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	60 ef       	ldi	r22, 0xF0	; 240
    1392:	70 e4       	ldi	r23, 0x40	; 64
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_send_parameter>
				CAN_send_parameter(ID_REGULATOR_KI, 0.4);
    139c:	4d ec       	ldi	r20, 0xCD	; 205
    139e:	5c ec       	ldi	r21, 0xCC	; 204
    13a0:	6c ec       	ldi	r22, 0xCC	; 204
    13a2:	7e e3       	ldi	r23, 0x3E	; 62
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_send_parameter>
				break;
    13ac:	21 c0       	rjmp	.+66     	; 0x13f0 <opt_select_tuning+0x194>
			}
			case (1):
			{
				CAN_send_parameter(ID_REGULATOR_KP, 3.5);
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	60 e6       	ldi	r22, 0x60	; 96
    13b4:	70 e4       	ldi	r23, 0x40	; 64
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_send_parameter>
				CAN_send_parameter(ID_REGULATOR_KI, 0.3);
    13be:	4a e9       	ldi	r20, 0x9A	; 154
    13c0:	59 e9       	ldi	r21, 0x99	; 153
    13c2:	69 e9       	ldi	r22, 0x99	; 153
    13c4:	7e e3       	ldi	r23, 0x3E	; 62
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_send_parameter>
				break;
    13ce:	10 c0       	rjmp	.+32     	; 0x13f0 <opt_select_tuning+0x194>
			}
			case (2):
			{
				CAN_send_parameter(ID_REGULATOR_KP, 9);
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	60 e1       	ldi	r22, 0x10	; 16
    13d6:	71 e4       	ldi	r23, 0x41	; 65
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_send_parameter>
				CAN_send_parameter(ID_REGULATOR_KI, 0.6);
    13e0:	4a e9       	ldi	r20, 0x9A	; 154
    13e2:	59 e9       	ldi	r21, 0x99	; 153
    13e4:	69 e1       	ldi	r22, 0x19	; 25
    13e6:	7f e3       	ldi	r23, 0x3F	; 63
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <CAN_send_parameter>
			}
			
		}
		
	
}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	08 95       	ret

00001402 <opt_select_music>:

void opt_select_music()
{
    1402:	af 92       	push	r10
    1404:	bf 92       	push	r11
    1406:	cf 92       	push	r12
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	6e 97       	sbiw	r28, 0x1e	; 30
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
	
	
	int change = 1;
	char *song_list[15] = {"Imperial March ", "Star wars theme", "No music       "}; 
    1426:	fe 01       	movw	r30, r28
    1428:	31 96       	adiw	r30, 0x01	; 1
    142a:	8e e1       	ldi	r24, 0x1E	; 30
    142c:	df 01       	movw	r26, r30
    142e:	1d 92       	st	X+, r1
    1430:	8a 95       	dec	r24
    1432:	e9 f7       	brne	.-6      	; 0x142e <opt_select_music+0x2c>
    1434:	83 e5       	ldi	r24, 0x53	; 83
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	83 e6       	ldi	r24, 0x63	; 99
    143e:	92 e0       	ldi	r25, 0x02	; 2
    1440:	9c 83       	std	Y+4, r25	; 0x04
    1442:	8b 83       	std	Y+3, r24	; 0x03
    1444:	83 e7       	ldi	r24, 0x73	; 115
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
	int ToSettings= 0;
	
	oled_clear_SRAM();
    144c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
	oled_home();
    1450:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <oled_home>
	oled_cstring_write("Music:", 2);
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	83 e8       	ldi	r24, 0x83	; 131
    145a:	92 e0       	ldi	r25, 0x02	; 2
    145c:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>

void opt_select_music()
{
	
	
	int change = 1;
    1460:	01 e0       	ldi	r16, 0x01	; 1
    1462:	10 e0       	ldi	r17, 0x00	; 0
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
    1464:	aa 24       	eor	r10, r10
    1466:	a3 94       	inc	r10
    1468:	b1 2c       	mov	r11, r1
    146a:	c1 2c       	mov	r12, r1
    146c:	d1 2c       	mov	r13, r1

	while(ToSettings == 0)
	{
		
		//Read ADC
		adc_update_current_input();
    146e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <adc_update_current_input>
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
    1472:	0e 94 af 0c 	call	0x195e	; 0x195e <joystick_left>
    1476:	89 2b       	or	r24, r25
    1478:	29 f0       	breq	.+10     	; 0x1484 <opt_select_music+0x82>
    147a:	01 15       	cp	r16, r1
    147c:	11 05       	cpc	r17, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <opt_select_music+0x80>
    1480:	77 c0       	rjmp	.+238    	; 0x1570 <opt_select_music+0x16e>
    1482:	7e c0       	rjmp	.+252    	; 0x1580 <opt_select_music+0x17e>
		if(joystick_right() && !change) ToSettings = 1;
    1484:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    1488:	89 2b       	or	r24, r25
    148a:	31 f0       	breq	.+12     	; 0x1498 <opt_select_music+0x96>
    148c:	01 15       	cp	r16, r1
    148e:	11 05       	cpc	r17, r1
    1490:	31 f4       	brne	.+12     	; 0x149e <opt_select_music+0x9c>
    1492:	ea 2c       	mov	r14, r10
    1494:	fb 2c       	mov	r15, r11
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <opt_select_music+0xa0>
    1498:	ec 2c       	mov	r14, r12
    149a:	fd 2c       	mov	r15, r13
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <opt_select_music+0xa0>
    149e:	ec 2c       	mov	r14, r12
    14a0:	fd 2c       	mov	r15, r13
		if (joystick_up() && CURRENT_SONG < 2)
    14a2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <joystick_up>
    14a6:	89 2b       	or	r24, r25
    14a8:	81 f0       	breq	.+32     	; 0x14ca <opt_select_music+0xc8>
    14aa:	80 91 a2 02 	lds	r24, 0x02A2
    14ae:	90 91 a3 02 	lds	r25, 0x02A3
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	91 05       	cpc	r25, r1
    14b6:	4c f4       	brge	.+18     	; 0x14ca <opt_select_music+0xc8>
		{
			CURRENT_SONG++;
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	90 93 a3 02 	sts	0x02A3, r25
    14be:	80 93 a2 02 	sts	0x02A2, r24
			music_next_song();
    14c2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <music_next_song>
			change = 1;
    14c6:	0a 2d       	mov	r16, r10
    14c8:	1b 2d       	mov	r17, r11
		}
		if (joystick_down() && CURRENT_SONG > 0)
    14ca:	0e 94 86 0c 	call	0x190c	; 0x190c <joystick_down>
    14ce:	89 2b       	or	r24, r25
    14d0:	39 f1       	breq	.+78     	; 0x1520 <opt_select_music+0x11e>
    14d2:	80 91 a2 02 	lds	r24, 0x02A2
    14d6:	90 91 a3 02 	lds	r25, 0x02A3
    14da:	18 16       	cp	r1, r24
    14dc:	19 06       	cpc	r1, r25
    14de:	04 f5       	brge	.+64     	; 0x1520 <opt_select_music+0x11e>
		{
			CURRENT_SONG--;
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	90 93 a3 02 	sts	0x02A3, r25
    14e6:	80 93 a2 02 	sts	0x02A2, r24
			music_prev_song();
    14ea:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <music_prev_song>
			change = 1;
		}
		
		oled_go_to(30,3);
    14ee:	63 e0       	ldi	r22, 0x03	; 3
    14f0:	8e e1       	ldi	r24, 0x1E	; 30
    14f2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
    14f6:	e0 91 a2 02 	lds	r30, 0x02A2
    14fa:	f0 91 a3 02 	lds	r31, 0x02A3
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	8c 0f       	add	r24, r28
    1508:	9d 1f       	adc	r25, r29
    150a:	e8 0f       	add	r30, r24
    150c:	f9 1f       	adc	r31, r25
    150e:	6a 2d       	mov	r22, r10
    1510:	7b 2d       	mov	r23, r11
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		oled_update_from_SRAM();
    151a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
    151e:	1a c0       	rjmp	.+52     	; 0x1554 <opt_select_music+0x152>
			CURRENT_SONG--;
			music_prev_song();
			change = 1;
		}
		
		oled_go_to(30,3);
    1520:	63 e0       	ldi	r22, 0x03	; 3
    1522:	8e e1       	ldi	r24, 0x1E	; 30
    1524:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
		oled_cstring_write(song_list[CURRENT_SONG],1);
    1528:	e0 91 a2 02 	lds	r30, 0x02A2
    152c:	f0 91 a3 02 	lds	r31, 0x02A3
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	a1 e0       	ldi	r26, 0x01	; 1
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ac 0f       	add	r26, r28
    153a:	bd 1f       	adc	r27, r29
    153c:	ea 0f       	add	r30, r26
    153e:	fb 1f       	adc	r31, r27
    1540:	6a 2d       	mov	r22, r10
    1542:	7b 2d       	mov	r23, r11
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		oled_update_from_SRAM();
    154c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
		
		if (change!= 0)
    1550:	01 2b       	or	r16, r17
    1552:	49 f0       	breq	.+18     	; 0x1566 <opt_select_music+0x164>
    1554:	bf ef       	ldi	r27, 0xFF	; 255
    1556:	2f ef       	ldi	r18, 0xFF	; 255
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	b1 50       	subi	r27, 0x01	; 1
    155c:	20 40       	sbci	r18, 0x00	; 0
    155e:	80 40       	sbci	r24, 0x00	; 0
    1560:	e1 f7       	brne	.-8      	; 0x155a <opt_select_music+0x158>
    1562:	00 c0       	rjmp	.+0      	; 0x1564 <opt_select_music+0x162>
    1564:	00 c0       	rjmp	.+0      	; 0x1566 <opt_select_music+0x164>
	
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("Music:", 2);

	while(ToSettings == 0)
    1566:	ef 28       	or	r14, r15
    1568:	81 f4       	brne	.+32     	; 0x158a <opt_select_music+0x188>
    156a:	0c 2d       	mov	r16, r12
    156c:	1d 2d       	mov	r17, r13
    156e:	7f cf       	rjmp	.-258    	; 0x146e <opt_select_music+0x6c>
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
		if(joystick_right() && !change) ToSettings = 1;
    1570:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    1574:	89 2b       	or	r24, r25
    1576:	09 f0       	breq	.+2      	; 0x157a <opt_select_music+0x178>
    1578:	8c cf       	rjmp	.-232    	; 0x1492 <opt_select_music+0x90>
		//Read ADC
		adc_update_current_input();
		
		
		//Reads input and decides min and max levels
		if(joystick_left() && !change) ToSettings = 1;
    157a:	ea 2c       	mov	r14, r10
    157c:	fb 2c       	mov	r15, r11
    157e:	91 cf       	rjmp	.-222    	; 0x14a2 <opt_select_music+0xa0>
		if(joystick_right() && !change) ToSettings = 1;
    1580:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    1584:	ec 2c       	mov	r14, r12
    1586:	fd 2c       	mov	r15, r13
    1588:	8c cf       	rjmp	.-232    	; 0x14a2 <opt_select_music+0xa0>
			
		}
		
		
	}
}
    158a:	6e 96       	adiw	r28, 0x1e	; 30
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	bf 90       	pop	r11
    15a8:	af 90       	pop	r10
    15aa:	08 95       	ret

000015ac <view_highscore>:

void view_highscore()
{
    15ac:	4f 92       	push	r4
    15ae:	5f 92       	push	r5
    15b0:	6f 92       	push	r6
    15b2:	7f 92       	push	r7
    15b4:	8f 92       	push	r8
    15b6:	9f 92       	push	r9
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
	oled_clear_SRAM();
    15cc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
	oled_home();
    15d0:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <oled_home>
	oled_cstring_write("High score:", 2);
    15d4:	62 e0       	ldi	r22, 0x02	; 2
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	8a e8       	ldi	r24, 0x8A	; 138
    15da:	92 e0       	ldi	r25, 0x02	; 2
    15dc:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
    15e0:	0f 2e       	mov	r0, r31
    15e2:	fe e0       	ldi	r31, 0x0E	; 14
    15e4:	8f 2e       	mov	r8, r31
    15e6:	f1 e0       	ldi	r31, 0x01	; 1
    15e8:	9f 2e       	mov	r9, r31
    15ea:	f0 2d       	mov	r31, r0
    15ec:	0f 2e       	mov	r0, r31
    15ee:	f6 e3       	ldi	r31, 0x36	; 54
    15f0:	6f 2e       	mov	r6, r31
    15f2:	f1 e0       	ldi	r31, 0x01	; 1
    15f4:	7f 2e       	mov	r7, r31
    15f6:	f0 2d       	mov	r31, r0
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
		if(joystick_left())
    15f8:	68 94       	set
    15fa:	44 24       	eor	r4, r4
    15fc:	41 f8       	bld	r4, 1
    15fe:	51 2c       	mov	r5, r1
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
	{
		adc_update_current_input();
    1600:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <adc_update_current_input>
		if(joystick_left())
    1604:	0e 94 af 0c 	call	0x195e	; 0x195e <joystick_left>
    1608:	5c 01       	movw	r10, r24
    160a:	74 01       	movw	r14, r8
    160c:	83 01       	movw	r16, r6
    160e:	c4 2d       	mov	r28, r4
    1610:	d5 2d       	mov	r29, r5
		}
		
		for (int i = 0; i < 5; i += 2)
		{
			//Prints i highscore
			oled_go_to(1,2+i);
    1612:	6c 2f       	mov	r22, r28
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
			oled_cstring_write(int_to_cstring(i+1),1);
    161a:	ce 01       	movw	r24, r28
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	0e 94 12 07 	call	0xe24	; 0xe24 <int_to_cstring>
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_cstring_write(". ",1);
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	86 e9       	ldi	r24, 0x96	; 150
    1630:	92 e0       	ldi	r25, 0x02	; 2
    1632:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i],1);
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	c7 01       	movw	r24, r14
    163c:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_cstring_write(": ",1);
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	89 e3       	ldi	r24, 0x39	; 57
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
    164c:	68 01       	movw	r12, r16
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i]),1);
    164e:	f8 01       	movw	r30, r16
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	0e 94 12 07 	call	0xe24	; 0xe24 <int_to_cstring>
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			
			//Adapts next line
			if (HIGHSCORE_LIST[i] > 99) oled_cstring_write(" ",1);
    1660:	f8 01       	movw	r30, r16
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	84 36       	cpi	r24, 0x64	; 100
    1668:	91 05       	cpc	r25, r1
    166a:	3c f0       	brlt	.+14     	; 0x167a <view_highscore+0xce>
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	81 e8       	ldi	r24, 0x81	; 129
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <view_highscore+0xec>
			else if (HIGHSCORE_LIST[i] > 9) oled_cstring_write("  ",1);
    167a:	0a 97       	sbiw	r24, 0x0a	; 10
    167c:	3c f0       	brlt	.+14     	; 0x168c <view_highscore+0xe0>
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	80 e8       	ldi	r24, 0x80	; 128
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <view_highscore+0xec>
			else oled_cstring_write("   ",1);
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	8f e7       	ldi	r24, 0x7F	; 127
    1692:	92 e0       	ldi	r25, 0x02	; 2
    1694:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			
			//Prints i+1 highscore
			oled_cstring_write(int_to_cstring(i+2),1);
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 12 07 	call	0xe24	; 0xe24 <int_to_cstring>
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_cstring_write(". ",1);
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	86 e9       	ldi	r24, 0x96	; 150
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	c7 01       	movw	r24, r14
    16b8:	04 96       	adiw	r24, 0x04	; 4
    16ba:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_cstring_write(": ",1);
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	89 e3       	ldi	r24, 0x39	; 57
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
    16ca:	f6 01       	movw	r30, r12
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	0e 94 12 07 	call	0xe24	; 0xe24 <int_to_cstring>
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
    16dc:	22 96       	adiw	r28, 0x02	; 2
    16de:	f8 e0       	ldi	r31, 0x08	; 8
    16e0:	ef 0e       	add	r14, r31
    16e2:	f1 1c       	adc	r15, r1
    16e4:	0c 5f       	subi	r16, 0xFC	; 252
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			 ToSettings = 1;
			 
		}
		
		for (int i = 0; i < 5; i += 2)
    16e8:	c8 30       	cpi	r28, 0x08	; 8
    16ea:	d1 05       	cpc	r29, r1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <view_highscore+0x144>
    16ee:	91 cf       	rjmp	.-222    	; 0x1612 <view_highscore+0x66>
			oled_cstring_write(HIGHSCORE_LIST_NAMES[i+1],1);
			oled_cstring_write(": ",1);
			oled_cstring_write(int_to_cstring(HIGHSCORE_LIST[i+1]),1);
			
		}
		oled_update_from_SRAM();
    16f0:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <oled_update_from_SRAM>
	oled_clear_SRAM();
	oled_home();
	oled_cstring_write("High score:", 2);
	int ToSettings= 0;
	
	while (ToSettings == 0)
    16f4:	ab 28       	or	r10, r11
    16f6:	09 f4       	brne	.+2      	; 0x16fa <view_highscore+0x14e>
    16f8:	83 cf       	rjmp	.-250    	; 0x1600 <view_highscore+0x54>
		oled_update_from_SRAM();
		
		
	}

}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	df 90       	pop	r13
    1708:	cf 90       	pop	r12
    170a:	bf 90       	pop	r11
    170c:	af 90       	pop	r10
    170e:	9f 90       	pop	r9
    1710:	8f 90       	pop	r8
    1712:	7f 90       	pop	r7
    1714:	6f 90       	pop	r6
    1716:	5f 90       	pop	r5
    1718:	4f 90       	pop	r4
    171a:	08 95       	ret

0000171c <opt_run_game>:

void opt_run_game()
{
	NEXT_MENU = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	90 93 0d 03 	sts	0x030D, r25
    1724:	80 93 0c 03 	sts	0x030C, r24
    1728:	08 95       	ret

0000172a <adc_read>:
{
	//unsigned char *p;	
	volatile char *p = (char *) 0x1400;
	
	//Selects correct address for chosen channel
	p[0] =  0x1403 + channel;
    172a:	8d 5f       	subi	r24, 0xFD	; 253
    172c:	80 93 00 14 	sts	0x1400, r24
	
	//Wait for result
	while(!finished){}
    1730:	80 91 a6 02 	lds	r24, 0x02A6
    1734:	90 91 a7 02 	lds	r25, 0x02A7
    1738:	89 2b       	or	r24, r25
    173a:	d1 f3       	breq	.-12     	; 0x1730 <adc_read+0x6>
	finished = 0;
    173c:	10 92 a7 02 	sts	0x02A7, r1
    1740:	10 92 a6 02 	sts	0x02A6, r1
	
	//Gather data
	return *p;
    1744:	80 91 00 14 	lds	r24, 0x1400
}
    1748:	08 95       	ret

0000174a <__vector_2>:
	
	
}

ISR(INT1_vect)
{
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
	finished = 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	90 93 a7 02 	sts	0x02A7, r25
    1760:	80 93 a6 02 	sts	0x02A6, r24
}
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 90       	pop	r0
    176e:	1f 90       	pop	r1
    1770:	18 95       	reti

00001772 <adc_joy_calibrate>:

void adc_joy_calibrate()
{
	//Reads midpoint & defines it as zero level
	x_mid_point = adc_read(1);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 95 0b 	call	0x172a	; 0x172a <adc_read>
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	90 93 fd 02 	sts	0x02FD, r25
    1780:	80 93 fc 02 	sts	0x02FC, r24
	y_mid_point = adc_read(2);
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 95 0b 	call	0x172a	; 0x172a <adc_read>
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	90 93 23 03 	sts	0x0323, r25
    1792:	80 93 22 03 	sts	0x0322, r24
    1796:	08 95       	ret

00001798 <adc_init>:
}

void adc_init()
{
	
	sei();
    1798:	78 94       	sei
	//Sets MCU control register, for falling edge
	MCUCR |= (1<<ISC11);
    179a:	85 b7       	in	r24, 0x35	; 53
    179c:	88 60       	ori	r24, 0x08	; 8
    179e:	85 bf       	out	0x35, r24	; 53
	
	//Enables interrupt on pin
	GICR |= (1 << INT1);
    17a0:	8b b7       	in	r24, 0x3b	; 59
    17a2:	80 68       	ori	r24, 0x80	; 128
    17a4:	8b bf       	out	0x3b, r24	; 59
	
	//Enable pin inputs
	DDRB &= ~((1 << PB1)|(1 << PB2)|(1 << PB3));
    17a6:	87 b3       	in	r24, 0x17	; 23
    17a8:	81 7f       	andi	r24, 0xF1	; 241
    17aa:	87 bb       	out	0x17, r24	; 23
	
	//Calibrates joystick
	adc_joy_calibrate();
    17ac:	0e 94 b9 0b 	call	0x1772	; 0x1772 <adc_joy_calibrate>
	cli();
    17b0:	f8 94       	cli
    17b2:	08 95       	ret

000017b4 <adc_joy_position>:
	x_mid_point = adc_read(1);
	y_mid_point = adc_read(2);
}

struct j_pos adc_joy_position()
{
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <adc_joy_position+0x12>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <adc_joy_position+0x14>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <adc_joy_position+0x16>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
	uint8_t joystick_y_analog = 0;
	int joystick_x_perc = 0;
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 95 0b 	call	0x172a	; 0x172a <adc_read>
    17d6:	08 2f       	mov	r16, r24
	joystick_y_analog = adc_read(2);
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 95 0b 	call	0x172a	; 0x172a <adc_read>
    17e0:	c8 2e       	mov	r12, r24
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    17e2:	20 91 fc 02 	lds	r18, 0x02FC
    17e6:	30 91 fd 02 	lds	r19, 0x02FD
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    17ea:	e0 90 22 03 	lds	r14, 0x0322
    17ee:	f0 90 23 03 	lds	r15, 0x0323
	
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    17f2:	16 b3       	in	r17, 0x16	; 22
	int joystick_y_perc = 0;
	
	//Reads current position and 
	joystick_x_analog = adc_read(1);
	joystick_y_analog = adc_read(2);
	joystick_x_perc = 100*(joystick_x_analog - x_mid_point)/((float)127);
    17f4:	80 2f       	mov	r24, r16
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	82 1b       	sub	r24, r18
    17fa:	93 0b       	sbc	r25, r19
    17fc:	0f 2e       	mov	r0, r31
    17fe:	f4 e6       	ldi	r31, 0x64	; 100
    1800:	df 2e       	mov	r13, r31
    1802:	f0 2d       	mov	r31, r0
    1804:	d8 9e       	mul	r13, r24
    1806:	b0 01       	movw	r22, r0
    1808:	d9 9e       	mul	r13, r25
    180a:	70 0d       	add	r23, r0
    180c:	11 24       	eor	r1, r1
    180e:	88 27       	eor	r24, r24
    1810:	77 fd       	sbrc	r23, 7
    1812:	80 95       	com	r24
    1814:	98 2f       	mov	r25, r24
    1816:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4e ef       	ldi	r20, 0xFE	; 254
    1820:	52 e4       	ldi	r21, 0x42	; 66
    1822:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divsf3>
    1826:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
    182a:	06 2f       	mov	r16, r22
    182c:	86 2f       	mov	r24, r22
    182e:	97 2f       	mov	r25, r23
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
	joystick_y_perc = 100*(joystick_y_analog - y_mid_point)/((float)127);
    1834:	8c 2d       	mov	r24, r12
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	8e 19       	sub	r24, r14
    183a:	9f 09       	sbc	r25, r15
    183c:	d8 9e       	mul	r13, r24
    183e:	b0 01       	movw	r22, r0
    1840:	d9 9e       	mul	r13, r25
    1842:	70 0d       	add	r23, r0
    1844:	11 24       	eor	r1, r1
    1846:	88 27       	eor	r24, r24
    1848:	77 fd       	sbrc	r23, 7
    184a:	80 95       	com	r24
    184c:	98 2f       	mov	r25, r24
    184e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4e ef       	ldi	r20, 0xFE	; 254
    1858:	52 e4       	ldi	r21, 0x42	; 66
    185a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divsf3>
    185e:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
    1862:	86 2f       	mov	r24, r22
    1864:	97 2f       	mov	r25, r23
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
	
	
	//Assignes value
	pos.x_p = joystick_x_perc;
	pos.y_p = joystick_y_perc;
	pos.button = !(PINB & (1 << PB3));
    186a:	16 95       	lsr	r17
    186c:	16 95       	lsr	r17
    186e:	16 95       	lsr	r17
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	18 27       	eor	r17, r24
    1874:	11 70       	andi	r17, 0x01	; 1
	
	return pos;
    1876:	1d 83       	std	Y+5, r17	; 0x05
    1878:	1e 82       	std	Y+6, r1	; 0x06
    187a:	20 2f       	mov	r18, r16
    187c:	3a 81       	ldd	r19, Y+2	; 0x02
    187e:	46 2f       	mov	r20, r22
    1880:	5c 81       	ldd	r21, Y+4	; 0x04
    1882:	61 2f       	mov	r22, r17
    1884:	70 e0       	ldi	r23, 0x00	; 0
}
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	26 96       	adiw	r28, 0x06	; 6
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	08 95       	ret

000018a8 <adc_slider_position_left>:

int adc_slider_position_left()
{
	return 100*adc_read(3)/((float)255);
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 95 0b 	call	0x172a	; 0x172a <adc_read>
    18b0:	24 e6       	ldi	r18, 0x64	; 100
    18b2:	82 9f       	mul	r24, r18
    18b4:	c0 01       	movw	r24, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	bc 01       	movw	r22, r24
    18ba:	88 27       	eor	r24, r24
    18bc:	77 fd       	sbrc	r23, 7
    18be:	80 95       	com	r24
    18c0:	98 2f       	mov	r25, r24
    18c2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4f e7       	ldi	r20, 0x7F	; 127
    18cc:	53 e4       	ldi	r21, 0x43	; 67
    18ce:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divsf3>
    18d2:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
}
    18d6:	cb 01       	movw	r24, r22
    18d8:	08 95       	ret

000018da <adc_slider_position_right>:

int adc_slider_position_right()
{
	
	return 100*adc_read(4)/((float)255);
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 95 0b 	call	0x172a	; 0x172a <adc_read>
    18e2:	24 e6       	ldi	r18, 0x64	; 100
    18e4:	82 9f       	mul	r24, r18
    18e6:	c0 01       	movw	r24, r0
    18e8:	11 24       	eor	r1, r1
    18ea:	bc 01       	movw	r22, r24
    18ec:	88 27       	eor	r24, r24
    18ee:	77 fd       	sbrc	r23, 7
    18f0:	80 95       	com	r24
    18f2:	98 2f       	mov	r25, r24
    18f4:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	53 e4       	ldi	r21, 0x43	; 67
    1900:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divsf3>
    1904:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
}
    1908:	cb 01       	movw	r24, r22
    190a:	08 95       	ret

0000190c <joystick_down>:
	return difference;
}

int joystick_down()
{
	return (PREV_INPUT.joystick.y_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p < -JOYSTICK_MENU_DEADZONE);
    190c:	80 91 3a 03 	lds	r24, 0x033A
    1910:	90 91 3b 03 	lds	r25, 0x033B
    1914:	85 3c       	cpi	r24, 0xC5	; 197
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	5c f0       	brlt	.+22     	; 0x1930 <joystick_down+0x24>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	20 91 f0 02 	lds	r18, 0x02F0
    1922:	30 91 f1 02 	lds	r19, 0x02F1
    1926:	24 3c       	cpi	r18, 0xC4	; 196
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	24 f0       	brlt	.+8      	; 0x1934 <joystick_down+0x28>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	08 95       	ret
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
}
    1934:	08 95       	ret

00001936 <joystick_up>:

int joystick_up()
{
	return (PREV_INPUT.joystick.y_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.y_p > JOYSTICK_MENU_DEADZONE);
    1936:	80 91 3a 03 	lds	r24, 0x033A
    193a:	90 91 3b 03 	lds	r25, 0x033B
    193e:	cc 97       	sbiw	r24, 0x3c	; 60
    1940:	5c f4       	brge	.+22     	; 0x1958 <joystick_up+0x22>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	20 91 f0 02 	lds	r18, 0x02F0
    194a:	30 91 f1 02 	lds	r19, 0x02F1
    194e:	2d 33       	cpi	r18, 0x3D	; 61
    1950:	31 05       	cpc	r19, r1
    1952:	24 f4       	brge	.+8      	; 0x195c <joystick_up+0x26>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	08 95       	ret
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
}
    195c:	08 95       	ret

0000195e <joystick_left>:

int joystick_left()
{
	return (PREV_INPUT.joystick.x_p > -JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p < -JOYSTICK_MENU_DEADZONE);
    195e:	80 91 38 03 	lds	r24, 0x0338
    1962:	90 91 39 03 	lds	r25, 0x0339
    1966:	85 3c       	cpi	r24, 0xC5	; 197
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	5c f0       	brlt	.+22     	; 0x1982 <joystick_left+0x24>
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	20 91 ee 02 	lds	r18, 0x02EE
    1974:	30 91 ef 02 	lds	r19, 0x02EF
    1978:	24 3c       	cpi	r18, 0xC4	; 196
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	24 f0       	brlt	.+8      	; 0x1986 <joystick_left+0x28>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	08 95       	ret
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
}
    1986:	08 95       	ret

00001988 <joystick_right>:

int joystick_right()
{
	return (PREV_INPUT.joystick.x_p < JOYSTICK_MENU_DEADZONE && CURRENT_INPUT.joystick.x_p > JOYSTICK_MENU_DEADZONE);
    1988:	80 91 38 03 	lds	r24, 0x0338
    198c:	90 91 39 03 	lds	r25, 0x0339
    1990:	cc 97       	sbiw	r24, 0x3c	; 60
    1992:	5c f4       	brge	.+22     	; 0x19aa <joystick_right+0x22>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	20 91 ee 02 	lds	r18, 0x02EE
    199c:	30 91 ef 02 	lds	r19, 0x02EF
    19a0:	2d 33       	cpi	r18, 0x3D	; 61
    19a2:	31 05       	cpc	r19, r1
    19a4:	24 f4       	brge	.+8      	; 0x19ae <joystick_right+0x26>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	08 95       	ret
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
}
    19ae:	08 95       	ret

000019b0 <compare_new_input>:
	CAN_send_frame(&message);
	LAST_TRANSMITTED_INPUT = CURRENT_INPUT;
}

int compare_new_input(struct input new_input)
{
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	2e 97       	sbiw	r28, 0x0e	; 14
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
	int difference = 0;
	
	//Compare binary values, if they are pressed we have to send a message. This is due to how our controls are set up
	if (PREV_INPUT.button_l != LAST_TRANSMITTED_INPUT.button_l) return 1;
    19d0:	20 91 42 03 	lds	r18, 0x0342
    19d4:	30 91 43 03 	lds	r19, 0x0343
    19d8:	80 91 50 03 	lds	r24, 0x0350
    19dc:	90 91 51 03 	lds	r25, 0x0351
    19e0:	28 17       	cp	r18, r24
    19e2:	39 07       	cpc	r19, r25
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <compare_new_input+0x38>
    19e6:	70 c0       	rjmp	.+224    	; 0x1ac8 <compare_new_input+0x118>
	if (PREV_INPUT.button_r != LAST_TRANSMITTED_INPUT.button_r) return 10;
    19e8:	20 91 44 03 	lds	r18, 0x0344
    19ec:	30 91 45 03 	lds	r19, 0x0345
    19f0:	80 91 52 03 	lds	r24, 0x0352
    19f4:	90 91 53 03 	lds	r25, 0x0353
    19f8:	28 17       	cp	r18, r24
    19fa:	39 07       	cpc	r19, r25
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <compare_new_input+0x50>
    19fe:	67 c0       	rjmp	.+206    	; 0x1ace <compare_new_input+0x11e>
	if (PREV_INPUT.joystick.button) return 100;
    1a00:	80 91 3c 03 	lds	r24, 0x033C
    1a04:	90 91 3d 03 	lds	r25, 0x033D
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <compare_new_input+0x5e>
    1a0c:	63 c0       	rjmp	.+198    	; 0x1ad4 <compare_new_input+0x124>
	
	//Compare sliders
	if (PREV_INPUT.slider_l > LAST_TRANSMITTED_INPUT.slider_l + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_l < LAST_TRANSMITTED_INPUT.slider_l - SLIDER_TRANSMIT_DEADZONE) return 200;
    1a0e:	20 91 3e 03 	lds	r18, 0x033E
    1a12:	30 91 3f 03 	lds	r19, 0x033F
    1a16:	40 91 4c 03 	lds	r20, 0x034C
    1a1a:	50 91 4d 03 	lds	r21, 0x034D
    1a1e:	ba 01       	movw	r22, r20
    1a20:	6c 5f       	subi	r22, 0xFC	; 252
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	62 17       	cp	r22, r18
    1a26:	73 07       	cpc	r23, r19
    1a28:	0c f4       	brge	.+2      	; 0x1a2c <compare_new_input+0x7c>
    1a2a:	57 c0       	rjmp	.+174    	; 0x1ada <compare_new_input+0x12a>
    1a2c:	44 50       	subi	r20, 0x04	; 4
    1a2e:	51 09       	sbc	r21, r1
    1a30:	24 17       	cp	r18, r20
    1a32:	35 07       	cpc	r19, r21
    1a34:	0c f4       	brge	.+2      	; 0x1a38 <compare_new_input+0x88>
    1a36:	54 c0       	rjmp	.+168    	; 0x1ae0 <compare_new_input+0x130>
	if (PREV_INPUT.slider_r > LAST_TRANSMITTED_INPUT.slider_r + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_r < LAST_TRANSMITTED_INPUT.slider_r - SLIDER_TRANSMIT_DEADZONE) return 250;
    1a38:	20 91 40 03 	lds	r18, 0x0340
    1a3c:	30 91 41 03 	lds	r19, 0x0341
    1a40:	40 91 4e 03 	lds	r20, 0x034E
    1a44:	50 91 4f 03 	lds	r21, 0x034F
    1a48:	ba 01       	movw	r22, r20
    1a4a:	6c 5f       	subi	r22, 0xFC	; 252
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	62 17       	cp	r22, r18
    1a50:	73 07       	cpc	r23, r19
    1a52:	0c f4       	brge	.+2      	; 0x1a56 <compare_new_input+0xa6>
    1a54:	48 c0       	rjmp	.+144    	; 0x1ae6 <compare_new_input+0x136>
    1a56:	44 50       	subi	r20, 0x04	; 4
    1a58:	51 09       	sbc	r21, r1
    1a5a:	24 17       	cp	r18, r20
    1a5c:	35 07       	cpc	r19, r21
    1a5e:	0c f4       	brge	.+2      	; 0x1a62 <compare_new_input+0xb2>
    1a60:	45 c0       	rjmp	.+138    	; 0x1aec <compare_new_input+0x13c>
	
	//Compare joystick
	if (PREV_INPUT.joystick.x_p < LAST_TRANSMITTED_INPUT.joystick.x_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.x_p > LAST_TRANSMITTED_INPUT.joystick.x_p + JOYSTICK_TRANSMIT_DEADZONE) return 280;
    1a62:	e0 91 38 03 	lds	r30, 0x0338
    1a66:	f0 91 39 03 	lds	r31, 0x0339
    1a6a:	60 91 46 03 	lds	r22, 0x0346
    1a6e:	70 91 47 03 	lds	r23, 0x0347
    1a72:	9b 01       	movw	r18, r22
    1a74:	26 50       	subi	r18, 0x06	; 6
    1a76:	31 09       	sbc	r19, r1
    1a78:	e2 17       	cp	r30, r18
    1a7a:	f3 07       	cpc	r31, r19
    1a7c:	d4 f1       	brlt	.+116    	; 0x1af2 <compare_new_input+0x142>
    1a7e:	24 5f       	subi	r18, 0xF4	; 244
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	2e 17       	cp	r18, r30
    1a84:	3f 07       	cpc	r19, r31
    1a86:	c4 f1       	brlt	.+112    	; 0x1af8 <compare_new_input+0x148>
	if (PREV_INPUT.joystick.y_p < LAST_TRANSMITTED_INPUT.joystick.y_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.y_p > LAST_TRANSMITTED_INPUT.joystick.y_p + JOYSTICK_TRANSMIT_DEADZONE) return 290;
    1a88:	40 91 3a 03 	lds	r20, 0x033A
    1a8c:	50 91 3b 03 	lds	r21, 0x033B
    1a90:	20 91 48 03 	lds	r18, 0x0348
    1a94:	30 91 49 03 	lds	r19, 0x0349
    1a98:	d9 01       	movw	r26, r18
    1a9a:	16 97       	sbiw	r26, 0x06	; 6
    1a9c:	4a 17       	cp	r20, r26
    1a9e:	5b 07       	cpc	r21, r27
    1aa0:	74 f1       	brlt	.+92     	; 0x1afe <compare_new_input+0x14e>
    1aa2:	1c 96       	adiw	r26, 0x0c	; 12
    1aa4:	a4 17       	cp	r26, r20
    1aa6:	b5 07       	cpc	r27, r21
    1aa8:	6c f1       	brlt	.+90     	; 0x1b04 <compare_new_input+0x154>
	
	//Snap back to zero
	if (PREV_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.x_p != 0) return 300;
    1aaa:	37 96       	adiw	r30, 0x07	; 7
    1aac:	3f 97       	sbiw	r30, 0x0f	; 15
    1aae:	10 f4       	brcc	.+4      	; 0x1ab4 <compare_new_input+0x104>
    1ab0:	67 2b       	or	r22, r23
    1ab2:	59 f5       	brne	.+86     	; 0x1b0a <compare_new_input+0x15a>
	if (PREV_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.y_p != 0) return 301;
    1ab4:	49 5f       	subi	r20, 0xF9	; 249
    1ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab8:	4f 30       	cpi	r20, 0x0F	; 15
    1aba:	51 05       	cpc	r21, r1
    1abc:	58 f5       	brcc	.+86     	; 0x1b14 <compare_new_input+0x164>
    1abe:	21 15       	cp	r18, r1
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	31 f5       	brne	.+76     	; 0x1b10 <compare_new_input+0x160>
	
	return difference;
    1ac4:	c9 01       	movw	r24, r18
    1ac6:	26 c0       	rjmp	.+76     	; 0x1b14 <compare_new_input+0x164>
int compare_new_input(struct input new_input)
{
	int difference = 0;
	
	//Compare binary values, if they are pressed we have to send a message. This is due to how our controls are set up
	if (PREV_INPUT.button_l != LAST_TRANSMITTED_INPUT.button_l) return 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	23 c0       	rjmp	.+70     	; 0x1b14 <compare_new_input+0x164>
	if (PREV_INPUT.button_r != LAST_TRANSMITTED_INPUT.button_r) return 10;
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	20 c0       	rjmp	.+64     	; 0x1b14 <compare_new_input+0x164>
	if (PREV_INPUT.joystick.button) return 100;
    1ad4:	84 e6       	ldi	r24, 0x64	; 100
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	1d c0       	rjmp	.+58     	; 0x1b14 <compare_new_input+0x164>
	
	//Compare sliders
	if (PREV_INPUT.slider_l > LAST_TRANSMITTED_INPUT.slider_l + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_l < LAST_TRANSMITTED_INPUT.slider_l - SLIDER_TRANSMIT_DEADZONE) return 200;
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	1a c0       	rjmp	.+52     	; 0x1b14 <compare_new_input+0x164>
    1ae0:	88 ec       	ldi	r24, 0xC8	; 200
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	17 c0       	rjmp	.+46     	; 0x1b14 <compare_new_input+0x164>
	if (PREV_INPUT.slider_r > LAST_TRANSMITTED_INPUT.slider_r + SLIDER_TRANSMIT_DEADZONE || PREV_INPUT.slider_r < LAST_TRANSMITTED_INPUT.slider_r - SLIDER_TRANSMIT_DEADZONE) return 250;
    1ae6:	8a ef       	ldi	r24, 0xFA	; 250
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <compare_new_input+0x164>
    1aec:	8a ef       	ldi	r24, 0xFA	; 250
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	11 c0       	rjmp	.+34     	; 0x1b14 <compare_new_input+0x164>
	
	//Compare joystick
	if (PREV_INPUT.joystick.x_p < LAST_TRANSMITTED_INPUT.joystick.x_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.x_p > LAST_TRANSMITTED_INPUT.joystick.x_p + JOYSTICK_TRANSMIT_DEADZONE) return 280;
    1af2:	88 e1       	ldi	r24, 0x18	; 24
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	0e c0       	rjmp	.+28     	; 0x1b14 <compare_new_input+0x164>
    1af8:	88 e1       	ldi	r24, 0x18	; 24
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0b c0       	rjmp	.+22     	; 0x1b14 <compare_new_input+0x164>
	if (PREV_INPUT.joystick.y_p < LAST_TRANSMITTED_INPUT.joystick.y_p - JOYSTICK_TRANSMIT_DEADZONE || PREV_INPUT.joystick.y_p > LAST_TRANSMITTED_INPUT.joystick.y_p + JOYSTICK_TRANSMIT_DEADZONE) return 290;
    1afe:	82 e2       	ldi	r24, 0x22	; 34
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	08 c0       	rjmp	.+16     	; 0x1b14 <compare_new_input+0x164>
    1b04:	82 e2       	ldi	r24, 0x22	; 34
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	05 c0       	rjmp	.+10     	; 0x1b14 <compare_new_input+0x164>
	
	//Snap back to zero
	if (PREV_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.x_p != 0) return 300;
    1b0a:	8c e2       	ldi	r24, 0x2C	; 44
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <compare_new_input+0x164>
	if (PREV_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && PREV_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) if (LAST_TRANSMITTED_INPUT.joystick.y_p != 0) return 301;
    1b10:	8d e2       	ldi	r24, 0x2D	; 45
    1b12:	91 e0       	ldi	r25, 0x01	; 1
	
	return difference;
    1b14:	2e 96       	adiw	r28, 0x0e	; 14
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	08 95       	ret

00001b32 <adc_update_current_input>:
	//Delays for readability
	_delay_ms(50);
}

int adc_update_current_input()
{
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
	//Apply deadzone
	if (CURRENT_INPUT.joystick.x_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.x_p > -JOYSTICK_ZERO_DEADZONE) CURRENT_INPUT.joystick.x_p = 0;
    1b36:	80 91 ee 02 	lds	r24, 0x02EE
    1b3a:	90 91 ef 02 	lds	r25, 0x02EF
    1b3e:	07 96       	adiw	r24, 0x07	; 7
    1b40:	0f 97       	sbiw	r24, 0x0f	; 15
    1b42:	20 f4       	brcc	.+8      	; 0x1b4c <adc_update_current_input+0x1a>
    1b44:	10 92 ef 02 	sts	0x02EF, r1
    1b48:	10 92 ee 02 	sts	0x02EE, r1
	if (CURRENT_INPUT.joystick.y_p < JOYSTICK_ZERO_DEADZONE && CURRENT_INPUT.joystick.y_p > -JOYSTICK_ZERO_DEADZONE) CURRENT_INPUT.joystick.y_p = 0;
    1b4c:	80 91 f0 02 	lds	r24, 0x02F0
    1b50:	90 91 f1 02 	lds	r25, 0x02F1
    1b54:	07 96       	adiw	r24, 0x07	; 7
    1b56:	0f 97       	sbiw	r24, 0x0f	; 15
    1b58:	20 f4       	brcc	.+8      	; 0x1b62 <adc_update_current_input+0x30>
    1b5a:	10 92 f1 02 	sts	0x02F1, r1
    1b5e:	10 92 f0 02 	sts	0x02F0, r1
		
	
	//Check if there is a difference
	int difference = compare_new_input();
    1b62:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <compare_new_input>
    1b66:	ec 01       	movw	r28, r24
	
	//CURRENT INPUT IS NOW PREVIOUS INPUT
	PREV_INPUT = CURRENT_INPUT;
    1b68:	8e e0       	ldi	r24, 0x0E	; 14
    1b6a:	ee ee       	ldi	r30, 0xEE	; 238
    1b6c:	f2 e0       	ldi	r31, 0x02	; 2
    1b6e:	a8 e3       	ldi	r26, 0x38	; 56
    1b70:	b3 e0       	ldi	r27, 0x03	; 3
    1b72:	01 90       	ld	r0, Z+
    1b74:	0d 92       	st	X+, r0
    1b76:	8a 95       	dec	r24
    1b78:	e1 f7       	brne	.-8      	; 0x1b72 <adc_update_current_input+0x40>
	
	CURRENT_INPUT.joystick = adc_joy_position();
    1b7a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <adc_joy_position>
    1b7e:	20 93 ee 02 	sts	0x02EE, r18
    1b82:	30 93 ef 02 	sts	0x02EF, r19
    1b86:	40 93 f0 02 	sts	0x02F0, r20
    1b8a:	50 93 f1 02 	sts	0x02F1, r21
    1b8e:	60 93 f2 02 	sts	0x02F2, r22
    1b92:	70 93 f3 02 	sts	0x02F3, r23
	
	//Checks sliders
	CURRENT_INPUT.slider_l = adc_slider_position_left();
    1b96:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <adc_slider_position_left>
    1b9a:	90 93 f5 02 	sts	0x02F5, r25
    1b9e:	80 93 f4 02 	sts	0x02F4, r24
	CURRENT_INPUT.slider_r = adc_slider_position_right();
    1ba2:	0e 94 6d 0c 	call	0x18da	; 0x18da <adc_slider_position_right>
    1ba6:	90 93 f7 02 	sts	0x02F7, r25
    1baa:	80 93 f6 02 	sts	0x02F6, r24
	
	//Checks button
	CURRENT_INPUT.button_l = PINB&(1<<PB1);
    1bae:	86 b3       	in	r24, 0x16	; 22
    1bb0:	82 70       	andi	r24, 0x02	; 2
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	90 93 f9 02 	sts	0x02F9, r25
    1bb8:	80 93 f8 02 	sts	0x02F8, r24
	CURRENT_INPUT.button_r = PINB&(1<<PB2);
    1bbc:	86 b3       	in	r24, 0x16	; 22
    1bbe:	84 70       	andi	r24, 0x04	; 4
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	90 93 fb 02 	sts	0x02FB, r25
    1bc6:	80 93 fa 02 	sts	0x02FA, r24
	
	return difference;
}
    1bca:	ce 01       	movw	r24, r28
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <ext_mem_init>:
#include <avr/sleep.h>

void ext_mem_init()
{
	//Enables External Memory Interface
	MCUCR |= (1<<SRE);
    1bd2:	85 b7       	in	r24, 0x35	; 53
    1bd4:	80 68       	ori	r24, 0x80	; 128
    1bd6:	85 bf       	out	0x35, r24	; 53
	
	//Turns off PC7-4 for address bits, they are used as jtag anyways
	SFIOR |= (1<<XMM2);
    1bd8:	80 b7       	in	r24, 0x30	; 48
    1bda:	80 62       	ori	r24, 0x20	; 32
    1bdc:	80 bf       	out	0x30, r24	; 48
    1bde:	08 95       	ret

00001be0 <ext_mem_write>:

}

void ext_mem_write(char *address, char val)
{
	*address = val; 
    1be0:	fc 01       	movw	r30, r24
    1be2:	60 83       	st	Z, r22
    1be4:	08 95       	ret

00001be6 <ext_mem_read>:
}

char ext_mem_read(char *address)
{
	return *(address);
}
    1be6:	fc 01       	movw	r30, r24
    1be8:	80 81       	ld	r24, Z
    1bea:	08 95       	ret

00001bec <music_start_transmission>:

}

void music_start_transmission()
{
	SELECT_PORT |= (1 << SELECT_PIN); //Sends interrupt to node 3
    1bec:	c0 9a       	sbi	0x18, 0	; 24
    1bee:	08 95       	ret

00001bf0 <music_end_transmission>:
}

void music_end_transmission()
{
	SELECT_PORT &= ~(1 << SELECT_PIN); //Pulls it low
    1bf0:	c0 98       	cbi	0x18, 0	; 24
    1bf2:	08 95       	ret

00001bf4 <music_init>:
void music_function_pin(int PIN, int v);

void music_init()
{
	//Sets up ports
	DDRB |= (1 << PB0);
    1bf4:	b8 9a       	sbi	0x17, 0	; 23
	DDRD |= (1 << PD4)|(1 << PD5);
    1bf6:	81 b3       	in	r24, 0x11	; 17
    1bf8:	80 63       	ori	r24, 0x30	; 48
    1bfa:	81 bb       	out	0x11, r24	; 17
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
	else if (v == 0) FUNCTION_PORT &= ~(1 << PIN);
    1bfc:	94 98       	cbi	0x12, 4	; 18
    1bfe:	95 98       	cbi	0x12, 5	; 18
	//Initializes pin values
	music_function_pin(CTRL_MODE_PIN,0);
	music_function_pin(DIRECTION_PIN,0);
	
	//Completes setup
	music_start_transmission();
    1c00:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <music_start_transmission>
    1c04:	2f ef       	ldi	r18, 0xFF	; 255
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	92 e0       	ldi	r25, 0x02	; 2
    1c0a:	21 50       	subi	r18, 0x01	; 1
    1c0c:	80 40       	sbci	r24, 0x00	; 0
    1c0e:	90 40       	sbci	r25, 0x00	; 0
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <music_init+0x16>
    1c12:	00 c0       	rjmp	.+0      	; 0x1c14 <music_init+0x20>
    1c14:	00 c0       	rjmp	.+0      	; 0x1c16 <music_init+0x22>
	_delay_ms(200);
	music_end_transmission();
    1c16:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <music_end_transmission>
    1c1a:	08 95       	ret

00001c1c <music_start_up_sound>:
{
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
    1c1c:	94 9a       	sbi	0x12, 4	; 18
    1c1e:	95 9a       	sbi	0x12, 5	; 18

void music_start_up_sound()
{
	music_function_pin(CTRL_MODE_PIN,1);
	music_function_pin(DIRECTION_PIN,1);
	music_start_transmission();
    1c20:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <music_start_transmission>
    1c24:	2f ef       	ldi	r18, 0xFF	; 255
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	21 50       	subi	r18, 0x01	; 1
    1c2c:	80 40       	sbci	r24, 0x00	; 0
    1c2e:	90 40       	sbci	r25, 0x00	; 0
    1c30:	e1 f7       	brne	.-8      	; 0x1c2a <music_start_up_sound+0xe>
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <music_start_up_sound+0x18>
    1c34:	00 c0       	rjmp	.+0      	; 0x1c36 <music_start_up_sound+0x1a>
	_delay_ms(200);
	music_end_transmission();
    1c36:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <music_end_transmission>
    1c3a:	08 95       	ret

00001c3c <music_next_song>:
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
	else if (v == 0) FUNCTION_PORT &= ~(1 << PIN);
    1c3c:	94 98       	cbi	0x12, 4	; 18
{
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
    1c3e:	95 9a       	sbi	0x12, 5	; 18

void music_next_song()
{
	music_function_pin(CTRL_MODE_PIN,0);
	music_function_pin(DIRECTION_PIN,1);
	music_start_transmission();
    1c40:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <music_start_transmission>
    1c44:	2f ef       	ldi	r18, 0xFF	; 255
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	21 50       	subi	r18, 0x01	; 1
    1c4c:	80 40       	sbci	r24, 0x00	; 0
    1c4e:	90 40       	sbci	r25, 0x00	; 0
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <music_next_song+0xe>
    1c52:	00 c0       	rjmp	.+0      	; 0x1c54 <music_next_song+0x18>
    1c54:	00 c0       	rjmp	.+0      	; 0x1c56 <music_next_song+0x1a>
	_delay_ms(200);
	music_end_transmission();
    1c56:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <music_end_transmission>
    1c5a:	08 95       	ret

00001c5c <music_prev_song>:
	//Only works for music pins
	if (PIN != DIRECTION_PIN && PIN != CTRL_MODE_PIN) return;
	
	//Sets value on pin
	if (v == 1) FUNCTION_PORT |= (1 << PIN);
	else if (v == 0) FUNCTION_PORT &= ~(1 << PIN);
    1c5c:	94 98       	cbi	0x12, 4	; 18
    1c5e:	95 98       	cbi	0x12, 5	; 18

void music_prev_song()
{
	music_function_pin(CTRL_MODE_PIN,0);
	music_function_pin(DIRECTION_PIN,0);
	music_start_transmission();
    1c60:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <music_start_transmission>
    1c64:	2f ef       	ldi	r18, 0xFF	; 255
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	21 50       	subi	r18, 0x01	; 1
    1c6c:	80 40       	sbci	r24, 0x00	; 0
    1c6e:	90 40       	sbci	r25, 0x00	; 0
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <music_prev_song+0xe>
    1c72:	00 c0       	rjmp	.+0      	; 0x1c74 <music_prev_song+0x18>
    1c74:	00 c0       	rjmp	.+0      	; 0x1c76 <music_prev_song+0x1a>
	_delay_ms(200);
	music_end_transmission();
    1c76:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <music_end_transmission>
    1c7a:	08 95       	ret

00001c7c <oled_go_to>:
}

void oled_go_to(uint8_t col, uint8_t page)
{
	//Sets pointers
	page_index = page;
    1c7c:	60 93 55 03 	sts	0x0355, r22
	col_index = col; 
    1c80:	80 93 54 03 	sts	0x0354, r24
	
	//Set page
	*OLED_CMD = 0xB0 | (0b00000111 & page_index);
    1c84:	e0 91 61 01 	lds	r30, 0x0161
    1c88:	f0 91 62 01 	lds	r31, 0x0162
    1c8c:	80 91 55 03 	lds	r24, 0x0355
    1c90:	87 70       	andi	r24, 0x07	; 7
    1c92:	80 6b       	ori	r24, 0xB0	; 176
    1c94:	80 83       	st	Z, r24
		
	//Set lower start col
	*OLED_CMD = (0b00001111 & col_index);
    1c96:	e0 91 61 01 	lds	r30, 0x0161
    1c9a:	f0 91 62 01 	lds	r31, 0x0162
    1c9e:	80 91 54 03 	lds	r24, 0x0354
    1ca2:	8f 70       	andi	r24, 0x0F	; 15
    1ca4:	80 83       	st	Z, r24
		
	//Set higher start col
	*OLED_CMD = 0x10 | (col_index >> 4);
    1ca6:	e0 91 61 01 	lds	r30, 0x0161
    1caa:	f0 91 62 01 	lds	r31, 0x0162
    1cae:	80 91 54 03 	lds	r24, 0x0354
    1cb2:	82 95       	swap	r24
    1cb4:	8f 70       	andi	r24, 0x0F	; 15
    1cb6:	80 61       	ori	r24, 0x10	; 16
    1cb8:	80 83       	st	Z, r24
    1cba:	08 95       	ret

00001cbc <oled_page_write>:
}

void oled_page_write(uint8_t byte)
{
	//Set page
	*OLED_CMD = 0xB0 | (0b00000111 & page_index);
    1cbc:	e0 91 61 01 	lds	r30, 0x0161
    1cc0:	f0 91 62 01 	lds	r31, 0x0162
    1cc4:	90 91 55 03 	lds	r25, 0x0355
    1cc8:	97 70       	andi	r25, 0x07	; 7
    1cca:	90 6b       	ori	r25, 0xB0	; 176
    1ccc:	90 83       	st	Z, r25

	//Set lower start col
	*OLED_CMD = (0b00001111 & col_index);
    1cce:	e0 91 61 01 	lds	r30, 0x0161
    1cd2:	f0 91 62 01 	lds	r31, 0x0162
    1cd6:	90 91 54 03 	lds	r25, 0x0354
    1cda:	9f 70       	andi	r25, 0x0F	; 15
    1cdc:	90 83       	st	Z, r25

	//Set higher start col
	*OLED_CMD = 0x10 | (col_index >> 4);
    1cde:	e0 91 61 01 	lds	r30, 0x0161
    1ce2:	f0 91 62 01 	lds	r31, 0x0162
    1ce6:	90 91 54 03 	lds	r25, 0x0354
    1cea:	92 95       	swap	r25
    1cec:	9f 70       	andi	r25, 0x0F	; 15
    1cee:	90 61       	ori	r25, 0x10	; 16
    1cf0:	90 83       	st	Z, r25
	
	//Write value
	*OLED_DATA = byte;
    1cf2:	e0 91 5f 01 	lds	r30, 0x015F
    1cf6:	f0 91 60 01 	lds	r31, 0x0160
    1cfa:	80 83       	st	Z, r24
    1cfc:	08 95       	ret

00001cfe <oled_clear_screen>:
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
	//Remembers where the pointers pointed
	uint8_t save_col = col_index;
    1d08:	f0 90 54 03 	lds	r15, 0x0354
	uint8_t save_page = page_index;
    1d0c:	00 91 55 03 	lds	r16, 0x0355
    1d10:	d0 e0       	ldi	r29, 0x00	; 0
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    1d12:	10 e0       	ldi	r17, 0x00	; 0
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <oled_clear_screen+0x32>
	//Clears all pixels
	for (int page = 0; page < 8; page++)
	{
		for (int column = 0; column < 128; column++)
		{
			oled_go_to(column,page); //0-7 pages with a byte in each
    1d16:	6d 2f       	mov	r22, r29
    1d18:	8c 2f       	mov	r24, r28
    1d1a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
			oled_page_write(0);
    1d1e:	81 2f       	mov	r24, r17
    1d20:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <oled_page_write>
    1d24:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t save_page = page_index;
	
	//Clears all pixels
	for (int page = 0; page < 8; page++)
	{
		for (int column = 0; column < 128; column++)
    1d26:	c0 38       	cpi	r28, 0x80	; 128
    1d28:	b1 f7       	brne	.-20     	; 0x1d16 <oled_clear_screen+0x18>
    1d2a:	df 5f       	subi	r29, 0xFF	; 255
	//Remembers where the pointers pointed
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;
	
	//Clears all pixels
	for (int page = 0; page < 8; page++)
    1d2c:	d8 30       	cpi	r29, 0x08	; 8
    1d2e:	11 f0       	breq	.+4      	; 0x1d34 <oled_clear_screen+0x36>
	*OLED_CMD = 0x10 | (col_index >> 4);

}

void oled_clear_screen()
{
    1d30:	c1 2f       	mov	r28, r17
    1d32:	f1 cf       	rjmp	.-30     	; 0x1d16 <oled_clear_screen+0x18>
			oled_page_write(0);
		}
	}
	
	//Resets pointers to previous position
	col_index = save_col;
    1d34:	f0 92 54 03 	sts	0x0354, r15
	page_index = save_page;
    1d38:	00 93 55 03 	sts	0x0355, r16
}
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	08 95       	ret

00001d48 <oled_home>:
}


void oled_home()
{
	oled_go_to(0,0);
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
    1d50:	08 95       	ret

00001d52 <oled_write_SRAM>:
}

void oled_write_SRAM(char byte)
{
	uint16_t addr = col_index + 128*page_index;//Transfers from col and row pointer to index in SRAM buffer
    1d52:	90 91 54 03 	lds	r25, 0x0354
    1d56:	20 91 55 03 	lds	r18, 0x0355
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	24 9f       	mul	r18, r20
    1d5e:	90 01       	movw	r18, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	29 0f       	add	r18, r25
    1d64:	31 1d       	adc	r19, r1
	if (addr < (0x0400) && addr >= 0) ext_mem_write((char *)(SRAM_BUFFER+addr),byte);
    1d66:	21 15       	cp	r18, r1
    1d68:	94 e0       	ldi	r25, 0x04	; 4
    1d6a:	39 07       	cpc	r19, r25
    1d6c:	50 f4       	brcc	.+20     	; 0x1d82 <oled_write_SRAM+0x30>
    1d6e:	40 91 5d 01 	lds	r20, 0x015D
    1d72:	50 91 5e 01 	lds	r21, 0x015E
    1d76:	68 2f       	mov	r22, r24
    1d78:	ca 01       	movw	r24, r20
    1d7a:	82 0f       	add	r24, r18
    1d7c:	93 1f       	adc	r25, r19
    1d7e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <ext_mem_write>
    1d82:	08 95       	ret

00001d84 <oled_char_write_big>:
	//Write value
	*OLED_DATA = byte;
}

int oled_char_write_big(char c)
{
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	28 e0       	ldi	r18, 0x08	; 8
    1d8e:	82 9f       	mul	r24, r18
    1d90:	c0 01       	movw	r24, r0
    1d92:	11 24       	eor	r1, r1
    1d94:	ec 01       	movw	r28, r24
    1d96:	c9 53       	subi	r28, 0x39	; 57
    1d98:	dd 4f       	sbci	r29, 0xFD	; 253
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32; 
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 8; i++)
    1d9a:	00 e0       	ldi	r16, 0x00	; 0
    1d9c:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font8[char_array_index][i]));
    1d9e:	fe 01       	movw	r30, r28
    1da0:	84 91       	lpm	r24, Z
    1da2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    1da6:	60 91 55 03 	lds	r22, 0x0355
    1daa:	80 91 54 03 	lds	r24, 0x0354
    1dae:	8f 5f       	subi	r24, 0xFF	; 255
    1db0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32; 
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 8; i++)
    1db4:	0f 5f       	subi	r16, 0xFF	; 255
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	21 96       	adiw	r28, 0x01	; 1
    1dba:	08 30       	cpi	r16, 0x08	; 8
    1dbc:	11 05       	cpc	r17, r1
    1dbe:	79 f7       	brne	.-34     	; 0x1d9e <oled_char_write_big+0x1a>
	{
		oled_write_SRAM(pgm_read_byte(&font8[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	08 95       	ret

00001dce <oled_char_write_normal>:


int oled_char_write_normal(char c)
{
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
    1dd6:	c8 2f       	mov	r28, r24
    1dd8:	d0 e0       	ldi	r29, 0x00	; 0
    1dda:	a0 97       	sbiw	r28, 0x20	; 32
    1ddc:	ce 01       	movw	r24, r28
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	c8 0f       	add	r28, r24
    1de8:	d9 1f       	adc	r29, r25
    1dea:	c4 51       	subi	r28, 0x14	; 20
    1dec:	de 4f       	sbci	r29, 0xFE	; 254
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 5; i++)
    1dee:	00 e0       	ldi	r16, 0x00	; 0
    1df0:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font5[char_array_index][i]));
    1df2:	fe 01       	movw	r30, r28
    1df4:	84 91       	lpm	r24, Z
    1df6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    1dfa:	60 91 55 03 	lds	r22, 0x0355
    1dfe:	80 91 54 03 	lds	r24, 0x0354
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 5; i++)
    1e08:	0f 5f       	subi	r16, 0xFF	; 255
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	21 96       	adiw	r28, 0x01	; 1
    1e0e:	05 30       	cpi	r16, 0x05	; 5
    1e10:	11 05       	cpc	r17, r1
    1e12:	79 f7       	brne	.-34     	; 0x1df2 <oled_char_write_normal+0x24>
	{
		oled_write_SRAM(pgm_read_byte(&font5[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <oled_char_write_small>:


int oled_char_write_small(char c)
{
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	24 e0       	ldi	r18, 0x04	; 4
    1e2c:	82 9f       	mul	r24, r18
    1e2e:	c0 01       	movw	r24, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	ec 01       	movw	r28, r24
    1e34:	c0 51       	subi	r28, 0x10	; 16
    1e36:	d0 40       	sbci	r29, 0x00	; 0
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 4; i++)
    1e38:	00 e0       	ldi	r16, 0x00	; 0
    1e3a:	10 e0       	ldi	r17, 0x00	; 0
	{
		oled_write_SRAM(pgm_read_byte(&font4[char_array_index][i]));
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	84 91       	lpm	r24, Z
    1e40:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <oled_write_SRAM>
		oled_go_to(col_index+1,page_index);
    1e44:	60 91 55 03 	lds	r22, 0x0355
    1e48:	80 91 54 03 	lds	r24, 0x0354
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
{
	//Offsets the array index, the font doesn't have all symbols
	const int char_array_index = c - 32;
	
	//Iterates through the font table and paints oled
	for (int i = 0; i < 4; i++)
    1e52:	0f 5f       	subi	r16, 0xFF	; 255
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	21 96       	adiw	r28, 0x01	; 1
    1e58:	04 30       	cpi	r16, 0x04	; 4
    1e5a:	11 05       	cpc	r17, r1
    1e5c:	79 f7       	brne	.-34     	; 0x1e3c <oled_char_write_small+0x1a>
	{
		oled_write_SRAM(pgm_read_byte(&font4[char_array_index][i]));
		oled_go_to(col_index+1,page_index);
	}
	return 0;
}
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <oled_read_SRAM>:
	if (addr < (0x0400) && addr >= 0) ext_mem_write((char *)(SRAM_BUFFER+addr),byte);
}

char oled_read_SRAM()
{
	uint16_t addr = col_index + 128*page_index;//Transfers from col and row pointer to index in SRAM buffer
    1e6c:	20 91 54 03 	lds	r18, 0x0354
    1e70:	80 91 55 03 	lds	r24, 0x0355
    1e74:	30 e8       	ldi	r19, 0x80	; 128
    1e76:	83 9f       	mul	r24, r19
    1e78:	c0 01       	movw	r24, r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	82 0f       	add	r24, r18
    1e7e:	91 1d       	adc	r25, r1
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
    1e80:	9c 01       	movw	r18, r24
    1e82:	21 50       	subi	r18, 0x01	; 1
    1e84:	31 09       	sbc	r19, r1
    1e86:	2f 3f       	cpi	r18, 0xFF	; 255
    1e88:	33 40       	sbci	r19, 0x03	; 3
    1e8a:	48 f4       	brcc	.+18     	; 0x1e9e <oled_read_SRAM+0x32>
    1e8c:	20 91 5d 01 	lds	r18, 0x015D
    1e90:	30 91 5e 01 	lds	r19, 0x015E
    1e94:	82 0f       	add	r24, r18
    1e96:	93 1f       	adc	r25, r19
    1e98:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <ext_mem_read>
    1e9c:	08 95       	ret
	else return 0; //If out of bounds, we return 
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
}
    1ea0:	08 95       	ret

00001ea2 <oled_update_from_SRAM>:

void oled_update_from_SRAM()
{
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
	//Save current row and column index
	uint8_t save_col = col_index;
    1eac:	f0 90 54 03 	lds	r15, 0x0354
	uint8_t save_page = page_index;
    1eb0:	00 91 55 03 	lds	r16, 0x0355

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
    1eb4:	d0 e0       	ldi	r29, 0x00	; 0
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
	else return 0; //If out of bounds, we return 
}

void oled_update_from_SRAM()
{
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
    1eb8:	0e c0       	rjmp	.+28     	; 0x1ed6 <oled_update_from_SRAM+0x34>
	uint8_t c, p;
	for (c = 0; c < 128; c++)
	{
		for (p = 0; p < 8; p++)
		{
			oled_go_to(c,p);
    1eba:	6c 2f       	mov	r22, r28
    1ebc:	8d 2f       	mov	r24, r29
    1ebe:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
			oled_page_write(oled_read_SRAM());
    1ec2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <oled_read_SRAM>
    1ec6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <oled_page_write>

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
	{
		for (p = 0; p < 8; p++)
    1eca:	cf 5f       	subi	r28, 0xFF	; 255
    1ecc:	c8 30       	cpi	r28, 0x08	; 8
    1ece:	a9 f7       	brne	.-22     	; 0x1eba <oled_update_from_SRAM+0x18>
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;

	//Transfer data from SRAM to OLED
	uint8_t c, p;
	for (c = 0; c < 128; c++)
    1ed0:	df 5f       	subi	r29, 0xFF	; 255
    1ed2:	d0 38       	cpi	r29, 0x80	; 128
    1ed4:	11 f0       	breq	.+4      	; 0x1eda <oled_update_from_SRAM+0x38>
	if (addr < 0x0400 && addr > 0) return ext_mem_read((char *)(SRAM_BUFFER+addr));
	else return 0; //If out of bounds, we return 
}

void oled_update_from_SRAM()
{
    1ed6:	c1 2f       	mov	r28, r17
    1ed8:	f0 cf       	rjmp	.-32     	; 0x1eba <oled_update_from_SRAM+0x18>
			oled_page_write(oled_read_SRAM());
		}
	}

	//Recover old indexes
	col_index = save_col;
    1eda:	f0 92 54 03 	sts	0x0354, r15
	page_index = save_page;
    1ede:	00 93 55 03 	sts	0x0355, r16
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	08 95       	ret

00001eee <oled_clear_SRAM>:

void oled_clear_SRAM()
{
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
	for (uint16_t i = 0; i < 0x400; i++) ext_mem_write((char *)(SRAM_BUFFER+i),0);
    1ef2:	c0 e0       	ldi	r28, 0x00	; 0
    1ef4:	d0 e0       	ldi	r29, 0x00	; 0
    1ef6:	80 91 5d 01 	lds	r24, 0x015D
    1efa:	90 91 5e 01 	lds	r25, 0x015E
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	8c 0f       	add	r24, r28
    1f02:	9d 1f       	adc	r25, r29
    1f04:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <ext_mem_write>
    1f08:	21 96       	adiw	r28, 0x01	; 1
    1f0a:	c1 15       	cp	r28, r1
    1f0c:	84 e0       	ldi	r24, 0x04	; 4
    1f0e:	d8 07       	cpc	r29, r24
    1f10:	91 f7       	brne	.-28     	; 0x1ef6 <oled_clear_SRAM+0x8>
}
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	08 95       	ret

00001f18 <oled_init>:


void oled_init()
{
	//Enable external memory
	ext_mem_init();
    1f18:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <ext_mem_init>
	
	//Set row and col pointer to 0
	page_index = 0;
    1f1c:	10 92 55 03 	sts	0x0355, r1
	col_index = 0;
    1f20:	10 92 54 03 	sts	0x0354, r1
	
	//Configures the oled (copied from datasheet (shamelessly))
	*OLED_CMD = DISPLAY_OFF;									//Display  off
    1f24:	e0 91 61 01 	lds	r30, 0x0161
    1f28:	f0 91 62 01 	lds	r31, 0x0162
    1f2c:	8e ea       	ldi	r24, 0xAE	; 174
    1f2e:	80 83       	st	Z, r24
	*OLED_CMD = SEGMENT_REMAP_MODE_0;							//Segment  remap
    1f30:	e0 91 61 01 	lds	r30, 0x0161
    1f34:	f0 91 62 01 	lds	r31, 0x0162
    1f38:	81 ea       	ldi	r24, 0xA1	; 161
    1f3a:	80 83       	st	Z, r24
	*OLED_CMD = COMMON_PADS_HARDWARE;							//Common  pads  hardware:  alternative
    1f3c:	e0 91 61 01 	lds	r30, 0x0161
    1f40:	f0 91 62 01 	lds	r31, 0x0162
    1f44:	8a ed       	ldi	r24, 0xDA	; 218
    1f46:	80 83       	st	Z, r24
	*OLED_CMD = 0x12;
    1f48:	e0 91 61 01 	lds	r30, 0x0161
    1f4c:	f0 91 62 01 	lds	r31, 0x0162
    1f50:	82 e1       	ldi	r24, 0x12	; 18
    1f52:	80 83       	st	Z, r24
	*OLED_CMD = COMMON_OUTPUT_SCAN_DIRECTION;					//Common output scan direction:com63~com0
    1f54:	e0 91 61 01 	lds	r30, 0x0161
    1f58:	f0 91 62 01 	lds	r31, 0x0162
    1f5c:	88 ec       	ldi	r24, 0xC8	; 200
    1f5e:	80 83       	st	Z, r24
	*OLED_CMD = MULTIPLEX_RATIO_MODE_63;						//Multiplex  ration  mode:63
    1f60:	e0 91 61 01 	lds	r30, 0x0161
    1f64:	f0 91 62 01 	lds	r31, 0x0162
    1f68:	88 ea       	ldi	r24, 0xA8	; 168
    1f6a:	80 83       	st	Z, r24
	*OLED_CMD = 0x3f;
    1f6c:	e0 91 61 01 	lds	r30, 0x0161
    1f70:	f0 91 62 01 	lds	r31, 0x0162
    1f74:	8f e3       	ldi	r24, 0x3F	; 63
    1f76:	80 83       	st	Z, r24
	*OLED_CMD = DISPLAY_DIVITE_RATIO_OSC_FREQ_MODE;				//Display divide ratio/osc. freq. mode
    1f78:	e0 91 61 01 	lds	r30, 0x0161
    1f7c:	f0 91 62 01 	lds	r31, 0x0162
    1f80:	85 ed       	ldi	r24, 0xD5	; 213
    1f82:	80 83       	st	Z, r24
	*OLED_CMD = 0x80;
    1f84:	e0 91 61 01 	lds	r30, 0x0161
    1f88:	f0 91 62 01 	lds	r31, 0x0162
    1f8c:	80 e8       	ldi	r24, 0x80	; 128
    1f8e:	80 83       	st	Z, r24
	*OLED_CMD = CONTRAST_CONTROL;								//Contrast  control
    1f90:	e0 91 61 01 	lds	r30, 0x0161
    1f94:	f0 91 62 01 	lds	r31, 0x0162
    1f98:	81 e8       	ldi	r24, 0x81	; 129
    1f9a:	80 83       	st	Z, r24
	*OLED_CMD = 0x50;
    1f9c:	e0 91 61 01 	lds	r30, 0x0161
    1fa0:	f0 91 62 01 	lds	r31, 0x0162
    1fa4:	80 e5       	ldi	r24, 0x50	; 80
    1fa6:	80 83       	st	Z, r24
	*OLED_CMD = PRE_CHARGE_PERIOD;								//Set  pre-charge  period
    1fa8:	e0 91 61 01 	lds	r30, 0x0161
    1fac:	f0 91 62 01 	lds	r31, 0x0162
    1fb0:	89 ed       	ldi	r24, 0xD9	; 217
    1fb2:	80 83       	st	Z, r24
	*OLED_CMD = 0x21;
    1fb4:	e0 91 61 01 	lds	r30, 0x0161
    1fb8:	f0 91 62 01 	lds	r31, 0x0162
    1fbc:	81 e2       	ldi	r24, 0x21	; 33
    1fbe:	80 83       	st	Z, r24
	*OLED_CMD = SET_MEMORY_ADDRESSING_MODE_PAGE;				//Set  Memory  Addressing  Mode
    1fc0:	e0 91 61 01 	lds	r30, 0x0161
    1fc4:	f0 91 62 01 	lds	r31, 0x0162
    1fc8:	82 e2       	ldi	r24, 0x22	; 34
    1fca:	80 83       	st	Z, r24
	*OLED_CMD = 0x02;
    1fcc:	e0 91 61 01 	lds	r30, 0x0161
    1fd0:	f0 91 62 01 	lds	r31, 0x0162
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	80 83       	st	Z, r24
	*OLED_CMD = VCOM_DESELECT_LEVEL_MODE;						//VCOM  deselect  level  mode
    1fd8:	e0 91 61 01 	lds	r30, 0x0161
    1fdc:	f0 91 62 01 	lds	r31, 0x0162
    1fe0:	8b ed       	ldi	r24, 0xDB	; 219
    1fe2:	80 83       	st	Z, r24
	*OLED_CMD = 0x30;
    1fe4:	e0 91 61 01 	lds	r30, 0x0161
    1fe8:	f0 91 62 01 	lds	r31, 0x0162
    1fec:	80 e3       	ldi	r24, 0x30	; 48
    1fee:	80 83       	st	Z, r24
	*OLED_CMD = MASTER_CONFIG;									//Master  configuration
    1ff0:	e0 91 61 01 	lds	r30, 0x0161
    1ff4:	f0 91 62 01 	lds	r31, 0x0162
    1ff8:	8d ea       	ldi	r24, 0xAD	; 173
    1ffa:	80 83       	st	Z, r24
	*OLED_CMD = 0x00;
    1ffc:	e0 91 61 01 	lds	r30, 0x0161
    2000:	f0 91 62 01 	lds	r31, 0x0162
    2004:	10 82       	st	Z, r1
	*OLED_CMD = OUT_FOLLOWS_RAM_CONTENT;						//Out  follows  RAM  content
    2006:	e0 91 61 01 	lds	r30, 0x0161
    200a:	f0 91 62 01 	lds	r31, 0x0162
    200e:	84 ea       	ldi	r24, 0xA4	; 164
    2010:	80 83       	st	Z, r24
	*OLED_CMD = SET_NORMAL_DISPLAY;								//Set  normal  display
    2012:	e0 91 61 01 	lds	r30, 0x0161
    2016:	f0 91 62 01 	lds	r31, 0x0162
    201a:	86 ea       	ldi	r24, 0xA6	; 166
    201c:	80 83       	st	Z, r24
	*OLED_CMD = 0x40;
    201e:	e0 91 61 01 	lds	r30, 0x0161
    2022:	f0 91 62 01 	lds	r31, 0x0162
    2026:	80 e4       	ldi	r24, 0x40	; 64
    2028:	80 83       	st	Z, r24
	*OLED_CMD = DISPLAY_ON;										//Display  on
    202a:	e0 91 61 01 	lds	r30, 0x0161
    202e:	f0 91 62 01 	lds	r31, 0x0162
    2032:	8f ea       	ldi	r24, 0xAF	; 175
    2034:	80 83       	st	Z, r24
	
	//Clears the screen
	oled_clear_screen();
    2036:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <oled_clear_screen>

	//Clear SRAM buffer
	oled_clear_SRAM();
    203a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
    203e:	08 95       	ret

00002040 <oled_cstring_write>:
{
	for (uint16_t i = 0; i < 0x400; i++) ext_mem_write((char *)(SRAM_BUFFER+i),0);
}

void oled_cstring_write(char *c, int size)
{	
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	ec 01       	movw	r28, r24
	int i = 0;
	if (size == 0) while (c[i] != '\0'){ oled_char_write_small(c[i]); i++; }
    2046:	61 15       	cp	r22, r1
    2048:	71 05       	cpc	r23, r1
    204a:	51 f4       	brne	.+20     	; 0x2060 <oled_cstring_write+0x20>
    204c:	88 81       	ld	r24, Y
    204e:	88 23       	and	r24, r24
    2050:	01 f1       	breq	.+64     	; 0x2092 <oled_cstring_write+0x52>
    2052:	21 96       	adiw	r28, 0x01	; 1
    2054:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <oled_char_write_small>
    2058:	89 91       	ld	r24, Y+
    205a:	81 11       	cpse	r24, r1
    205c:	fb cf       	rjmp	.-10     	; 0x2054 <oled_cstring_write+0x14>
    205e:	19 c0       	rjmp	.+50     	; 0x2092 <oled_cstring_write+0x52>
	else if (size == 1) while (c[i] != '\0'){ oled_char_write_normal(c[i]); i++; }
    2060:	61 30       	cpi	r22, 0x01	; 1
    2062:	71 05       	cpc	r23, r1
    2064:	51 f4       	brne	.+20     	; 0x207a <oled_cstring_write+0x3a>
    2066:	88 81       	ld	r24, Y
    2068:	88 23       	and	r24, r24
    206a:	99 f0       	breq	.+38     	; 0x2092 <oled_cstring_write+0x52>
    206c:	21 96       	adiw	r28, 0x01	; 1
    206e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <oled_char_write_normal>
    2072:	89 91       	ld	r24, Y+
    2074:	81 11       	cpse	r24, r1
    2076:	fb cf       	rjmp	.-10     	; 0x206e <oled_cstring_write+0x2e>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <oled_cstring_write+0x52>
	else if (size == 2) while (c[i] != '\0'){ oled_char_write_big(c[i]); i++; }	
    207a:	62 30       	cpi	r22, 0x02	; 2
    207c:	71 05       	cpc	r23, r1
    207e:	49 f4       	brne	.+18     	; 0x2092 <oled_cstring_write+0x52>
    2080:	88 81       	ld	r24, Y
    2082:	88 23       	and	r24, r24
    2084:	31 f0       	breq	.+12     	; 0x2092 <oled_cstring_write+0x52>
    2086:	21 96       	adiw	r28, 0x01	; 1
    2088:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <oled_char_write_big>
    208c:	89 91       	ld	r24, Y+
    208e:	81 11       	cpse	r24, r1
    2090:	fb cf       	rjmp	.-10     	; 0x2088 <oled_cstring_write+0x48>
		
}
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	08 95       	ret

00002098 <oled_write_pixel>:

void oled_write_pixel(int x, int y, int t)
{
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	ea 01       	movw	r28, r20
	//Save current row and column index
	uint8_t save_col = col_index;
    20a4:	00 91 54 03 	lds	r16, 0x0354
	uint8_t save_page = page_index;
    20a8:	10 91 55 03 	lds	r17, 0x0355
	
	//Calculate position
	int page = y/8;
	int pixel_offset = y%8;
    20ac:	9b 01       	movw	r18, r22
    20ae:	27 70       	andi	r18, 0x07	; 7
    20b0:	30 78       	andi	r19, 0x80	; 128
    20b2:	33 23       	and	r19, r19
    20b4:	34 f4       	brge	.+12     	; 0x20c2 <oled_write_pixel+0x2a>
    20b6:	21 50       	subi	r18, 0x01	; 1
    20b8:	31 09       	sbc	r19, r1
    20ba:	28 6f       	ori	r18, 0xF8	; 248
    20bc:	3f 6f       	ori	r19, 0xFF	; 255
    20be:	2f 5f       	subi	r18, 0xFF	; 255
    20c0:	3f 4f       	sbci	r19, 0xFF	; 255
    20c2:	f2 2e       	mov	r15, r18
	//Save current row and column index
	uint8_t save_col = col_index;
	uint8_t save_page = page_index;
	
	//Calculate position
	int page = y/8;
    20c4:	fb 01       	movw	r30, r22
    20c6:	ff 23       	and	r31, r31
    20c8:	0c f4       	brge	.+2      	; 0x20cc <oled_write_pixel+0x34>
    20ca:	37 96       	adiw	r30, 0x07	; 7
    20cc:	bf 01       	movw	r22, r30
    20ce:	75 95       	asr	r23
    20d0:	67 95       	ror	r22
    20d2:	75 95       	asr	r23
    20d4:	67 95       	ror	r22
    20d6:	75 95       	asr	r23
    20d8:	67 95       	ror	r22
	int pixel_offset = y%8;
	
	int column = x;
	oled_go_to(column,page);
    20da:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	
	if (t == 0)
    20de:	cd 2b       	or	r28, r29
    20e0:	79 f4       	brne	.+30     	; 0x2100 <oled_write_pixel+0x68>
	{
		//Turn off pixel
		char current_state = oled_read_SRAM();
    20e2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <oled_read_SRAM>
		oled_write_SRAM(current_state & ~(1 << pixel_offset));
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	9a 01       	movw	r18, r20
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <oled_write_pixel+0x5a>
    20ee:	22 0f       	add	r18, r18
    20f0:	33 1f       	adc	r19, r19
    20f2:	fa 94       	dec	r15
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <oled_write_pixel+0x56>
    20f6:	20 95       	com	r18
    20f8:	82 23       	and	r24, r18
    20fa:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <oled_write_SRAM>
    20fe:	0d c0       	rjmp	.+26     	; 0x211a <oled_write_pixel+0x82>
	}
	else
	{
		//Turn on pixel
		char current_state = oled_read_SRAM();
    2100:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <oled_read_SRAM>
		char new_state = current_state | (1 << pixel_offset);
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	9a 01       	movw	r18, r20
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <oled_write_pixel+0x78>
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	fa 94       	dec	r15
    2112:	e2 f7       	brpl	.-8      	; 0x210c <oled_write_pixel+0x74>
		oled_write_SRAM(new_state);
    2114:	82 2b       	or	r24, r18
    2116:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <oled_write_SRAM>
	}
	
	//Recover old indexes
	col_index = save_col;
    211a:	00 93 54 03 	sts	0x0354, r16
	page_index = save_page;
    211e:	10 93 55 03 	sts	0x0355, r17
}
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	08 95       	ret

0000212e <oled_write_line>:

void oled_write_line(int x0, int y0, int x1, int y1)
{
    212e:	2f 92       	push	r2
    2130:	3f 92       	push	r3
    2132:	4f 92       	push	r4
    2134:	5f 92       	push	r5
    2136:	6f 92       	push	r6
    2138:	7f 92       	push	r7
    213a:	8f 92       	push	r8
    213c:	9f 92       	push	r9
    213e:	af 92       	push	r10
    2140:	bf 92       	push	r11
    2142:	cf 92       	push	r12
    2144:	df 92       	push	r13
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	28 97       	sbiw	r28, 0x08	; 8
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	2c 01       	movw	r4, r24
    2164:	3b 01       	movw	r6, r22
    2166:	8a 01       	movw	r16, r20
    2168:	19 01       	movw	r2, r18
	//Calculates derivatives
	float dy_dx;
	float dx_dy;
	if ((x1 - x0) == 0)
    216a:	48 17       	cp	r20, r24
    216c:	59 07       	cpc	r21, r25
    216e:	09 f4       	brne	.+2      	; 0x2172 <oled_write_line+0x44>
    2170:	ad c0       	rjmp	.+346    	; 0x22cc <oled_write_line+0x19e>
	{
		dy_dx = 100000;
		dx_dy = 0;
	}
	else if (((y1 - y0) == 0))
    2172:	26 17       	cp	r18, r22
    2174:	37 07       	cpc	r19, r23
    2176:	09 f4       	brne	.+2      	; 0x217a <oled_write_line+0x4c>
    2178:	44 c0       	rjmp	.+136    	; 0x2202 <oled_write_line+0xd4>
		dy_dx = 0;
		dx_dy = 100000;
	}
	else
	{
		dy_dx = ((float)(y1 - y0))/(x1 - x0);
    217a:	b9 01       	movw	r22, r18
    217c:	66 19       	sub	r22, r6
    217e:	77 09       	sbc	r23, r7
    2180:	88 27       	eor	r24, r24
    2182:	77 fd       	sbrc	r23, 7
    2184:	80 95       	com	r24
    2186:	98 2f       	mov	r25, r24
    2188:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    218c:	4b 01       	movw	r8, r22
    218e:	5c 01       	movw	r10, r24
    2190:	b8 01       	movw	r22, r16
    2192:	64 19       	sub	r22, r4
    2194:	75 09       	sbc	r23, r5
    2196:	88 27       	eor	r24, r24
    2198:	77 fd       	sbrc	r23, 7
    219a:	80 95       	com	r24
    219c:	98 2f       	mov	r25, r24
    219e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    21a2:	6b 01       	movw	r12, r22
    21a4:	7c 01       	movw	r14, r24
    21a6:	9b 01       	movw	r18, r22
    21a8:	ac 01       	movw	r20, r24
    21aa:	c5 01       	movw	r24, r10
    21ac:	b4 01       	movw	r22, r8
    21ae:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divsf3>
    21b2:	69 83       	std	Y+1, r22	; 0x01
    21b4:	7a 83       	std	Y+2, r23	; 0x02
    21b6:	8b 83       	std	Y+3, r24	; 0x03
    21b8:	9c 83       	std	Y+4, r25	; 0x04
		dx_dy = ((float)(x1 - x0))/(y1 - y0);
    21ba:	a5 01       	movw	r20, r10
    21bc:	94 01       	movw	r18, r8
    21be:	c7 01       	movw	r24, r14
    21c0:	b6 01       	movw	r22, r12
    21c2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divsf3>
    21c6:	6d 83       	std	Y+5, r22	; 0x05
    21c8:	7e 83       	std	Y+6, r23	; 0x06
    21ca:	8f 83       	std	Y+7, r24	; 0x07
    21cc:	98 87       	std	Y+8, r25	; 0x08
	}
	
	
	//Iterates over x-axis or y-axis, depending on derivative. This gives a clear line
	if (dy_dx < 1 && dy_dx > -1)
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	69 81       	ldd	r22, Y+1	; 0x01
    21d8:	7a 81       	ldd	r23, Y+2	; 0x02
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cmpsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	0c f0       	brlt	.+2      	; 0x21e8 <oled_write_line+0xba>
    21e6:	76 c0       	rjmp	.+236    	; 0x22d4 <oled_write_line+0x1a6>
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f eb       	ldi	r21, 0xBF	; 191
    21f0:	69 81       	ldd	r22, Y+1	; 0x01
    21f2:	7a 81       	ldd	r23, Y+2	; 0x02
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	0e 94 ac 14 	call	0x2958	; 0x2958 <__gesf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	2c f0       	brlt	.+10     	; 0x220a <oled_write_line+0xdc>
    2200:	69 c0       	rjmp	.+210    	; 0x22d4 <oled_write_line+0x1a6>
		dy_dx = 100000;
		dx_dy = 0;
	}
	else if (((y1 - y0) == 0))
	{
		dy_dx = 0;
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	1a 82       	std	Y+2, r1	; 0x02
    2206:	1b 82       	std	Y+3, r1	; 0x03
    2208:	1c 82       	std	Y+4, r1	; 0x04
	
	//Iterates over x-axis or y-axis, depending on derivative. This gives a clear line
	if (dy_dx < 1 && dy_dx > -1)
	{
		//If x1 < x0 we switch positions
		if (x1 < x0)
    220a:	04 15       	cp	r16, r4
    220c:	15 05       	cpc	r17, r5
    220e:	34 f4       	brge	.+12     	; 0x221c <oled_write_line+0xee>
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
			y0 = ym;
    2210:	31 01       	movw	r6, r2
    2212:	94 2d       	mov	r25, r4
    2214:	85 2d       	mov	r24, r5
			int ym = y1;
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
    2216:	28 01       	movw	r4, r16
		if (x1 < x0)
		{
			int xm = x1;
			int ym = y1;
			
			x1 = x0;
    2218:	09 2f       	mov	r16, r25
    221a:	18 2f       	mov	r17, r24
			
			x0 = xm;
			y0 = ym;
		}
		
		float ypos = (float)y0;
    221c:	b3 01       	movw	r22, r6
    221e:	88 27       	eor	r24, r24
    2220:	77 fd       	sbrc	r23, 7
    2222:	80 95       	com	r24
    2224:	98 2f       	mov	r25, r24
    2226:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    222a:	4b 01       	movw	r8, r22
    222c:	5c 01       	movw	r10, r24
		float xpos = (float)x0;
    222e:	b2 01       	movw	r22, r4
    2230:	88 27       	eor	r24, r24
    2232:	77 fd       	sbrc	r23, 7
    2234:	80 95       	com	r24
    2236:	98 2f       	mov	r25, r24
    2238:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    223c:	6b 01       	movw	r12, r22
    223e:	7c 01       	movw	r14, r24
		oled_write_pixel(xpos,ypos,1);
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	b3 01       	movw	r22, r6
    2246:	c2 01       	movw	r24, r4
    2248:	0e 94 4c 10 	call	0x2098	; 0x2098 <oled_write_pixel>
		for (xpos; xpos < x1; xpos++)
    224c:	b8 01       	movw	r22, r16
    224e:	88 27       	eor	r24, r24
    2250:	77 fd       	sbrc	r23, 7
    2252:	80 95       	com	r24
    2254:	98 2f       	mov	r25, r24
    2256:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    225a:	6d 83       	std	Y+5, r22	; 0x05
    225c:	7e 83       	std	Y+6, r23	; 0x06
    225e:	8f 83       	std	Y+7, r24	; 0x07
    2260:	98 87       	std	Y+8, r25	; 0x08
    2262:	9b 01       	movw	r18, r22
    2264:	ac 01       	movw	r20, r24
    2266:	c7 01       	movw	r24, r14
    2268:	b6 01       	movw	r22, r12
    226a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cmpsf2>
    226e:	88 23       	and	r24, r24
    2270:	0c f0       	brlt	.+2      	; 0x2274 <oled_write_line+0x146>
    2272:	91 c0       	rjmp	.+290    	; 0x2396 <oled_write_line+0x268>
		{
			ypos+=dy_dx;
    2274:	29 81       	ldd	r18, Y+1	; 0x01
    2276:	3a 81       	ldd	r19, Y+2	; 0x02
    2278:	4b 81       	ldd	r20, Y+3	; 0x03
    227a:	5c 81       	ldd	r21, Y+4	; 0x04
    227c:	c5 01       	movw	r24, r10
    227e:	b4 01       	movw	r22, r8
    2280:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__addsf3>
    2284:	4b 01       	movw	r8, r22
    2286:	5c 01       	movw	r10, r24
			oled_write_pixel(xpos,ypos,1);
    2288:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
    228c:	2b 01       	movw	r4, r22
    228e:	3c 01       	movw	r6, r24
    2290:	c7 01       	movw	r24, r14
    2292:	b6 01       	movw	r22, r12
    2294:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	b2 01       	movw	r22, r4
    22a2:	0e 94 4c 10 	call	0x2098	; 0x2098 <oled_write_pixel>
		}
		
		float ypos = (float)y0;
		float xpos = (float)x0;
		oled_write_pixel(xpos,ypos,1);
		for (xpos; xpos < x1; xpos++)
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	c7 01       	movw	r24, r14
    22b0:	b6 01       	movw	r22, r12
    22b2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__addsf3>
    22b6:	6b 01       	movw	r12, r22
    22b8:	7c 01       	movw	r14, r24
    22ba:	2d 81       	ldd	r18, Y+5	; 0x05
    22bc:	3e 81       	ldd	r19, Y+6	; 0x06
    22be:	4f 81       	ldd	r20, Y+7	; 0x07
    22c0:	58 85       	ldd	r21, Y+8	; 0x08
    22c2:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cmpsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	ac f2       	brlt	.-86     	; 0x2274 <oled_write_line+0x146>
    22ca:	65 c0       	rjmp	.+202    	; 0x2396 <oled_write_line+0x268>
	float dy_dx;
	float dx_dy;
	if ((x1 - x0) == 0)
	{
		dy_dx = 100000;
		dx_dy = 0;
    22cc:	1d 82       	std	Y+5, r1	; 0x05
    22ce:	1e 82       	std	Y+6, r1	; 0x06
    22d0:	1f 82       	std	Y+7, r1	; 0x07
    22d2:	18 86       	std	Y+8, r1	; 0x08
		
	}
	else //Iterates over y
	{
		//If y1 < y0 we switch positions
		if (y1 < y0)
    22d4:	26 14       	cp	r2, r6
    22d6:	37 04       	cpc	r3, r7
    22d8:	34 f4       	brge	.+12     	; 0x22e6 <oled_write_line+0x1b8>
    22da:	96 2d       	mov	r25, r6
    22dc:	87 2d       	mov	r24, r7
			
			x1 = x0;
			y1 = y0;
			
			x0 = xm;
			y0 = ym;
    22de:	31 01       	movw	r6, r2
		{
			int xm = x1;
			int ym = y1;
			
			x1 = x0;
			y1 = y0;
    22e0:	29 2e       	mov	r2, r25
    22e2:	38 2e       	mov	r3, r24
			
			x0 = xm;
    22e4:	28 01       	movw	r4, r16
			y0 = ym;
		}
		
		float ypos = (float)y0;
    22e6:	b3 01       	movw	r22, r6
    22e8:	88 27       	eor	r24, r24
    22ea:	77 fd       	sbrc	r23, 7
    22ec:	80 95       	com	r24
    22ee:	98 2f       	mov	r25, r24
    22f0:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    22f4:	6b 01       	movw	r12, r22
    22f6:	7c 01       	movw	r14, r24
		float xpos = (float)x0;
    22f8:	b2 01       	movw	r22, r4
    22fa:	88 27       	eor	r24, r24
    22fc:	77 fd       	sbrc	r23, 7
    22fe:	80 95       	com	r24
    2300:	98 2f       	mov	r25, r24
    2302:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    2306:	4b 01       	movw	r8, r22
    2308:	5c 01       	movw	r10, r24
		oled_write_pixel(xpos,ypos,1);
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	b3 01       	movw	r22, r6
    2310:	c2 01       	movw	r24, r4
    2312:	0e 94 4c 10 	call	0x2098	; 0x2098 <oled_write_pixel>
		for (ypos; ypos < y1; ypos++)
    2316:	b1 01       	movw	r22, r2
    2318:	88 27       	eor	r24, r24
    231a:	77 fd       	sbrc	r23, 7
    231c:	80 95       	com	r24
    231e:	98 2f       	mov	r25, r24
    2320:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__floatsisf>
    2324:	69 83       	std	Y+1, r22	; 0x01
    2326:	7a 83       	std	Y+2, r23	; 0x02
    2328:	8b 83       	std	Y+3, r24	; 0x03
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	9b 01       	movw	r18, r22
    232e:	ac 01       	movw	r20, r24
    2330:	c7 01       	movw	r24, r14
    2332:	b6 01       	movw	r22, r12
    2334:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cmpsf2>
    2338:	88 23       	and	r24, r24
    233a:	6c f5       	brge	.+90     	; 0x2396 <oled_write_line+0x268>
		{
			xpos+=dx_dy;
    233c:	2d 81       	ldd	r18, Y+5	; 0x05
    233e:	3e 81       	ldd	r19, Y+6	; 0x06
    2340:	4f 81       	ldd	r20, Y+7	; 0x07
    2342:	58 85       	ldd	r21, Y+8	; 0x08
    2344:	c5 01       	movw	r24, r10
    2346:	b4 01       	movw	r22, r8
    2348:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__addsf3>
    234c:	4b 01       	movw	r8, r22
    234e:	5c 01       	movw	r10, r24
			oled_write_pixel(xpos,ypos,1);
    2350:	c7 01       	movw	r24, r14
    2352:	b6 01       	movw	r22, r12
    2354:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
    2358:	2b 01       	movw	r4, r22
    235a:	3c 01       	movw	r6, r24
    235c:	c5 01       	movw	r24, r10
    235e:	b4 01       	movw	r22, r8
    2360:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fixsfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	b2 01       	movw	r22, r4
    236e:	0e 94 4c 10 	call	0x2098	; 0x2098 <oled_write_pixel>
		}
		
		float ypos = (float)y0;
		float xpos = (float)x0;
		oled_write_pixel(xpos,ypos,1);
		for (ypos; ypos < y1; ypos++)
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	c7 01       	movw	r24, r14
    237c:	b6 01       	movw	r22, r12
    237e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__addsf3>
    2382:	6b 01       	movw	r12, r22
    2384:	7c 01       	movw	r14, r24
    2386:	29 81       	ldd	r18, Y+1	; 0x01
    2388:	3a 81       	ldd	r19, Y+2	; 0x02
    238a:	4b 81       	ldd	r20, Y+3	; 0x03
    238c:	5c 81       	ldd	r21, Y+4	; 0x04
    238e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__cmpsf2>
    2392:	88 23       	and	r24, r24
    2394:	9c f2       	brlt	.-90     	; 0x233c <oled_write_line+0x20e>
		{
			xpos+=dx_dy;
			oled_write_pixel(xpos,ypos,1);
		}
	}
}
    2396:	28 96       	adiw	r28, 0x08	; 8
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	bf 90       	pop	r11
    23b4:	af 90       	pop	r10
    23b6:	9f 90       	pop	r9
    23b8:	8f 90       	pop	r8
    23ba:	7f 90       	pop	r7
    23bc:	6f 90       	pop	r6
    23be:	5f 90       	pop	r5
    23c0:	4f 90       	pop	r4
    23c2:	3f 90       	pop	r3
    23c4:	2f 90       	pop	r2
    23c6:	08 95       	ret

000023c8 <main>:
#include <avr/interrupt.h>


int main(void)
{ 
	printf("START\n");
    23c8:	89 e9       	ldi	r24, 0x99	; 153
    23ca:	92 e0       	ldi	r25, 0x02	; 2
    23cc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <puts>
	app_init(); //Initializes game
    23d0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <app_init>
	app_setup(); //Enter name, difficulty, etc
    23d4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <app_setup>
	while (1)
	{
		if(app_main_menu()) break; //Main menu before game start
    23d8:	0e 94 df 04 	call	0x9be	; 0x9be <app_main_menu>
    23dc:	89 2b       	or	r24, r25
    23de:	21 f4       	brne	.+8      	; 0x23e8 <main+0x20>
		//app_run();	//Runs the game/application
		if (app_round_review()) break;
    23e0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <app_round_review>
    23e4:	89 2b       	or	r24, r25
    23e6:	c1 f3       	breq	.-16     	; 0x23d8 <main+0x10>
	}
	app_goodbye_message();
    23e8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <app_goodbye_message>

}
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	08 95       	ret

000023f2 <opt_constr>:

//Previous input, hinders several inputs in short timespan
struct input prev_input;

void opt_constr(struct option *o, char *name, void (*a)())
{
    23f2:	fc 01       	movw	r30, r24
	//Sets initial name
	o->name = name;
    23f4:	71 83       	std	Z+1, r23	; 0x01
    23f6:	60 83       	st	Z, r22
	
	//Sets initial next pointer
	o->next = NULL;
    23f8:	15 82       	std	Z+5, r1	; 0x05
    23fa:	14 82       	std	Z+4, r1	; 0x04

	//Sets action
	o->action = a;
    23fc:	53 83       	std	Z+3, r21	; 0x03
    23fe:	42 83       	std	Z+2, r20	; 0x02
	
	//Sets submenu
	o->submenu = NULL;
    2400:	11 86       	std	Z+9, r1	; 0x09
    2402:	10 86       	std	Z+8, r1	; 0x08
    2404:	08 95       	ret

00002406 <menu_constr>:
}

void menu_constr(struct menu *m, char *name)
{
    2406:	fc 01       	movw	r30, r24
	//Resets headline
	m->headline = name;
    2408:	71 83       	std	Z+1, r23	; 0x01
    240a:	60 83       	st	Z, r22

	//Sets root node as NULL
	m->root_option = NULL;
    240c:	13 82       	std	Z+3, r1	; 0x03
    240e:	12 82       	std	Z+2, r1	; 0x02
	
	//Sets cursor position at start
	m->cursor_pos = 0;
    2410:	15 82       	std	Z+5, r1	; 0x05
    2412:	14 82       	std	Z+4, r1	; 0x04
	
	//Sets current menu pointer
	m->curr_menu = m;
    2414:	97 83       	std	Z+7, r25	; 0x07
    2416:	86 83       	std	Z+6, r24	; 0x06
	
	//Sets parent menu
	m->parent_menu = NULL;
    2418:	11 86       	std	Z+9, r1	; 0x09
    241a:	10 86       	std	Z+8, r1	; 0x08
    241c:	08 95       	ret

0000241e <menu_print>:
	
}

void menu_print(struct menu *m)
{
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	8c 01       	movw	r16, r24
	//Print headline
	oled_go_to(HEADLINE_START_COLUMN, HEADLINE_START_PAGE);
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	8a e0       	ldi	r24, 0x0A	; 10
    242e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	oled_cstring_write(m->curr_menu->headline,HEADLINE_SIZE);
    2432:	d8 01       	movw	r26, r16
    2434:	16 96       	adiw	r26, 0x06	; 6
    2436:	ed 91       	ld	r30, X+
    2438:	fc 91       	ld	r31, X
    243a:	17 97       	sbiw	r26, 0x07	; 7
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
	
	//Print option-nodes
	struct option *opt_element = m->curr_menu->root_option;
    2448:	d8 01       	movw	r26, r16
    244a:	16 96       	adiw	r26, 0x06	; 6
    244c:	ed 91       	ld	r30, X+
    244e:	fc 91       	ld	r31, X
    2450:	17 97       	sbiw	r26, 0x07	; 7
    2452:	c2 81       	ldd	r28, Z+2	; 0x02
    2454:	d3 81       	ldd	r29, Z+3	; 0x03
	uint8_t col_number = 0;
	
	while (opt_element != NULL)
    2456:	20 97       	sbiw	r28, 0x00	; 0
    2458:	99 f0       	breq	.+38     	; 0x2480 <menu_print+0x62>
    245a:	68 94       	set
    245c:	ff 24       	eor	r15, r15
    245e:	f1 f8       	bld	r15, 1
	{
		oled_go_to(OPTION_START_COLUMN, OPTION_START_PAGE+col_number);
    2460:	6f 2d       	mov	r22, r15
    2462:	84 e1       	ldi	r24, 0x14	; 20
    2464:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
		oled_cstring_write(opt_element->name,OPTION_SIZE);
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	88 81       	ld	r24, Y
    246e:	99 81       	ldd	r25, Y+1	; 0x01
    2470:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
		opt_element = opt_element->next;
    2474:	0c 80       	ldd	r0, Y+4	; 0x04
    2476:	dd 81       	ldd	r29, Y+5	; 0x05
    2478:	c0 2d       	mov	r28, r0
    247a:	f3 94       	inc	r15
	
	//Print option-nodes
	struct option *opt_element = m->curr_menu->root_option;
	uint8_t col_number = 0;
	
	while (opt_element != NULL)
    247c:	20 97       	sbiw	r28, 0x00	; 0
    247e:	81 f7       	brne	.-32     	; 0x2460 <menu_print+0x42>
		oled_cstring_write(opt_element->name,OPTION_SIZE);
		opt_element = opt_element->next;
		col_number += 1;
	}
	//Print Cursor
	oled_go_to(CURSOR_START_COLUMN,OPTION_START_PAGE+m->curr_menu->cursor_pos);
    2480:	d8 01       	movw	r26, r16
    2482:	16 96       	adiw	r26, 0x06	; 6
    2484:	ed 91       	ld	r30, X+
    2486:	fc 91       	ld	r31, X
    2488:	17 97       	sbiw	r26, 0x07	; 7
    248a:	64 81       	ldd	r22, Z+4	; 0x04
    248c:	6e 5f       	subi	r22, 0xFE	; 254
    248e:	8a e0       	ldi	r24, 0x0A	; 10
    2490:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <oled_go_to>
	oled_cstring_write(CURSOR_TYPE,OPTION_SIZE);
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	83 e6       	ldi	r24, 0x63	; 99
    249a:	91 e0       	ldi	r25, 0x01	; 1
    249c:	0e 94 20 10 	call	0x2040	; 0x2040 <oled_cstring_write>
	
}
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	08 95       	ret

000024ac <menu_count_options>:
}

int menu_count_options(struct menu *m)
{
	int number = 0;
	struct option *curr_option = m->root_option;
    24ac:	dc 01       	movw	r26, r24
    24ae:	12 96       	adiw	r26, 0x02	; 2
    24b0:	ed 91       	ld	r30, X+
    24b2:	fc 91       	ld	r31, X
    24b4:	13 97       	sbiw	r26, 0x03	; 3
	
	//Iterates through linked list
	while (curr_option != NULL)
    24b6:	30 97       	sbiw	r30, 0x00	; 0
    24b8:	49 f0       	breq	.+18     	; 0x24cc <menu_count_options+0x20>
	
}

int menu_count_options(struct menu *m)
{
	int number = 0;
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
	struct option *curr_option = m->root_option;
	
	//Iterates through linked list
	while (curr_option != NULL)
	{
		number += 1;
    24be:	01 96       	adiw	r24, 0x01	; 1
		curr_option = curr_option->next;
    24c0:	04 80       	ldd	r0, Z+4	; 0x04
    24c2:	f5 81       	ldd	r31, Z+5	; 0x05
    24c4:	e0 2d       	mov	r30, r0
{
	int number = 0;
	struct option *curr_option = m->root_option;
	
	//Iterates through linked list
	while (curr_option != NULL)
    24c6:	30 97       	sbiw	r30, 0x00	; 0
    24c8:	d1 f7       	brne	.-12     	; 0x24be <menu_count_options+0x12>
    24ca:	08 95       	ret
	
}

int menu_count_options(struct menu *m)
{
	int number = 0;
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
		number += 1;
		curr_option = curr_option->next;
	}
	
	return number;
}
    24d0:	08 95       	ret

000024d2 <menu_control>:
	oled_cstring_write(CURSOR_TYPE,OPTION_SIZE);
	
}

void menu_control(struct menu *m)
{
    24d2:	cf 92       	push	r12
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	6c 01       	movw	r12, r24
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
    24e4:	fc 01       	movw	r30, r24
    24e6:	06 81       	ldd	r16, Z+6	; 0x06
    24e8:	17 81       	ldd	r17, Z+7	; 0x07
	
	//Checks if something changed on screen (then we must refresh)
	int change = 0;
	
	//Moves cursor
	if (joystick_up()) //UP
    24ea:	0e 94 9b 0c 	call	0x1936	; 0x1936 <joystick_up>
    24ee:	89 2b       	or	r24, r25
    24f0:	69 f0       	breq	.+26     	; 0x250c <menu_control+0x3a>
	{
		if (current_menu->cursor_pos > 0) current_menu->cursor_pos -= 1;
    24f2:	f8 01       	movw	r30, r16
    24f4:	84 81       	ldd	r24, Z+4	; 0x04
    24f6:	95 81       	ldd	r25, Z+5	; 0x05
    24f8:	18 16       	cp	r1, r24
    24fa:	19 06       	cpc	r1, r25
    24fc:	ec f4       	brge	.+58     	; 0x2538 <menu_control+0x66>
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	95 83       	std	Z+5, r25	; 0x05
    2502:	84 83       	std	Z+4, r24	; 0x04
		change += 1;
    2504:	ee 24       	eor	r14, r14
    2506:	e3 94       	inc	r14
    2508:	f1 2c       	mov	r15, r1
    250a:	20 c0       	rjmp	.+64     	; 0x254c <menu_control+0x7a>
	}
	else if (joystick_down()) //DOWN
    250c:	0e 94 86 0c 	call	0x190c	; 0x190c <joystick_down>
    2510:	89 2b       	or	r24, r25
    2512:	b1 f0       	breq	.+44     	; 0x2540 <menu_control+0x6e>
	{
		if (current_menu->cursor_pos < menu_count_options(current_menu)-1)current_menu->cursor_pos += 1;
    2514:	f8 01       	movw	r30, r16
    2516:	c4 81       	ldd	r28, Z+4	; 0x04
    2518:	d5 81       	ldd	r29, Z+5	; 0x05
    251a:	c8 01       	movw	r24, r16
    251c:	0e 94 56 12 	call	0x24ac	; 0x24ac <menu_count_options>
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	c8 17       	cp	r28, r24
    2524:	d9 07       	cpc	r29, r25
    2526:	7c f4       	brge	.+30     	; 0x2546 <menu_control+0x74>
    2528:	21 96       	adiw	r28, 0x01	; 1
    252a:	f8 01       	movw	r30, r16
    252c:	d5 83       	std	Z+5, r29	; 0x05
    252e:	c4 83       	std	Z+4, r28	; 0x04
		change += 1;
    2530:	ee 24       	eor	r14, r14
    2532:	e3 94       	inc	r14
    2534:	f1 2c       	mov	r15, r1
    2536:	0a c0       	rjmp	.+20     	; 0x254c <menu_control+0x7a>
	
	//Moves cursor
	if (joystick_up()) //UP
	{
		if (current_menu->cursor_pos > 0) current_menu->cursor_pos -= 1;
		change += 1;
    2538:	ee 24       	eor	r14, r14
    253a:	e3 94       	inc	r14
    253c:	f1 2c       	mov	r15, r1
    253e:	06 c0       	rjmp	.+12     	; 0x254c <menu_control+0x7a>
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
	struct option *opt_element = m->curr_menu->root_option;
	
	//Checks if something changed on screen (then we must refresh)
	int change = 0;
    2540:	e1 2c       	mov	r14, r1
    2542:	f1 2c       	mov	r15, r1
    2544:	03 c0       	rjmp	.+6      	; 0x254c <menu_control+0x7a>
		change += 1;
	}
	else if (joystick_down()) //DOWN
	{
		if (current_menu->cursor_pos < menu_count_options(current_menu)-1)current_menu->cursor_pos += 1;
		change += 1;
    2546:	ee 24       	eor	r14, r14
    2548:	e3 94       	inc	r14
    254a:	f1 2c       	mov	r15, r1
	}
	
	if (joystick_right()) //ENTERS SUBMENU
    254c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <joystick_right>
    2550:	89 2b       	or	r24, r25
    2552:	11 f1       	breq	.+68     	; 0x2598 <menu_control+0xc6>
	{
		//Finds target option
		struct option *target = current_menu->root_option;
    2554:	f8 01       	movw	r30, r16
    2556:	c2 81       	ldd	r28, Z+2	; 0x02
    2558:	d3 81       	ldd	r29, Z+3	; 0x03
		
		if (target != NULL)
    255a:	20 97       	sbiw	r28, 0x00	; 0
    255c:	e9 f0       	breq	.+58     	; 0x2598 <menu_control+0xc6>
		{
			for (int i = 0; i < current_menu->cursor_pos; i++) target = target->next;
    255e:	44 81       	ldd	r20, Z+4	; 0x04
    2560:	55 81       	ldd	r21, Z+5	; 0x05
    2562:	14 16       	cp	r1, r20
    2564:	15 06       	cpc	r1, r21
    2566:	54 f4       	brge	.+20     	; 0x257c <menu_control+0xaa>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	0c 80       	ldd	r0, Y+4	; 0x04
    256e:	dd 81       	ldd	r29, Y+5	; 0x05
    2570:	c0 2d       	mov	r28, r0
    2572:	2f 5f       	subi	r18, 0xFF	; 255
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	24 17       	cp	r18, r20
    2578:	35 07       	cpc	r19, r21
    257a:	c1 f7       	brne	.-16     	; 0x256c <menu_control+0x9a>

			//Executes action
			if (target->action != NULL) target->action();
    257c:	ea 81       	ldd	r30, Y+2	; 0x02
    257e:	fb 81       	ldd	r31, Y+3	; 0x03
    2580:	30 97       	sbiw	r30, 0x00	; 0
    2582:	09 f0       	breq	.+2      	; 0x2586 <menu_control+0xb4>
    2584:	09 95       	icall
		
			//Enters submenu
			if (target->submenu != NULL) current_menu = target->submenu;
    2586:	88 85       	ldd	r24, Y+8	; 0x08
    2588:	99 85       	ldd	r25, Y+9	; 0x09
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	09 f4       	brne	.+2      	; 0x2590 <menu_control+0xbe>
}

void menu_control(struct menu *m)
{
	//We are working on what the current menu pointer is pointing at
	struct menu *current_menu = m->curr_menu;
    258e:	c8 01       	movw	r24, r16
			//Executes action
			if (target->action != NULL) target->action();
		
			//Enters submenu
			if (target->submenu != NULL) current_menu = target->submenu;
			change += 1;
    2590:	ff ef       	ldi	r31, 0xFF	; 255
    2592:	ef 1a       	sub	r14, r31
    2594:	ff 0a       	sbc	r15, r31
    2596:	8c 01       	movw	r16, r24
		}
		
	}
	
	if (joystick_left()) //Leaves submenu
    2598:	0e 94 af 0c 	call	0x195e	; 0x195e <joystick_left>
    259c:	89 2b       	or	r24, r25
    259e:	51 f0       	breq	.+20     	; 0x25b4 <menu_control+0xe2>
	{
		//Enters submenu
		if (current_menu->parent_menu != NULL ) current_menu = current_menu->parent_menu;
    25a0:	f8 01       	movw	r30, r16
    25a2:	80 85       	ldd	r24, Z+8	; 0x08
    25a4:	91 85       	ldd	r25, Z+9	; 0x09
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	09 f4       	brne	.+2      	; 0x25ac <menu_control+0xda>
    25aa:	c8 01       	movw	r24, r16
		change += 1;
    25ac:	ff ef       	ldi	r31, 0xFF	; 255
    25ae:	ef 1a       	sub	r14, r31
    25b0:	ff 0a       	sbc	r15, r31
    25b2:	8c 01       	movw	r16, r24
	}
	
	//Updates curr_menu pointer in main menu
	m->curr_menu = current_menu;
    25b4:	f6 01       	movw	r30, r12
    25b6:	17 83       	std	Z+7, r17	; 0x07
    25b8:	06 83       	std	Z+6, r16	; 0x06
	
	//Current input is now previous input
	prev_input = CURRENT_INPUT;
    25ba:	8e e0       	ldi	r24, 0x0E	; 14
    25bc:	ee ee       	ldi	r30, 0xEE	; 238
    25be:	f2 e0       	ldi	r31, 0x02	; 2
    25c0:	a6 e5       	ldi	r26, 0x56	; 86
    25c2:	b3 e0       	ldi	r27, 0x03	; 3
    25c4:	01 90       	ld	r0, Z+
    25c6:	0d 92       	st	X+, r0
    25c8:	8a 95       	dec	r24
    25ca:	e1 f7       	brne	.-8      	; 0x25c4 <menu_control+0xf2>
	
	if (change)
    25cc:	ef 28       	or	r14, r15
    25ce:	39 f0       	breq	.+14     	; 0x25de <menu_control+0x10c>
	{
		oled_clear_SRAM();
    25d0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <oled_clear_SRAM>
		menu_print(m->curr_menu);
    25d4:	f6 01       	movw	r30, r12
    25d6:	86 81       	ldd	r24, Z+6	; 0x06
    25d8:	97 81       	ldd	r25, Z+7	; 0x07
    25da:	0e 94 0f 12 	call	0x241e	; 0x241e <menu_print>
	}
	
	
	
}
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	08 95       	ret

000025f0 <__subsf3>:
    25f0:	50 58       	subi	r21, 0x80	; 128

000025f2 <__addsf3>:
    25f2:	bb 27       	eor	r27, r27
    25f4:	aa 27       	eor	r26, r26
    25f6:	0e d0       	rcall	.+28     	; 0x2614 <__addsf3x>
    25f8:	75 c1       	rjmp	.+746    	; 0x28e4 <__fp_round>
    25fa:	66 d1       	rcall	.+716    	; 0x28c8 <__fp_pscA>
    25fc:	30 f0       	brcs	.+12     	; 0x260a <__addsf3+0x18>
    25fe:	6b d1       	rcall	.+726    	; 0x28d6 <__fp_pscB>
    2600:	20 f0       	brcs	.+8      	; 0x260a <__addsf3+0x18>
    2602:	31 f4       	brne	.+12     	; 0x2610 <__addsf3+0x1e>
    2604:	9f 3f       	cpi	r25, 0xFF	; 255
    2606:	11 f4       	brne	.+4      	; 0x260c <__addsf3+0x1a>
    2608:	1e f4       	brtc	.+6      	; 0x2610 <__addsf3+0x1e>
    260a:	5b c1       	rjmp	.+694    	; 0x28c2 <__fp_nan>
    260c:	0e f4       	brtc	.+2      	; 0x2610 <__addsf3+0x1e>
    260e:	e0 95       	com	r30
    2610:	e7 fb       	bst	r30, 7
    2612:	51 c1       	rjmp	.+674    	; 0x28b6 <__fp_inf>

00002614 <__addsf3x>:
    2614:	e9 2f       	mov	r30, r25
    2616:	77 d1       	rcall	.+750    	; 0x2906 <__fp_split3>
    2618:	80 f3       	brcs	.-32     	; 0x25fa <__addsf3+0x8>
    261a:	ba 17       	cp	r27, r26
    261c:	62 07       	cpc	r22, r18
    261e:	73 07       	cpc	r23, r19
    2620:	84 07       	cpc	r24, r20
    2622:	95 07       	cpc	r25, r21
    2624:	18 f0       	brcs	.+6      	; 0x262c <__addsf3x+0x18>
    2626:	71 f4       	brne	.+28     	; 0x2644 <__addsf3x+0x30>
    2628:	9e f5       	brtc	.+102    	; 0x2690 <__addsf3x+0x7c>
    262a:	8f c1       	rjmp	.+798    	; 0x294a <__fp_zero>
    262c:	0e f4       	brtc	.+2      	; 0x2630 <__addsf3x+0x1c>
    262e:	e0 95       	com	r30
    2630:	0b 2e       	mov	r0, r27
    2632:	ba 2f       	mov	r27, r26
    2634:	a0 2d       	mov	r26, r0
    2636:	0b 01       	movw	r0, r22
    2638:	b9 01       	movw	r22, r18
    263a:	90 01       	movw	r18, r0
    263c:	0c 01       	movw	r0, r24
    263e:	ca 01       	movw	r24, r20
    2640:	a0 01       	movw	r20, r0
    2642:	11 24       	eor	r1, r1
    2644:	ff 27       	eor	r31, r31
    2646:	59 1b       	sub	r21, r25
    2648:	99 f0       	breq	.+38     	; 0x2670 <__addsf3x+0x5c>
    264a:	59 3f       	cpi	r21, 0xF9	; 249
    264c:	50 f4       	brcc	.+20     	; 0x2662 <__addsf3x+0x4e>
    264e:	50 3e       	cpi	r21, 0xE0	; 224
    2650:	68 f1       	brcs	.+90     	; 0x26ac <__addsf3x+0x98>
    2652:	1a 16       	cp	r1, r26
    2654:	f0 40       	sbci	r31, 0x00	; 0
    2656:	a2 2f       	mov	r26, r18
    2658:	23 2f       	mov	r18, r19
    265a:	34 2f       	mov	r19, r20
    265c:	44 27       	eor	r20, r20
    265e:	58 5f       	subi	r21, 0xF8	; 248
    2660:	f3 cf       	rjmp	.-26     	; 0x2648 <__addsf3x+0x34>
    2662:	46 95       	lsr	r20
    2664:	37 95       	ror	r19
    2666:	27 95       	ror	r18
    2668:	a7 95       	ror	r26
    266a:	f0 40       	sbci	r31, 0x00	; 0
    266c:	53 95       	inc	r21
    266e:	c9 f7       	brne	.-14     	; 0x2662 <__addsf3x+0x4e>
    2670:	7e f4       	brtc	.+30     	; 0x2690 <__addsf3x+0x7c>
    2672:	1f 16       	cp	r1, r31
    2674:	ba 0b       	sbc	r27, r26
    2676:	62 0b       	sbc	r22, r18
    2678:	73 0b       	sbc	r23, r19
    267a:	84 0b       	sbc	r24, r20
    267c:	ba f0       	brmi	.+46     	; 0x26ac <__addsf3x+0x98>
    267e:	91 50       	subi	r25, 0x01	; 1
    2680:	a1 f0       	breq	.+40     	; 0x26aa <__addsf3x+0x96>
    2682:	ff 0f       	add	r31, r31
    2684:	bb 1f       	adc	r27, r27
    2686:	66 1f       	adc	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	88 1f       	adc	r24, r24
    268c:	c2 f7       	brpl	.-16     	; 0x267e <__addsf3x+0x6a>
    268e:	0e c0       	rjmp	.+28     	; 0x26ac <__addsf3x+0x98>
    2690:	ba 0f       	add	r27, r26
    2692:	62 1f       	adc	r22, r18
    2694:	73 1f       	adc	r23, r19
    2696:	84 1f       	adc	r24, r20
    2698:	48 f4       	brcc	.+18     	; 0x26ac <__addsf3x+0x98>
    269a:	87 95       	ror	r24
    269c:	77 95       	ror	r23
    269e:	67 95       	ror	r22
    26a0:	b7 95       	ror	r27
    26a2:	f7 95       	ror	r31
    26a4:	9e 3f       	cpi	r25, 0xFE	; 254
    26a6:	08 f0       	brcs	.+2      	; 0x26aa <__addsf3x+0x96>
    26a8:	b3 cf       	rjmp	.-154    	; 0x2610 <__addsf3+0x1e>
    26aa:	93 95       	inc	r25
    26ac:	88 0f       	add	r24, r24
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <__addsf3x+0x9e>
    26b0:	99 27       	eor	r25, r25
    26b2:	ee 0f       	add	r30, r30
    26b4:	97 95       	ror	r25
    26b6:	87 95       	ror	r24
    26b8:	08 95       	ret

000026ba <__cmpsf2>:
    26ba:	d9 d0       	rcall	.+434    	; 0x286e <__fp_cmp>
    26bc:	08 f4       	brcc	.+2      	; 0x26c0 <__cmpsf2+0x6>
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	08 95       	ret

000026c2 <__divsf3>:
    26c2:	0c d0       	rcall	.+24     	; 0x26dc <__divsf3x>
    26c4:	0f c1       	rjmp	.+542    	; 0x28e4 <__fp_round>
    26c6:	07 d1       	rcall	.+526    	; 0x28d6 <__fp_pscB>
    26c8:	40 f0       	brcs	.+16     	; 0x26da <__divsf3+0x18>
    26ca:	fe d0       	rcall	.+508    	; 0x28c8 <__fp_pscA>
    26cc:	30 f0       	brcs	.+12     	; 0x26da <__divsf3+0x18>
    26ce:	21 f4       	brne	.+8      	; 0x26d8 <__divsf3+0x16>
    26d0:	5f 3f       	cpi	r21, 0xFF	; 255
    26d2:	19 f0       	breq	.+6      	; 0x26da <__divsf3+0x18>
    26d4:	f0 c0       	rjmp	.+480    	; 0x28b6 <__fp_inf>
    26d6:	51 11       	cpse	r21, r1
    26d8:	39 c1       	rjmp	.+626    	; 0x294c <__fp_szero>
    26da:	f3 c0       	rjmp	.+486    	; 0x28c2 <__fp_nan>

000026dc <__divsf3x>:
    26dc:	14 d1       	rcall	.+552    	; 0x2906 <__fp_split3>
    26de:	98 f3       	brcs	.-26     	; 0x26c6 <__divsf3+0x4>

000026e0 <__divsf3_pse>:
    26e0:	99 23       	and	r25, r25
    26e2:	c9 f3       	breq	.-14     	; 0x26d6 <__divsf3+0x14>
    26e4:	55 23       	and	r21, r21
    26e6:	b1 f3       	breq	.-20     	; 0x26d4 <__divsf3+0x12>
    26e8:	95 1b       	sub	r25, r21
    26ea:	55 0b       	sbc	r21, r21
    26ec:	bb 27       	eor	r27, r27
    26ee:	aa 27       	eor	r26, r26
    26f0:	62 17       	cp	r22, r18
    26f2:	73 07       	cpc	r23, r19
    26f4:	84 07       	cpc	r24, r20
    26f6:	38 f0       	brcs	.+14     	; 0x2706 <__divsf3_pse+0x26>
    26f8:	9f 5f       	subi	r25, 0xFF	; 255
    26fa:	5f 4f       	sbci	r21, 0xFF	; 255
    26fc:	22 0f       	add	r18, r18
    26fe:	33 1f       	adc	r19, r19
    2700:	44 1f       	adc	r20, r20
    2702:	aa 1f       	adc	r26, r26
    2704:	a9 f3       	breq	.-22     	; 0x26f0 <__divsf3_pse+0x10>
    2706:	33 d0       	rcall	.+102    	; 0x276e <__divsf3_pse+0x8e>
    2708:	0e 2e       	mov	r0, r30
    270a:	3a f0       	brmi	.+14     	; 0x271a <__divsf3_pse+0x3a>
    270c:	e0 e8       	ldi	r30, 0x80	; 128
    270e:	30 d0       	rcall	.+96     	; 0x2770 <__divsf3_pse+0x90>
    2710:	91 50       	subi	r25, 0x01	; 1
    2712:	50 40       	sbci	r21, 0x00	; 0
    2714:	e6 95       	lsr	r30
    2716:	00 1c       	adc	r0, r0
    2718:	ca f7       	brpl	.-14     	; 0x270c <__divsf3_pse+0x2c>
    271a:	29 d0       	rcall	.+82     	; 0x276e <__divsf3_pse+0x8e>
    271c:	fe 2f       	mov	r31, r30
    271e:	27 d0       	rcall	.+78     	; 0x276e <__divsf3_pse+0x8e>
    2720:	66 0f       	add	r22, r22
    2722:	77 1f       	adc	r23, r23
    2724:	88 1f       	adc	r24, r24
    2726:	bb 1f       	adc	r27, r27
    2728:	26 17       	cp	r18, r22
    272a:	37 07       	cpc	r19, r23
    272c:	48 07       	cpc	r20, r24
    272e:	ab 07       	cpc	r26, r27
    2730:	b0 e8       	ldi	r27, 0x80	; 128
    2732:	09 f0       	breq	.+2      	; 0x2736 <__divsf3_pse+0x56>
    2734:	bb 0b       	sbc	r27, r27
    2736:	80 2d       	mov	r24, r0
    2738:	bf 01       	movw	r22, r30
    273a:	ff 27       	eor	r31, r31
    273c:	93 58       	subi	r25, 0x83	; 131
    273e:	5f 4f       	sbci	r21, 0xFF	; 255
    2740:	2a f0       	brmi	.+10     	; 0x274c <__divsf3_pse+0x6c>
    2742:	9e 3f       	cpi	r25, 0xFE	; 254
    2744:	51 05       	cpc	r21, r1
    2746:	68 f0       	brcs	.+26     	; 0x2762 <__divsf3_pse+0x82>
    2748:	b6 c0       	rjmp	.+364    	; 0x28b6 <__fp_inf>
    274a:	00 c1       	rjmp	.+512    	; 0x294c <__fp_szero>
    274c:	5f 3f       	cpi	r21, 0xFF	; 255
    274e:	ec f3       	brlt	.-6      	; 0x274a <__divsf3_pse+0x6a>
    2750:	98 3e       	cpi	r25, 0xE8	; 232
    2752:	dc f3       	brlt	.-10     	; 0x274a <__divsf3_pse+0x6a>
    2754:	86 95       	lsr	r24
    2756:	77 95       	ror	r23
    2758:	67 95       	ror	r22
    275a:	b7 95       	ror	r27
    275c:	f7 95       	ror	r31
    275e:	9f 5f       	subi	r25, 0xFF	; 255
    2760:	c9 f7       	brne	.-14     	; 0x2754 <__divsf3_pse+0x74>
    2762:	88 0f       	add	r24, r24
    2764:	91 1d       	adc	r25, r1
    2766:	96 95       	lsr	r25
    2768:	87 95       	ror	r24
    276a:	97 f9       	bld	r25, 7
    276c:	08 95       	ret
    276e:	e1 e0       	ldi	r30, 0x01	; 1
    2770:	66 0f       	add	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	88 1f       	adc	r24, r24
    2776:	bb 1f       	adc	r27, r27
    2778:	62 17       	cp	r22, r18
    277a:	73 07       	cpc	r23, r19
    277c:	84 07       	cpc	r24, r20
    277e:	ba 07       	cpc	r27, r26
    2780:	20 f0       	brcs	.+8      	; 0x278a <__divsf3_pse+0xaa>
    2782:	62 1b       	sub	r22, r18
    2784:	73 0b       	sbc	r23, r19
    2786:	84 0b       	sbc	r24, r20
    2788:	ba 0b       	sbc	r27, r26
    278a:	ee 1f       	adc	r30, r30
    278c:	88 f7       	brcc	.-30     	; 0x2770 <__divsf3_pse+0x90>
    278e:	e0 95       	com	r30
    2790:	08 95       	ret

00002792 <__fixsfsi>:
    2792:	04 d0       	rcall	.+8      	; 0x279c <__fixunssfsi>
    2794:	68 94       	set
    2796:	b1 11       	cpse	r27, r1
    2798:	d9 c0       	rjmp	.+434    	; 0x294c <__fp_szero>
    279a:	08 95       	ret

0000279c <__fixunssfsi>:
    279c:	bc d0       	rcall	.+376    	; 0x2916 <__fp_splitA>
    279e:	88 f0       	brcs	.+34     	; 0x27c2 <__fixunssfsi+0x26>
    27a0:	9f 57       	subi	r25, 0x7F	; 127
    27a2:	90 f0       	brcs	.+36     	; 0x27c8 <__fixunssfsi+0x2c>
    27a4:	b9 2f       	mov	r27, r25
    27a6:	99 27       	eor	r25, r25
    27a8:	b7 51       	subi	r27, 0x17	; 23
    27aa:	a0 f0       	brcs	.+40     	; 0x27d4 <__fixunssfsi+0x38>
    27ac:	d1 f0       	breq	.+52     	; 0x27e2 <__fixunssfsi+0x46>
    27ae:	66 0f       	add	r22, r22
    27b0:	77 1f       	adc	r23, r23
    27b2:	88 1f       	adc	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	1a f0       	brmi	.+6      	; 0x27be <__fixunssfsi+0x22>
    27b8:	ba 95       	dec	r27
    27ba:	c9 f7       	brne	.-14     	; 0x27ae <__fixunssfsi+0x12>
    27bc:	12 c0       	rjmp	.+36     	; 0x27e2 <__fixunssfsi+0x46>
    27be:	b1 30       	cpi	r27, 0x01	; 1
    27c0:	81 f0       	breq	.+32     	; 0x27e2 <__fixunssfsi+0x46>
    27c2:	c3 d0       	rcall	.+390    	; 0x294a <__fp_zero>
    27c4:	b1 e0       	ldi	r27, 0x01	; 1
    27c6:	08 95       	ret
    27c8:	c0 c0       	rjmp	.+384    	; 0x294a <__fp_zero>
    27ca:	67 2f       	mov	r22, r23
    27cc:	78 2f       	mov	r23, r24
    27ce:	88 27       	eor	r24, r24
    27d0:	b8 5f       	subi	r27, 0xF8	; 248
    27d2:	39 f0       	breq	.+14     	; 0x27e2 <__fixunssfsi+0x46>
    27d4:	b9 3f       	cpi	r27, 0xF9	; 249
    27d6:	cc f3       	brlt	.-14     	; 0x27ca <__fixunssfsi+0x2e>
    27d8:	86 95       	lsr	r24
    27da:	77 95       	ror	r23
    27dc:	67 95       	ror	r22
    27de:	b3 95       	inc	r27
    27e0:	d9 f7       	brne	.-10     	; 0x27d8 <__fixunssfsi+0x3c>
    27e2:	3e f4       	brtc	.+14     	; 0x27f2 <__fixunssfsi+0x56>
    27e4:	90 95       	com	r25
    27e6:	80 95       	com	r24
    27e8:	70 95       	com	r23
    27ea:	61 95       	neg	r22
    27ec:	7f 4f       	sbci	r23, 0xFF	; 255
    27ee:	8f 4f       	sbci	r24, 0xFF	; 255
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	08 95       	ret

000027f4 <__floatunsisf>:
    27f4:	e8 94       	clt
    27f6:	09 c0       	rjmp	.+18     	; 0x280a <__floatsisf+0x12>

000027f8 <__floatsisf>:
    27f8:	97 fb       	bst	r25, 7
    27fa:	3e f4       	brtc	.+14     	; 0x280a <__floatsisf+0x12>
    27fc:	90 95       	com	r25
    27fe:	80 95       	com	r24
    2800:	70 95       	com	r23
    2802:	61 95       	neg	r22
    2804:	7f 4f       	sbci	r23, 0xFF	; 255
    2806:	8f 4f       	sbci	r24, 0xFF	; 255
    2808:	9f 4f       	sbci	r25, 0xFF	; 255
    280a:	99 23       	and	r25, r25
    280c:	a9 f0       	breq	.+42     	; 0x2838 <__floatsisf+0x40>
    280e:	f9 2f       	mov	r31, r25
    2810:	96 e9       	ldi	r25, 0x96	; 150
    2812:	bb 27       	eor	r27, r27
    2814:	93 95       	inc	r25
    2816:	f6 95       	lsr	r31
    2818:	87 95       	ror	r24
    281a:	77 95       	ror	r23
    281c:	67 95       	ror	r22
    281e:	b7 95       	ror	r27
    2820:	f1 11       	cpse	r31, r1
    2822:	f8 cf       	rjmp	.-16     	; 0x2814 <__floatsisf+0x1c>
    2824:	fa f4       	brpl	.+62     	; 0x2864 <__floatsisf+0x6c>
    2826:	bb 0f       	add	r27, r27
    2828:	11 f4       	brne	.+4      	; 0x282e <__floatsisf+0x36>
    282a:	60 ff       	sbrs	r22, 0
    282c:	1b c0       	rjmp	.+54     	; 0x2864 <__floatsisf+0x6c>
    282e:	6f 5f       	subi	r22, 0xFF	; 255
    2830:	7f 4f       	sbci	r23, 0xFF	; 255
    2832:	8f 4f       	sbci	r24, 0xFF	; 255
    2834:	9f 4f       	sbci	r25, 0xFF	; 255
    2836:	16 c0       	rjmp	.+44     	; 0x2864 <__floatsisf+0x6c>
    2838:	88 23       	and	r24, r24
    283a:	11 f0       	breq	.+4      	; 0x2840 <__floatsisf+0x48>
    283c:	96 e9       	ldi	r25, 0x96	; 150
    283e:	11 c0       	rjmp	.+34     	; 0x2862 <__floatsisf+0x6a>
    2840:	77 23       	and	r23, r23
    2842:	21 f0       	breq	.+8      	; 0x284c <__floatsisf+0x54>
    2844:	9e e8       	ldi	r25, 0x8E	; 142
    2846:	87 2f       	mov	r24, r23
    2848:	76 2f       	mov	r23, r22
    284a:	05 c0       	rjmp	.+10     	; 0x2856 <__floatsisf+0x5e>
    284c:	66 23       	and	r22, r22
    284e:	71 f0       	breq	.+28     	; 0x286c <__floatsisf+0x74>
    2850:	96 e8       	ldi	r25, 0x86	; 134
    2852:	86 2f       	mov	r24, r22
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	2a f0       	brmi	.+10     	; 0x2864 <__floatsisf+0x6c>
    285a:	9a 95       	dec	r25
    285c:	66 0f       	add	r22, r22
    285e:	77 1f       	adc	r23, r23
    2860:	88 1f       	adc	r24, r24
    2862:	da f7       	brpl	.-10     	; 0x285a <__floatsisf+0x62>
    2864:	88 0f       	add	r24, r24
    2866:	96 95       	lsr	r25
    2868:	87 95       	ror	r24
    286a:	97 f9       	bld	r25, 7
    286c:	08 95       	ret

0000286e <__fp_cmp>:
    286e:	99 0f       	add	r25, r25
    2870:	00 08       	sbc	r0, r0
    2872:	55 0f       	add	r21, r21
    2874:	aa 0b       	sbc	r26, r26
    2876:	e0 e8       	ldi	r30, 0x80	; 128
    2878:	fe ef       	ldi	r31, 0xFE	; 254
    287a:	16 16       	cp	r1, r22
    287c:	17 06       	cpc	r1, r23
    287e:	e8 07       	cpc	r30, r24
    2880:	f9 07       	cpc	r31, r25
    2882:	c0 f0       	brcs	.+48     	; 0x28b4 <__fp_cmp+0x46>
    2884:	12 16       	cp	r1, r18
    2886:	13 06       	cpc	r1, r19
    2888:	e4 07       	cpc	r30, r20
    288a:	f5 07       	cpc	r31, r21
    288c:	98 f0       	brcs	.+38     	; 0x28b4 <__fp_cmp+0x46>
    288e:	62 1b       	sub	r22, r18
    2890:	73 0b       	sbc	r23, r19
    2892:	84 0b       	sbc	r24, r20
    2894:	95 0b       	sbc	r25, r21
    2896:	39 f4       	brne	.+14     	; 0x28a6 <__fp_cmp+0x38>
    2898:	0a 26       	eor	r0, r26
    289a:	61 f0       	breq	.+24     	; 0x28b4 <__fp_cmp+0x46>
    289c:	23 2b       	or	r18, r19
    289e:	24 2b       	or	r18, r20
    28a0:	25 2b       	or	r18, r21
    28a2:	21 f4       	brne	.+8      	; 0x28ac <__fp_cmp+0x3e>
    28a4:	08 95       	ret
    28a6:	0a 26       	eor	r0, r26
    28a8:	09 f4       	brne	.+2      	; 0x28ac <__fp_cmp+0x3e>
    28aa:	a1 40       	sbci	r26, 0x01	; 1
    28ac:	a6 95       	lsr	r26
    28ae:	8f ef       	ldi	r24, 0xFF	; 255
    28b0:	81 1d       	adc	r24, r1
    28b2:	81 1d       	adc	r24, r1
    28b4:	08 95       	ret

000028b6 <__fp_inf>:
    28b6:	97 f9       	bld	r25, 7
    28b8:	9f 67       	ori	r25, 0x7F	; 127
    28ba:	80 e8       	ldi	r24, 0x80	; 128
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	08 95       	ret

000028c2 <__fp_nan>:
    28c2:	9f ef       	ldi	r25, 0xFF	; 255
    28c4:	80 ec       	ldi	r24, 0xC0	; 192
    28c6:	08 95       	ret

000028c8 <__fp_pscA>:
    28c8:	00 24       	eor	r0, r0
    28ca:	0a 94       	dec	r0
    28cc:	16 16       	cp	r1, r22
    28ce:	17 06       	cpc	r1, r23
    28d0:	18 06       	cpc	r1, r24
    28d2:	09 06       	cpc	r0, r25
    28d4:	08 95       	ret

000028d6 <__fp_pscB>:
    28d6:	00 24       	eor	r0, r0
    28d8:	0a 94       	dec	r0
    28da:	12 16       	cp	r1, r18
    28dc:	13 06       	cpc	r1, r19
    28de:	14 06       	cpc	r1, r20
    28e0:	05 06       	cpc	r0, r21
    28e2:	08 95       	ret

000028e4 <__fp_round>:
    28e4:	09 2e       	mov	r0, r25
    28e6:	03 94       	inc	r0
    28e8:	00 0c       	add	r0, r0
    28ea:	11 f4       	brne	.+4      	; 0x28f0 <__fp_round+0xc>
    28ec:	88 23       	and	r24, r24
    28ee:	52 f0       	brmi	.+20     	; 0x2904 <__fp_round+0x20>
    28f0:	bb 0f       	add	r27, r27
    28f2:	40 f4       	brcc	.+16     	; 0x2904 <__fp_round+0x20>
    28f4:	bf 2b       	or	r27, r31
    28f6:	11 f4       	brne	.+4      	; 0x28fc <__fp_round+0x18>
    28f8:	60 ff       	sbrs	r22, 0
    28fa:	04 c0       	rjmp	.+8      	; 0x2904 <__fp_round+0x20>
    28fc:	6f 5f       	subi	r22, 0xFF	; 255
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	8f 4f       	sbci	r24, 0xFF	; 255
    2902:	9f 4f       	sbci	r25, 0xFF	; 255
    2904:	08 95       	ret

00002906 <__fp_split3>:
    2906:	57 fd       	sbrc	r21, 7
    2908:	90 58       	subi	r25, 0x80	; 128
    290a:	44 0f       	add	r20, r20
    290c:	55 1f       	adc	r21, r21
    290e:	59 f0       	breq	.+22     	; 0x2926 <__fp_splitA+0x10>
    2910:	5f 3f       	cpi	r21, 0xFF	; 255
    2912:	71 f0       	breq	.+28     	; 0x2930 <__fp_splitA+0x1a>
    2914:	47 95       	ror	r20

00002916 <__fp_splitA>:
    2916:	88 0f       	add	r24, r24
    2918:	97 fb       	bst	r25, 7
    291a:	99 1f       	adc	r25, r25
    291c:	61 f0       	breq	.+24     	; 0x2936 <__fp_splitA+0x20>
    291e:	9f 3f       	cpi	r25, 0xFF	; 255
    2920:	79 f0       	breq	.+30     	; 0x2940 <__fp_splitA+0x2a>
    2922:	87 95       	ror	r24
    2924:	08 95       	ret
    2926:	12 16       	cp	r1, r18
    2928:	13 06       	cpc	r1, r19
    292a:	14 06       	cpc	r1, r20
    292c:	55 1f       	adc	r21, r21
    292e:	f2 cf       	rjmp	.-28     	; 0x2914 <__fp_split3+0xe>
    2930:	46 95       	lsr	r20
    2932:	f1 df       	rcall	.-30     	; 0x2916 <__fp_splitA>
    2934:	08 c0       	rjmp	.+16     	; 0x2946 <__fp_splitA+0x30>
    2936:	16 16       	cp	r1, r22
    2938:	17 06       	cpc	r1, r23
    293a:	18 06       	cpc	r1, r24
    293c:	99 1f       	adc	r25, r25
    293e:	f1 cf       	rjmp	.-30     	; 0x2922 <__fp_splitA+0xc>
    2940:	86 95       	lsr	r24
    2942:	71 05       	cpc	r23, r1
    2944:	61 05       	cpc	r22, r1
    2946:	08 94       	sec
    2948:	08 95       	ret

0000294a <__fp_zero>:
    294a:	e8 94       	clt

0000294c <__fp_szero>:
    294c:	bb 27       	eor	r27, r27
    294e:	66 27       	eor	r22, r22
    2950:	77 27       	eor	r23, r23
    2952:	cb 01       	movw	r24, r22
    2954:	97 f9       	bld	r25, 7
    2956:	08 95       	ret

00002958 <__gesf2>:
    2958:	8a df       	rcall	.-236    	; 0x286e <__fp_cmp>
    295a:	08 f4       	brcc	.+2      	; 0x295e <__gesf2+0x6>
    295c:	8f ef       	ldi	r24, 0xFF	; 255
    295e:	08 95       	ret

00002960 <__mulsf3>:
    2960:	0b d0       	rcall	.+22     	; 0x2978 <__mulsf3x>
    2962:	c0 cf       	rjmp	.-128    	; 0x28e4 <__fp_round>
    2964:	b1 df       	rcall	.-158    	; 0x28c8 <__fp_pscA>
    2966:	28 f0       	brcs	.+10     	; 0x2972 <__mulsf3+0x12>
    2968:	b6 df       	rcall	.-148    	; 0x28d6 <__fp_pscB>
    296a:	18 f0       	brcs	.+6      	; 0x2972 <__mulsf3+0x12>
    296c:	95 23       	and	r25, r21
    296e:	09 f0       	breq	.+2      	; 0x2972 <__mulsf3+0x12>
    2970:	a2 cf       	rjmp	.-188    	; 0x28b6 <__fp_inf>
    2972:	a7 cf       	rjmp	.-178    	; 0x28c2 <__fp_nan>
    2974:	11 24       	eor	r1, r1
    2976:	ea cf       	rjmp	.-44     	; 0x294c <__fp_szero>

00002978 <__mulsf3x>:
    2978:	c6 df       	rcall	.-116    	; 0x2906 <__fp_split3>
    297a:	a0 f3       	brcs	.-24     	; 0x2964 <__mulsf3+0x4>

0000297c <__mulsf3_pse>:
    297c:	95 9f       	mul	r25, r21
    297e:	d1 f3       	breq	.-12     	; 0x2974 <__mulsf3+0x14>
    2980:	95 0f       	add	r25, r21
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	55 1f       	adc	r21, r21
    2986:	62 9f       	mul	r22, r18
    2988:	f0 01       	movw	r30, r0
    298a:	72 9f       	mul	r23, r18
    298c:	bb 27       	eor	r27, r27
    298e:	f0 0d       	add	r31, r0
    2990:	b1 1d       	adc	r27, r1
    2992:	63 9f       	mul	r22, r19
    2994:	aa 27       	eor	r26, r26
    2996:	f0 0d       	add	r31, r0
    2998:	b1 1d       	adc	r27, r1
    299a:	aa 1f       	adc	r26, r26
    299c:	64 9f       	mul	r22, r20
    299e:	66 27       	eor	r22, r22
    29a0:	b0 0d       	add	r27, r0
    29a2:	a1 1d       	adc	r26, r1
    29a4:	66 1f       	adc	r22, r22
    29a6:	82 9f       	mul	r24, r18
    29a8:	22 27       	eor	r18, r18
    29aa:	b0 0d       	add	r27, r0
    29ac:	a1 1d       	adc	r26, r1
    29ae:	62 1f       	adc	r22, r18
    29b0:	73 9f       	mul	r23, r19
    29b2:	b0 0d       	add	r27, r0
    29b4:	a1 1d       	adc	r26, r1
    29b6:	62 1f       	adc	r22, r18
    29b8:	83 9f       	mul	r24, r19
    29ba:	a0 0d       	add	r26, r0
    29bc:	61 1d       	adc	r22, r1
    29be:	22 1f       	adc	r18, r18
    29c0:	74 9f       	mul	r23, r20
    29c2:	33 27       	eor	r19, r19
    29c4:	a0 0d       	add	r26, r0
    29c6:	61 1d       	adc	r22, r1
    29c8:	23 1f       	adc	r18, r19
    29ca:	84 9f       	mul	r24, r20
    29cc:	60 0d       	add	r22, r0
    29ce:	21 1d       	adc	r18, r1
    29d0:	82 2f       	mov	r24, r18
    29d2:	76 2f       	mov	r23, r22
    29d4:	6a 2f       	mov	r22, r26
    29d6:	11 24       	eor	r1, r1
    29d8:	9f 57       	subi	r25, 0x7F	; 127
    29da:	50 40       	sbci	r21, 0x00	; 0
    29dc:	8a f0       	brmi	.+34     	; 0x2a00 <__mulsf3_pse+0x84>
    29de:	e1 f0       	breq	.+56     	; 0x2a18 <__mulsf3_pse+0x9c>
    29e0:	88 23       	and	r24, r24
    29e2:	4a f0       	brmi	.+18     	; 0x29f6 <__mulsf3_pse+0x7a>
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	bb 1f       	adc	r27, r27
    29ea:	66 1f       	adc	r22, r22
    29ec:	77 1f       	adc	r23, r23
    29ee:	88 1f       	adc	r24, r24
    29f0:	91 50       	subi	r25, 0x01	; 1
    29f2:	50 40       	sbci	r21, 0x00	; 0
    29f4:	a9 f7       	brne	.-22     	; 0x29e0 <__mulsf3_pse+0x64>
    29f6:	9e 3f       	cpi	r25, 0xFE	; 254
    29f8:	51 05       	cpc	r21, r1
    29fa:	70 f0       	brcs	.+28     	; 0x2a18 <__mulsf3_pse+0x9c>
    29fc:	5c cf       	rjmp	.-328    	; 0x28b6 <__fp_inf>
    29fe:	a6 cf       	rjmp	.-180    	; 0x294c <__fp_szero>
    2a00:	5f 3f       	cpi	r21, 0xFF	; 255
    2a02:	ec f3       	brlt	.-6      	; 0x29fe <__mulsf3_pse+0x82>
    2a04:	98 3e       	cpi	r25, 0xE8	; 232
    2a06:	dc f3       	brlt	.-10     	; 0x29fe <__mulsf3_pse+0x82>
    2a08:	86 95       	lsr	r24
    2a0a:	77 95       	ror	r23
    2a0c:	67 95       	ror	r22
    2a0e:	b7 95       	ror	r27
    2a10:	f7 95       	ror	r31
    2a12:	e7 95       	ror	r30
    2a14:	9f 5f       	subi	r25, 0xFF	; 255
    2a16:	c1 f7       	brne	.-16     	; 0x2a08 <__mulsf3_pse+0x8c>
    2a18:	fe 2b       	or	r31, r30
    2a1a:	88 0f       	add	r24, r24
    2a1c:	91 1d       	adc	r25, r1
    2a1e:	96 95       	lsr	r25
    2a20:	87 95       	ror	r24
    2a22:	97 f9       	bld	r25, 7
    2a24:	08 95       	ret

00002a26 <__udivmodsi4>:
    2a26:	a1 e2       	ldi	r26, 0x21	; 33
    2a28:	1a 2e       	mov	r1, r26
    2a2a:	aa 1b       	sub	r26, r26
    2a2c:	bb 1b       	sub	r27, r27
    2a2e:	fd 01       	movw	r30, r26
    2a30:	0d c0       	rjmp	.+26     	; 0x2a4c <__udivmodsi4_ep>

00002a32 <__udivmodsi4_loop>:
    2a32:	aa 1f       	adc	r26, r26
    2a34:	bb 1f       	adc	r27, r27
    2a36:	ee 1f       	adc	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	a2 17       	cp	r26, r18
    2a3c:	b3 07       	cpc	r27, r19
    2a3e:	e4 07       	cpc	r30, r20
    2a40:	f5 07       	cpc	r31, r21
    2a42:	20 f0       	brcs	.+8      	; 0x2a4c <__udivmodsi4_ep>
    2a44:	a2 1b       	sub	r26, r18
    2a46:	b3 0b       	sbc	r27, r19
    2a48:	e4 0b       	sbc	r30, r20
    2a4a:	f5 0b       	sbc	r31, r21

00002a4c <__udivmodsi4_ep>:
    2a4c:	66 1f       	adc	r22, r22
    2a4e:	77 1f       	adc	r23, r23
    2a50:	88 1f       	adc	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	1a 94       	dec	r1
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <__udivmodsi4_loop>
    2a58:	60 95       	com	r22
    2a5a:	70 95       	com	r23
    2a5c:	80 95       	com	r24
    2a5e:	90 95       	com	r25
    2a60:	9b 01       	movw	r18, r22
    2a62:	ac 01       	movw	r20, r24
    2a64:	bd 01       	movw	r22, r26
    2a66:	cf 01       	movw	r24, r30
    2a68:	08 95       	ret

00002a6a <__divmodsi4>:
    2a6a:	05 2e       	mov	r0, r21
    2a6c:	97 fb       	bst	r25, 7
    2a6e:	1e f4       	brtc	.+6      	; 0x2a76 <__divmodsi4+0xc>
    2a70:	00 94       	com	r0
    2a72:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__negsi2>
    2a76:	57 fd       	sbrc	r21, 7
    2a78:	07 d0       	rcall	.+14     	; 0x2a88 <__divmodsi4_neg2>
    2a7a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__udivmodsi4>
    2a7e:	07 fc       	sbrc	r0, 7
    2a80:	03 d0       	rcall	.+6      	; 0x2a88 <__divmodsi4_neg2>
    2a82:	4e f4       	brtc	.+18     	; 0x2a96 <__divmodsi4_exit>
    2a84:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__negsi2>

00002a88 <__divmodsi4_neg2>:
    2a88:	50 95       	com	r21
    2a8a:	40 95       	com	r20
    2a8c:	30 95       	com	r19
    2a8e:	21 95       	neg	r18
    2a90:	3f 4f       	sbci	r19, 0xFF	; 255
    2a92:	4f 4f       	sbci	r20, 0xFF	; 255
    2a94:	5f 4f       	sbci	r21, 0xFF	; 255

00002a96 <__divmodsi4_exit>:
    2a96:	08 95       	ret

00002a98 <__negsi2>:
    2a98:	90 95       	com	r25
    2a9a:	80 95       	com	r24
    2a9c:	70 95       	com	r23
    2a9e:	61 95       	neg	r22
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	08 95       	ret

00002aa8 <puts>:
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	e0 91 66 03 	lds	r30, 0x0366
    2ab4:	f0 91 67 03 	lds	r31, 0x0367
    2ab8:	23 81       	ldd	r18, Z+3	; 0x03
    2aba:	21 ff       	sbrs	r18, 1
    2abc:	1b c0       	rjmp	.+54     	; 0x2af4 <puts+0x4c>
    2abe:	ec 01       	movw	r28, r24
    2ac0:	00 e0       	ldi	r16, 0x00	; 0
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	89 91       	ld	r24, Y+
    2ac6:	60 91 66 03 	lds	r22, 0x0366
    2aca:	70 91 67 03 	lds	r23, 0x0367
    2ace:	db 01       	movw	r26, r22
    2ad0:	18 96       	adiw	r26, 0x08	; 8
    2ad2:	ed 91       	ld	r30, X+
    2ad4:	fc 91       	ld	r31, X
    2ad6:	19 97       	sbiw	r26, 0x09	; 9
    2ad8:	88 23       	and	r24, r24
    2ada:	31 f0       	breq	.+12     	; 0x2ae8 <puts+0x40>
    2adc:	09 95       	icall
    2ade:	89 2b       	or	r24, r25
    2ae0:	89 f3       	breq	.-30     	; 0x2ac4 <puts+0x1c>
    2ae2:	0f ef       	ldi	r16, 0xFF	; 255
    2ae4:	1f ef       	ldi	r17, 0xFF	; 255
    2ae6:	ee cf       	rjmp	.-36     	; 0x2ac4 <puts+0x1c>
    2ae8:	8a e0       	ldi	r24, 0x0A	; 10
    2aea:	09 95       	icall
    2aec:	89 2b       	or	r24, r25
    2aee:	11 f4       	brne	.+4      	; 0x2af4 <puts+0x4c>
    2af0:	c8 01       	movw	r24, r16
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <puts+0x50>
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	9f ef       	ldi	r25, 0xFF	; 255
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <sprintf>:
    2b02:	ae e0       	ldi	r26, 0x0E	; 14
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e7 e8       	ldi	r30, 0x87	; 135
    2b08:	f5 e1       	ldi	r31, 0x15	; 21
    2b0a:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__prologue_saves__+0x1c>
    2b0e:	0d 89       	ldd	r16, Y+21	; 0x15
    2b10:	1e 89       	ldd	r17, Y+22	; 0x16
    2b12:	86 e0       	ldi	r24, 0x06	; 6
    2b14:	8c 83       	std	Y+4, r24	; 0x04
    2b16:	1a 83       	std	Y+2, r17	; 0x02
    2b18:	09 83       	std	Y+1, r16	; 0x01
    2b1a:	8f ef       	ldi	r24, 0xFF	; 255
    2b1c:	9f e7       	ldi	r25, 0x7F	; 127
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	ae 01       	movw	r20, r28
    2b24:	47 5e       	subi	r20, 0xE7	; 231
    2b26:	5f 4f       	sbci	r21, 0xFF	; 255
    2b28:	6f 89       	ldd	r22, Y+23	; 0x17
    2b2a:	78 8d       	ldd	r23, Y+24	; 0x18
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <vfprintf>
    2b34:	ef 81       	ldd	r30, Y+7	; 0x07
    2b36:	f8 85       	ldd	r31, Y+8	; 0x08
    2b38:	e0 0f       	add	r30, r16
    2b3a:	f1 1f       	adc	r31, r17
    2b3c:	10 82       	st	Z, r1
    2b3e:	2e 96       	adiw	r28, 0x0e	; 14
    2b40:	e4 e0       	ldi	r30, 0x04	; 4
    2b42:	0c 94 45 18 	jmp	0x308a	; 0x308a <__epilogue_restores__+0x1c>

00002b46 <vfprintf>:
    2b46:	ac e0       	ldi	r26, 0x0C	; 12
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e9 ea       	ldi	r30, 0xA9	; 169
    2b4c:	f5 e1       	ldi	r31, 0x15	; 21
    2b4e:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__prologue_saves__>
    2b52:	7c 01       	movw	r14, r24
    2b54:	6b 01       	movw	r12, r22
    2b56:	8a 01       	movw	r16, r20
    2b58:	fc 01       	movw	r30, r24
    2b5a:	17 82       	std	Z+7, r1	; 0x07
    2b5c:	16 82       	std	Z+6, r1	; 0x06
    2b5e:	83 81       	ldd	r24, Z+3	; 0x03
    2b60:	81 ff       	sbrs	r24, 1
    2b62:	bd c1       	rjmp	.+890    	; 0x2ede <vfprintf+0x398>
    2b64:	ce 01       	movw	r24, r28
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	4c 01       	movw	r8, r24
    2b6a:	f7 01       	movw	r30, r14
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	f6 01       	movw	r30, r12
    2b70:	93 fd       	sbrc	r25, 3
    2b72:	85 91       	lpm	r24, Z+
    2b74:	93 ff       	sbrs	r25, 3
    2b76:	81 91       	ld	r24, Z+
    2b78:	6f 01       	movw	r12, r30
    2b7a:	88 23       	and	r24, r24
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <vfprintf+0x3a>
    2b7e:	ab c1       	rjmp	.+854    	; 0x2ed6 <vfprintf+0x390>
    2b80:	85 32       	cpi	r24, 0x25	; 37
    2b82:	39 f4       	brne	.+14     	; 0x2b92 <vfprintf+0x4c>
    2b84:	93 fd       	sbrc	r25, 3
    2b86:	85 91       	lpm	r24, Z+
    2b88:	93 ff       	sbrs	r25, 3
    2b8a:	81 91       	ld	r24, Z+
    2b8c:	6f 01       	movw	r12, r30
    2b8e:	85 32       	cpi	r24, 0x25	; 37
    2b90:	29 f4       	brne	.+10     	; 0x2b9c <vfprintf+0x56>
    2b92:	b7 01       	movw	r22, r14
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2b9a:	e7 cf       	rjmp	.-50     	; 0x2b6a <vfprintf+0x24>
    2b9c:	51 2c       	mov	r5, r1
    2b9e:	31 2c       	mov	r3, r1
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	20 32       	cpi	r18, 0x20	; 32
    2ba4:	a0 f4       	brcc	.+40     	; 0x2bce <vfprintf+0x88>
    2ba6:	8b 32       	cpi	r24, 0x2B	; 43
    2ba8:	69 f0       	breq	.+26     	; 0x2bc4 <vfprintf+0x7e>
    2baa:	30 f4       	brcc	.+12     	; 0x2bb8 <vfprintf+0x72>
    2bac:	80 32       	cpi	r24, 0x20	; 32
    2bae:	59 f0       	breq	.+22     	; 0x2bc6 <vfprintf+0x80>
    2bb0:	83 32       	cpi	r24, 0x23	; 35
    2bb2:	69 f4       	brne	.+26     	; 0x2bce <vfprintf+0x88>
    2bb4:	20 61       	ori	r18, 0x10	; 16
    2bb6:	2c c0       	rjmp	.+88     	; 0x2c10 <vfprintf+0xca>
    2bb8:	8d 32       	cpi	r24, 0x2D	; 45
    2bba:	39 f0       	breq	.+14     	; 0x2bca <vfprintf+0x84>
    2bbc:	80 33       	cpi	r24, 0x30	; 48
    2bbe:	39 f4       	brne	.+14     	; 0x2bce <vfprintf+0x88>
    2bc0:	21 60       	ori	r18, 0x01	; 1
    2bc2:	26 c0       	rjmp	.+76     	; 0x2c10 <vfprintf+0xca>
    2bc4:	22 60       	ori	r18, 0x02	; 2
    2bc6:	24 60       	ori	r18, 0x04	; 4
    2bc8:	23 c0       	rjmp	.+70     	; 0x2c10 <vfprintf+0xca>
    2bca:	28 60       	ori	r18, 0x08	; 8
    2bcc:	21 c0       	rjmp	.+66     	; 0x2c10 <vfprintf+0xca>
    2bce:	27 fd       	sbrc	r18, 7
    2bd0:	27 c0       	rjmp	.+78     	; 0x2c20 <vfprintf+0xda>
    2bd2:	30 ed       	ldi	r19, 0xD0	; 208
    2bd4:	38 0f       	add	r19, r24
    2bd6:	3a 30       	cpi	r19, 0x0A	; 10
    2bd8:	78 f4       	brcc	.+30     	; 0x2bf8 <vfprintf+0xb2>
    2bda:	26 ff       	sbrs	r18, 6
    2bdc:	06 c0       	rjmp	.+12     	; 0x2bea <vfprintf+0xa4>
    2bde:	fa e0       	ldi	r31, 0x0A	; 10
    2be0:	5f 9e       	mul	r5, r31
    2be2:	30 0d       	add	r19, r0
    2be4:	11 24       	eor	r1, r1
    2be6:	53 2e       	mov	r5, r19
    2be8:	13 c0       	rjmp	.+38     	; 0x2c10 <vfprintf+0xca>
    2bea:	8a e0       	ldi	r24, 0x0A	; 10
    2bec:	38 9e       	mul	r3, r24
    2bee:	30 0d       	add	r19, r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	33 2e       	mov	r3, r19
    2bf4:	20 62       	ori	r18, 0x20	; 32
    2bf6:	0c c0       	rjmp	.+24     	; 0x2c10 <vfprintf+0xca>
    2bf8:	8e 32       	cpi	r24, 0x2E	; 46
    2bfa:	21 f4       	brne	.+8      	; 0x2c04 <vfprintf+0xbe>
    2bfc:	26 fd       	sbrc	r18, 6
    2bfe:	6b c1       	rjmp	.+726    	; 0x2ed6 <vfprintf+0x390>
    2c00:	20 64       	ori	r18, 0x40	; 64
    2c02:	06 c0       	rjmp	.+12     	; 0x2c10 <vfprintf+0xca>
    2c04:	8c 36       	cpi	r24, 0x6C	; 108
    2c06:	11 f4       	brne	.+4      	; 0x2c0c <vfprintf+0xc6>
    2c08:	20 68       	ori	r18, 0x80	; 128
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <vfprintf+0xca>
    2c0c:	88 36       	cpi	r24, 0x68	; 104
    2c0e:	41 f4       	brne	.+16     	; 0x2c20 <vfprintf+0xda>
    2c10:	f6 01       	movw	r30, r12
    2c12:	93 fd       	sbrc	r25, 3
    2c14:	85 91       	lpm	r24, Z+
    2c16:	93 ff       	sbrs	r25, 3
    2c18:	81 91       	ld	r24, Z+
    2c1a:	6f 01       	movw	r12, r30
    2c1c:	81 11       	cpse	r24, r1
    2c1e:	c1 cf       	rjmp	.-126    	; 0x2ba2 <vfprintf+0x5c>
    2c20:	98 2f       	mov	r25, r24
    2c22:	9f 7d       	andi	r25, 0xDF	; 223
    2c24:	95 54       	subi	r25, 0x45	; 69
    2c26:	93 30       	cpi	r25, 0x03	; 3
    2c28:	28 f4       	brcc	.+10     	; 0x2c34 <vfprintf+0xee>
    2c2a:	0c 5f       	subi	r16, 0xFC	; 252
    2c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2e:	ff e3       	ldi	r31, 0x3F	; 63
    2c30:	f9 83       	std	Y+1, r31	; 0x01
    2c32:	0d c0       	rjmp	.+26     	; 0x2c4e <vfprintf+0x108>
    2c34:	83 36       	cpi	r24, 0x63	; 99
    2c36:	31 f0       	breq	.+12     	; 0x2c44 <vfprintf+0xfe>
    2c38:	83 37       	cpi	r24, 0x73	; 115
    2c3a:	71 f0       	breq	.+28     	; 0x2c58 <vfprintf+0x112>
    2c3c:	83 35       	cpi	r24, 0x53	; 83
    2c3e:	09 f0       	breq	.+2      	; 0x2c42 <vfprintf+0xfc>
    2c40:	5b c0       	rjmp	.+182    	; 0x2cf8 <vfprintf+0x1b2>
    2c42:	22 c0       	rjmp	.+68     	; 0x2c88 <vfprintf+0x142>
    2c44:	f8 01       	movw	r30, r16
    2c46:	80 81       	ld	r24, Z
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	0e 5f       	subi	r16, 0xFE	; 254
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	44 24       	eor	r4, r4
    2c50:	43 94       	inc	r4
    2c52:	51 2c       	mov	r5, r1
    2c54:	54 01       	movw	r10, r8
    2c56:	15 c0       	rjmp	.+42     	; 0x2c82 <vfprintf+0x13c>
    2c58:	38 01       	movw	r6, r16
    2c5a:	f2 e0       	ldi	r31, 0x02	; 2
    2c5c:	6f 0e       	add	r6, r31
    2c5e:	71 1c       	adc	r7, r1
    2c60:	f8 01       	movw	r30, r16
    2c62:	a0 80       	ld	r10, Z
    2c64:	b1 80       	ldd	r11, Z+1	; 0x01
    2c66:	26 ff       	sbrs	r18, 6
    2c68:	03 c0       	rjmp	.+6      	; 0x2c70 <vfprintf+0x12a>
    2c6a:	65 2d       	mov	r22, r5
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <vfprintf+0x12e>
    2c70:	6f ef       	ldi	r22, 0xFF	; 255
    2c72:	7f ef       	ldi	r23, 0xFF	; 255
    2c74:	c5 01       	movw	r24, r10
    2c76:	2c 87       	std	Y+12, r18	; 0x0c
    2c78:	0e 94 80 17 	call	0x2f00	; 0x2f00 <strnlen>
    2c7c:	2c 01       	movw	r4, r24
    2c7e:	83 01       	movw	r16, r6
    2c80:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c82:	2f 77       	andi	r18, 0x7F	; 127
    2c84:	22 2e       	mov	r2, r18
    2c86:	17 c0       	rjmp	.+46     	; 0x2cb6 <vfprintf+0x170>
    2c88:	38 01       	movw	r6, r16
    2c8a:	f2 e0       	ldi	r31, 0x02	; 2
    2c8c:	6f 0e       	add	r6, r31
    2c8e:	71 1c       	adc	r7, r1
    2c90:	f8 01       	movw	r30, r16
    2c92:	a0 80       	ld	r10, Z
    2c94:	b1 80       	ldd	r11, Z+1	; 0x01
    2c96:	26 ff       	sbrs	r18, 6
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <vfprintf+0x15a>
    2c9a:	65 2d       	mov	r22, r5
    2c9c:	70 e0       	ldi	r23, 0x00	; 0
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <vfprintf+0x15e>
    2ca0:	6f ef       	ldi	r22, 0xFF	; 255
    2ca2:	7f ef       	ldi	r23, 0xFF	; 255
    2ca4:	c5 01       	movw	r24, r10
    2ca6:	2c 87       	std	Y+12, r18	; 0x0c
    2ca8:	0e 94 75 17 	call	0x2eea	; 0x2eea <strnlen_P>
    2cac:	2c 01       	movw	r4, r24
    2cae:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cb0:	20 68       	ori	r18, 0x80	; 128
    2cb2:	22 2e       	mov	r2, r18
    2cb4:	83 01       	movw	r16, r6
    2cb6:	23 fc       	sbrc	r2, 3
    2cb8:	1b c0       	rjmp	.+54     	; 0x2cf0 <vfprintf+0x1aa>
    2cba:	83 2d       	mov	r24, r3
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	48 16       	cp	r4, r24
    2cc0:	59 06       	cpc	r5, r25
    2cc2:	b0 f4       	brcc	.+44     	; 0x2cf0 <vfprintf+0x1aa>
    2cc4:	b7 01       	movw	r22, r14
    2cc6:	80 e2       	ldi	r24, 0x20	; 32
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2cce:	3a 94       	dec	r3
    2cd0:	f4 cf       	rjmp	.-24     	; 0x2cba <vfprintf+0x174>
    2cd2:	f5 01       	movw	r30, r10
    2cd4:	27 fc       	sbrc	r2, 7
    2cd6:	85 91       	lpm	r24, Z+
    2cd8:	27 fe       	sbrs	r2, 7
    2cda:	81 91       	ld	r24, Z+
    2cdc:	5f 01       	movw	r10, r30
    2cde:	b7 01       	movw	r22, r14
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2ce6:	31 10       	cpse	r3, r1
    2ce8:	3a 94       	dec	r3
    2cea:	f1 e0       	ldi	r31, 0x01	; 1
    2cec:	4f 1a       	sub	r4, r31
    2cee:	51 08       	sbc	r5, r1
    2cf0:	41 14       	cp	r4, r1
    2cf2:	51 04       	cpc	r5, r1
    2cf4:	71 f7       	brne	.-36     	; 0x2cd2 <vfprintf+0x18c>
    2cf6:	e5 c0       	rjmp	.+458    	; 0x2ec2 <vfprintf+0x37c>
    2cf8:	84 36       	cpi	r24, 0x64	; 100
    2cfa:	11 f0       	breq	.+4      	; 0x2d00 <vfprintf+0x1ba>
    2cfc:	89 36       	cpi	r24, 0x69	; 105
    2cfe:	39 f5       	brne	.+78     	; 0x2d4e <vfprintf+0x208>
    2d00:	f8 01       	movw	r30, r16
    2d02:	27 ff       	sbrs	r18, 7
    2d04:	07 c0       	rjmp	.+14     	; 0x2d14 <vfprintf+0x1ce>
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	0c 5f       	subi	r16, 0xFC	; 252
    2d10:	1f 4f       	sbci	r17, 0xFF	; 255
    2d12:	08 c0       	rjmp	.+16     	; 0x2d24 <vfprintf+0x1de>
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	88 27       	eor	r24, r24
    2d1a:	77 fd       	sbrc	r23, 7
    2d1c:	80 95       	com	r24
    2d1e:	98 2f       	mov	r25, r24
    2d20:	0e 5f       	subi	r16, 0xFE	; 254
    2d22:	1f 4f       	sbci	r17, 0xFF	; 255
    2d24:	2f 76       	andi	r18, 0x6F	; 111
    2d26:	b2 2e       	mov	r11, r18
    2d28:	97 ff       	sbrs	r25, 7
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <vfprintf+0x1f8>
    2d2c:	90 95       	com	r25
    2d2e:	80 95       	com	r24
    2d30:	70 95       	com	r23
    2d32:	61 95       	neg	r22
    2d34:	7f 4f       	sbci	r23, 0xFF	; 255
    2d36:	8f 4f       	sbci	r24, 0xFF	; 255
    2d38:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3a:	20 68       	ori	r18, 0x80	; 128
    2d3c:	b2 2e       	mov	r11, r18
    2d3e:	2a e0       	ldi	r18, 0x0A	; 10
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	a4 01       	movw	r20, r8
    2d44:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__ultoa_invert>
    2d48:	a8 2e       	mov	r10, r24
    2d4a:	a8 18       	sub	r10, r8
    2d4c:	44 c0       	rjmp	.+136    	; 0x2dd6 <vfprintf+0x290>
    2d4e:	85 37       	cpi	r24, 0x75	; 117
    2d50:	29 f4       	brne	.+10     	; 0x2d5c <vfprintf+0x216>
    2d52:	2f 7e       	andi	r18, 0xEF	; 239
    2d54:	b2 2e       	mov	r11, r18
    2d56:	2a e0       	ldi	r18, 0x0A	; 10
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	25 c0       	rjmp	.+74     	; 0x2da6 <vfprintf+0x260>
    2d5c:	f2 2f       	mov	r31, r18
    2d5e:	f9 7f       	andi	r31, 0xF9	; 249
    2d60:	bf 2e       	mov	r11, r31
    2d62:	8f 36       	cpi	r24, 0x6F	; 111
    2d64:	c1 f0       	breq	.+48     	; 0x2d96 <vfprintf+0x250>
    2d66:	18 f4       	brcc	.+6      	; 0x2d6e <vfprintf+0x228>
    2d68:	88 35       	cpi	r24, 0x58	; 88
    2d6a:	79 f0       	breq	.+30     	; 0x2d8a <vfprintf+0x244>
    2d6c:	b4 c0       	rjmp	.+360    	; 0x2ed6 <vfprintf+0x390>
    2d6e:	80 37       	cpi	r24, 0x70	; 112
    2d70:	19 f0       	breq	.+6      	; 0x2d78 <vfprintf+0x232>
    2d72:	88 37       	cpi	r24, 0x78	; 120
    2d74:	21 f0       	breq	.+8      	; 0x2d7e <vfprintf+0x238>
    2d76:	af c0       	rjmp	.+350    	; 0x2ed6 <vfprintf+0x390>
    2d78:	2f 2f       	mov	r18, r31
    2d7a:	20 61       	ori	r18, 0x10	; 16
    2d7c:	b2 2e       	mov	r11, r18
    2d7e:	b4 fe       	sbrs	r11, 4
    2d80:	0d c0       	rjmp	.+26     	; 0x2d9c <vfprintf+0x256>
    2d82:	8b 2d       	mov	r24, r11
    2d84:	84 60       	ori	r24, 0x04	; 4
    2d86:	b8 2e       	mov	r11, r24
    2d88:	09 c0       	rjmp	.+18     	; 0x2d9c <vfprintf+0x256>
    2d8a:	24 ff       	sbrs	r18, 4
    2d8c:	0a c0       	rjmp	.+20     	; 0x2da2 <vfprintf+0x25c>
    2d8e:	9f 2f       	mov	r25, r31
    2d90:	96 60       	ori	r25, 0x06	; 6
    2d92:	b9 2e       	mov	r11, r25
    2d94:	06 c0       	rjmp	.+12     	; 0x2da2 <vfprintf+0x25c>
    2d96:	28 e0       	ldi	r18, 0x08	; 8
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <vfprintf+0x260>
    2d9c:	20 e1       	ldi	r18, 0x10	; 16
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <vfprintf+0x260>
    2da2:	20 e1       	ldi	r18, 0x10	; 16
    2da4:	32 e0       	ldi	r19, 0x02	; 2
    2da6:	f8 01       	movw	r30, r16
    2da8:	b7 fe       	sbrs	r11, 7
    2daa:	07 c0       	rjmp	.+14     	; 0x2dba <vfprintf+0x274>
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	0c 5f       	subi	r16, 0xFC	; 252
    2db6:	1f 4f       	sbci	r17, 0xFF	; 255
    2db8:	06 c0       	rjmp	.+12     	; 0x2dc6 <vfprintf+0x280>
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0e 5f       	subi	r16, 0xFE	; 254
    2dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc6:	a4 01       	movw	r20, r8
    2dc8:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__ultoa_invert>
    2dcc:	a8 2e       	mov	r10, r24
    2dce:	a8 18       	sub	r10, r8
    2dd0:	fb 2d       	mov	r31, r11
    2dd2:	ff 77       	andi	r31, 0x7F	; 127
    2dd4:	bf 2e       	mov	r11, r31
    2dd6:	b6 fe       	sbrs	r11, 6
    2dd8:	0b c0       	rjmp	.+22     	; 0x2df0 <vfprintf+0x2aa>
    2dda:	2b 2d       	mov	r18, r11
    2ddc:	2e 7f       	andi	r18, 0xFE	; 254
    2dde:	a5 14       	cp	r10, r5
    2de0:	50 f4       	brcc	.+20     	; 0x2df6 <vfprintf+0x2b0>
    2de2:	b4 fe       	sbrs	r11, 4
    2de4:	0a c0       	rjmp	.+20     	; 0x2dfa <vfprintf+0x2b4>
    2de6:	b2 fc       	sbrc	r11, 2
    2de8:	08 c0       	rjmp	.+16     	; 0x2dfa <vfprintf+0x2b4>
    2dea:	2b 2d       	mov	r18, r11
    2dec:	2e 7e       	andi	r18, 0xEE	; 238
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <vfprintf+0x2b4>
    2df0:	7a 2c       	mov	r7, r10
    2df2:	2b 2d       	mov	r18, r11
    2df4:	03 c0       	rjmp	.+6      	; 0x2dfc <vfprintf+0x2b6>
    2df6:	7a 2c       	mov	r7, r10
    2df8:	01 c0       	rjmp	.+2      	; 0x2dfc <vfprintf+0x2b6>
    2dfa:	75 2c       	mov	r7, r5
    2dfc:	24 ff       	sbrs	r18, 4
    2dfe:	0d c0       	rjmp	.+26     	; 0x2e1a <vfprintf+0x2d4>
    2e00:	fe 01       	movw	r30, r28
    2e02:	ea 0d       	add	r30, r10
    2e04:	f1 1d       	adc	r31, r1
    2e06:	80 81       	ld	r24, Z
    2e08:	80 33       	cpi	r24, 0x30	; 48
    2e0a:	11 f4       	brne	.+4      	; 0x2e10 <vfprintf+0x2ca>
    2e0c:	29 7e       	andi	r18, 0xE9	; 233
    2e0e:	09 c0       	rjmp	.+18     	; 0x2e22 <vfprintf+0x2dc>
    2e10:	22 ff       	sbrs	r18, 2
    2e12:	06 c0       	rjmp	.+12     	; 0x2e20 <vfprintf+0x2da>
    2e14:	73 94       	inc	r7
    2e16:	73 94       	inc	r7
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <vfprintf+0x2dc>
    2e1a:	82 2f       	mov	r24, r18
    2e1c:	86 78       	andi	r24, 0x86	; 134
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <vfprintf+0x2dc>
    2e20:	73 94       	inc	r7
    2e22:	23 fd       	sbrc	r18, 3
    2e24:	13 c0       	rjmp	.+38     	; 0x2e4c <vfprintf+0x306>
    2e26:	20 ff       	sbrs	r18, 0
    2e28:	06 c0       	rjmp	.+12     	; 0x2e36 <vfprintf+0x2f0>
    2e2a:	5a 2c       	mov	r5, r10
    2e2c:	73 14       	cp	r7, r3
    2e2e:	18 f4       	brcc	.+6      	; 0x2e36 <vfprintf+0x2f0>
    2e30:	53 0c       	add	r5, r3
    2e32:	57 18       	sub	r5, r7
    2e34:	73 2c       	mov	r7, r3
    2e36:	73 14       	cp	r7, r3
    2e38:	68 f4       	brcc	.+26     	; 0x2e54 <vfprintf+0x30e>
    2e3a:	b7 01       	movw	r22, r14
    2e3c:	80 e2       	ldi	r24, 0x20	; 32
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	2c 87       	std	Y+12, r18	; 0x0c
    2e42:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2e46:	73 94       	inc	r7
    2e48:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e4a:	f5 cf       	rjmp	.-22     	; 0x2e36 <vfprintf+0x2f0>
    2e4c:	73 14       	cp	r7, r3
    2e4e:	10 f4       	brcc	.+4      	; 0x2e54 <vfprintf+0x30e>
    2e50:	37 18       	sub	r3, r7
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <vfprintf+0x310>
    2e54:	31 2c       	mov	r3, r1
    2e56:	24 ff       	sbrs	r18, 4
    2e58:	12 c0       	rjmp	.+36     	; 0x2e7e <vfprintf+0x338>
    2e5a:	b7 01       	movw	r22, r14
    2e5c:	80 e3       	ldi	r24, 0x30	; 48
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	2c 87       	std	Y+12, r18	; 0x0c
    2e62:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2e66:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e68:	22 ff       	sbrs	r18, 2
    2e6a:	17 c0       	rjmp	.+46     	; 0x2e9a <vfprintf+0x354>
    2e6c:	21 ff       	sbrs	r18, 1
    2e6e:	03 c0       	rjmp	.+6      	; 0x2e76 <vfprintf+0x330>
    2e70:	88 e5       	ldi	r24, 0x58	; 88
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <vfprintf+0x334>
    2e76:	88 e7       	ldi	r24, 0x78	; 120
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	b7 01       	movw	r22, r14
    2e7c:	0c c0       	rjmp	.+24     	; 0x2e96 <vfprintf+0x350>
    2e7e:	82 2f       	mov	r24, r18
    2e80:	86 78       	andi	r24, 0x86	; 134
    2e82:	59 f0       	breq	.+22     	; 0x2e9a <vfprintf+0x354>
    2e84:	21 fd       	sbrc	r18, 1
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <vfprintf+0x346>
    2e88:	80 e2       	ldi	r24, 0x20	; 32
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <vfprintf+0x348>
    2e8c:	8b e2       	ldi	r24, 0x2B	; 43
    2e8e:	27 fd       	sbrc	r18, 7
    2e90:	8d e2       	ldi	r24, 0x2D	; 45
    2e92:	b7 01       	movw	r22, r14
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2e9a:	a5 14       	cp	r10, r5
    2e9c:	38 f4       	brcc	.+14     	; 0x2eac <vfprintf+0x366>
    2e9e:	b7 01       	movw	r22, r14
    2ea0:	80 e3       	ldi	r24, 0x30	; 48
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2ea8:	5a 94       	dec	r5
    2eaa:	f7 cf       	rjmp	.-18     	; 0x2e9a <vfprintf+0x354>
    2eac:	aa 94       	dec	r10
    2eae:	f4 01       	movw	r30, r8
    2eb0:	ea 0d       	add	r30, r10
    2eb2:	f1 1d       	adc	r31, r1
    2eb4:	80 81       	ld	r24, Z
    2eb6:	b7 01       	movw	r22, r14
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2ebe:	a1 10       	cpse	r10, r1
    2ec0:	f5 cf       	rjmp	.-22     	; 0x2eac <vfprintf+0x366>
    2ec2:	33 20       	and	r3, r3
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <vfprintf+0x382>
    2ec6:	51 ce       	rjmp	.-862    	; 0x2b6a <vfprintf+0x24>
    2ec8:	b7 01       	movw	r22, r14
    2eca:	80 e2       	ldi	r24, 0x20	; 32
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <fputc>
    2ed2:	3a 94       	dec	r3
    2ed4:	f6 cf       	rjmp	.-20     	; 0x2ec2 <vfprintf+0x37c>
    2ed6:	f7 01       	movw	r30, r14
    2ed8:	86 81       	ldd	r24, Z+6	; 0x06
    2eda:	97 81       	ldd	r25, Z+7	; 0x07
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <vfprintf+0x39c>
    2ede:	8f ef       	ldi	r24, 0xFF	; 255
    2ee0:	9f ef       	ldi	r25, 0xFF	; 255
    2ee2:	2c 96       	adiw	r28, 0x0c	; 12
    2ee4:	e2 e1       	ldi	r30, 0x12	; 18
    2ee6:	0c 94 37 18 	jmp	0x306e	; 0x306e <__epilogue_restores__>

00002eea <strnlen_P>:
    2eea:	fc 01       	movw	r30, r24
    2eec:	05 90       	lpm	r0, Z+
    2eee:	61 50       	subi	r22, 0x01	; 1
    2ef0:	70 40       	sbci	r23, 0x00	; 0
    2ef2:	01 10       	cpse	r0, r1
    2ef4:	d8 f7       	brcc	.-10     	; 0x2eec <strnlen_P+0x2>
    2ef6:	80 95       	com	r24
    2ef8:	90 95       	com	r25
    2efa:	8e 0f       	add	r24, r30
    2efc:	9f 1f       	adc	r25, r31
    2efe:	08 95       	ret

00002f00 <strnlen>:
    2f00:	fc 01       	movw	r30, r24
    2f02:	61 50       	subi	r22, 0x01	; 1
    2f04:	70 40       	sbci	r23, 0x00	; 0
    2f06:	01 90       	ld	r0, Z+
    2f08:	01 10       	cpse	r0, r1
    2f0a:	d8 f7       	brcc	.-10     	; 0x2f02 <strnlen+0x2>
    2f0c:	80 95       	com	r24
    2f0e:	90 95       	com	r25
    2f10:	8e 0f       	add	r24, r30
    2f12:	9f 1f       	adc	r25, r31
    2f14:	08 95       	ret

00002f16 <fputc>:
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	18 2f       	mov	r17, r24
    2f20:	09 2f       	mov	r16, r25
    2f22:	eb 01       	movw	r28, r22
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	81 fd       	sbrc	r24, 1
    2f28:	03 c0       	rjmp	.+6      	; 0x2f30 <fputc+0x1a>
    2f2a:	8f ef       	ldi	r24, 0xFF	; 255
    2f2c:	9f ef       	ldi	r25, 0xFF	; 255
    2f2e:	20 c0       	rjmp	.+64     	; 0x2f70 <fputc+0x5a>
    2f30:	82 ff       	sbrs	r24, 2
    2f32:	10 c0       	rjmp	.+32     	; 0x2f54 <fputc+0x3e>
    2f34:	4e 81       	ldd	r20, Y+6	; 0x06
    2f36:	5f 81       	ldd	r21, Y+7	; 0x07
    2f38:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f3c:	42 17       	cp	r20, r18
    2f3e:	53 07       	cpc	r21, r19
    2f40:	7c f4       	brge	.+30     	; 0x2f60 <fputc+0x4a>
    2f42:	e8 81       	ld	r30, Y
    2f44:	f9 81       	ldd	r31, Y+1	; 0x01
    2f46:	9f 01       	movw	r18, r30
    2f48:	2f 5f       	subi	r18, 0xFF	; 255
    2f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4c:	39 83       	std	Y+1, r19	; 0x01
    2f4e:	28 83       	st	Y, r18
    2f50:	10 83       	st	Z, r17
    2f52:	06 c0       	rjmp	.+12     	; 0x2f60 <fputc+0x4a>
    2f54:	e8 85       	ldd	r30, Y+8	; 0x08
    2f56:	f9 85       	ldd	r31, Y+9	; 0x09
    2f58:	81 2f       	mov	r24, r17
    2f5a:	09 95       	icall
    2f5c:	89 2b       	or	r24, r25
    2f5e:	29 f7       	brne	.-54     	; 0x2f2a <fputc+0x14>
    2f60:	2e 81       	ldd	r18, Y+6	; 0x06
    2f62:	3f 81       	ldd	r19, Y+7	; 0x07
    2f64:	2f 5f       	subi	r18, 0xFF	; 255
    2f66:	3f 4f       	sbci	r19, 0xFF	; 255
    2f68:	3f 83       	std	Y+7, r19	; 0x07
    2f6a:	2e 83       	std	Y+6, r18	; 0x06
    2f6c:	81 2f       	mov	r24, r17
    2f6e:	90 2f       	mov	r25, r16
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	08 95       	ret

00002f7a <__ultoa_invert>:
    2f7a:	fa 01       	movw	r30, r20
    2f7c:	aa 27       	eor	r26, r26
    2f7e:	28 30       	cpi	r18, 0x08	; 8
    2f80:	51 f1       	breq	.+84     	; 0x2fd6 <__ultoa_invert+0x5c>
    2f82:	20 31       	cpi	r18, 0x10	; 16
    2f84:	81 f1       	breq	.+96     	; 0x2fe6 <__ultoa_invert+0x6c>
    2f86:	e8 94       	clt
    2f88:	6f 93       	push	r22
    2f8a:	6e 7f       	andi	r22, 0xFE	; 254
    2f8c:	6e 5f       	subi	r22, 0xFE	; 254
    2f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f90:	8f 4f       	sbci	r24, 0xFF	; 255
    2f92:	9f 4f       	sbci	r25, 0xFF	; 255
    2f94:	af 4f       	sbci	r26, 0xFF	; 255
    2f96:	b1 e0       	ldi	r27, 0x01	; 1
    2f98:	3e d0       	rcall	.+124    	; 0x3016 <__ultoa_invert+0x9c>
    2f9a:	b4 e0       	ldi	r27, 0x04	; 4
    2f9c:	3c d0       	rcall	.+120    	; 0x3016 <__ultoa_invert+0x9c>
    2f9e:	67 0f       	add	r22, r23
    2fa0:	78 1f       	adc	r23, r24
    2fa2:	89 1f       	adc	r24, r25
    2fa4:	9a 1f       	adc	r25, r26
    2fa6:	a1 1d       	adc	r26, r1
    2fa8:	68 0f       	add	r22, r24
    2faa:	79 1f       	adc	r23, r25
    2fac:	8a 1f       	adc	r24, r26
    2fae:	91 1d       	adc	r25, r1
    2fb0:	a1 1d       	adc	r26, r1
    2fb2:	6a 0f       	add	r22, r26
    2fb4:	71 1d       	adc	r23, r1
    2fb6:	81 1d       	adc	r24, r1
    2fb8:	91 1d       	adc	r25, r1
    2fba:	a1 1d       	adc	r26, r1
    2fbc:	20 d0       	rcall	.+64     	; 0x2ffe <__ultoa_invert+0x84>
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <__ultoa_invert+0x48>
    2fc0:	68 94       	set
    2fc2:	3f 91       	pop	r19
    2fc4:	2a e0       	ldi	r18, 0x0A	; 10
    2fc6:	26 9f       	mul	r18, r22
    2fc8:	11 24       	eor	r1, r1
    2fca:	30 19       	sub	r19, r0
    2fcc:	30 5d       	subi	r19, 0xD0	; 208
    2fce:	31 93       	st	Z+, r19
    2fd0:	de f6       	brtc	.-74     	; 0x2f88 <__ultoa_invert+0xe>
    2fd2:	cf 01       	movw	r24, r30
    2fd4:	08 95       	ret
    2fd6:	46 2f       	mov	r20, r22
    2fd8:	47 70       	andi	r20, 0x07	; 7
    2fda:	40 5d       	subi	r20, 0xD0	; 208
    2fdc:	41 93       	st	Z+, r20
    2fde:	b3 e0       	ldi	r27, 0x03	; 3
    2fe0:	0f d0       	rcall	.+30     	; 0x3000 <__ultoa_invert+0x86>
    2fe2:	c9 f7       	brne	.-14     	; 0x2fd6 <__ultoa_invert+0x5c>
    2fe4:	f6 cf       	rjmp	.-20     	; 0x2fd2 <__ultoa_invert+0x58>
    2fe6:	46 2f       	mov	r20, r22
    2fe8:	4f 70       	andi	r20, 0x0F	; 15
    2fea:	40 5d       	subi	r20, 0xD0	; 208
    2fec:	4a 33       	cpi	r20, 0x3A	; 58
    2fee:	18 f0       	brcs	.+6      	; 0x2ff6 <__ultoa_invert+0x7c>
    2ff0:	49 5d       	subi	r20, 0xD9	; 217
    2ff2:	31 fd       	sbrc	r19, 1
    2ff4:	40 52       	subi	r20, 0x20	; 32
    2ff6:	41 93       	st	Z+, r20
    2ff8:	02 d0       	rcall	.+4      	; 0x2ffe <__ultoa_invert+0x84>
    2ffa:	a9 f7       	brne	.-22     	; 0x2fe6 <__ultoa_invert+0x6c>
    2ffc:	ea cf       	rjmp	.-44     	; 0x2fd2 <__ultoa_invert+0x58>
    2ffe:	b4 e0       	ldi	r27, 0x04	; 4
    3000:	a6 95       	lsr	r26
    3002:	97 95       	ror	r25
    3004:	87 95       	ror	r24
    3006:	77 95       	ror	r23
    3008:	67 95       	ror	r22
    300a:	ba 95       	dec	r27
    300c:	c9 f7       	brne	.-14     	; 0x3000 <__ultoa_invert+0x86>
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	61 05       	cpc	r22, r1
    3012:	71 05       	cpc	r23, r1
    3014:	08 95       	ret
    3016:	9b 01       	movw	r18, r22
    3018:	ac 01       	movw	r20, r24
    301a:	0a 2e       	mov	r0, r26
    301c:	06 94       	lsr	r0
    301e:	57 95       	ror	r21
    3020:	47 95       	ror	r20
    3022:	37 95       	ror	r19
    3024:	27 95       	ror	r18
    3026:	ba 95       	dec	r27
    3028:	c9 f7       	brne	.-14     	; 0x301c <__ultoa_invert+0xa2>
    302a:	62 0f       	add	r22, r18
    302c:	73 1f       	adc	r23, r19
    302e:	84 1f       	adc	r24, r20
    3030:	95 1f       	adc	r25, r21
    3032:	a0 1d       	adc	r26, r0
    3034:	08 95       	ret

00003036 <__prologue_saves__>:
    3036:	2f 92       	push	r2
    3038:	3f 92       	push	r3
    303a:	4f 92       	push	r4
    303c:	5f 92       	push	r5
    303e:	6f 92       	push	r6
    3040:	7f 92       	push	r7
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	af 92       	push	r10
    3048:	bf 92       	push	r11
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	ca 1b       	sub	r28, r26
    3060:	db 0b       	sbc	r29, r27
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	09 94       	ijmp

0000306e <__epilogue_restores__>:
    306e:	2a 88       	ldd	r2, Y+18	; 0x12
    3070:	39 88       	ldd	r3, Y+17	; 0x11
    3072:	48 88       	ldd	r4, Y+16	; 0x10
    3074:	5f 84       	ldd	r5, Y+15	; 0x0f
    3076:	6e 84       	ldd	r6, Y+14	; 0x0e
    3078:	7d 84       	ldd	r7, Y+13	; 0x0d
    307a:	8c 84       	ldd	r8, Y+12	; 0x0c
    307c:	9b 84       	ldd	r9, Y+11	; 0x0b
    307e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3080:	b9 84       	ldd	r11, Y+9	; 0x09
    3082:	c8 84       	ldd	r12, Y+8	; 0x08
    3084:	df 80       	ldd	r13, Y+7	; 0x07
    3086:	ee 80       	ldd	r14, Y+6	; 0x06
    3088:	fd 80       	ldd	r15, Y+5	; 0x05
    308a:	0c 81       	ldd	r16, Y+4	; 0x04
    308c:	1b 81       	ldd	r17, Y+3	; 0x03
    308e:	aa 81       	ldd	r26, Y+2	; 0x02
    3090:	b9 81       	ldd	r27, Y+1	; 0x01
    3092:	ce 0f       	add	r28, r30
    3094:	d1 1d       	adc	r29, r1
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	ed 01       	movw	r28, r26
    30a2:	08 95       	ret

000030a4 <_exit>:
    30a4:	f8 94       	cli

000030a6 <__stop_program>:
    30a6:	ff cf       	rjmp	.-2      	; 0x30a6 <__stop_program>
