
node 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00000ccc  00000d60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ccc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080022e  0080022e  00000d8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000288  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d97  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8d  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001446  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f4  00000000  00000000  00004fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000794  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fb2  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00006cea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	35 c1       	rjmp	.+618    	; 0x284 <__vector_6>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	55 c3       	rjmp	.+1706   	; 0x72c <__vector_32>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	9a c3       	rjmp	.+1844   	; 0x7d2 <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	04 04       	cpc	r0, r4
  e6:	56 04       	cpc	r5, r6
  e8:	56 04       	cpc	r5, r6
  ea:	56 04       	cpc	r5, r6
  ec:	56 04       	cpc	r5, r6
  ee:	56 04       	cpc	r5, r6
  f0:	56 04       	cpc	r5, r6
  f2:	56 04       	cpc	r5, r6
  f4:	04 04       	cpc	r0, r4
  f6:	56 04       	cpc	r5, r6
  f8:	56 04       	cpc	r5, r6
  fa:	56 04       	cpc	r5, r6
  fc:	56 04       	cpc	r5, r6
  fe:	56 04       	cpc	r5, r6
 100:	56 04       	cpc	r5, r6
 102:	56 04       	cpc	r5, r6
 104:	06 04       	cpc	r0, r6
 106:	56 04       	cpc	r5, r6
 108:	56 04       	cpc	r5, r6
 10a:	56 04       	cpc	r5, r6
 10c:	56 04       	cpc	r5, r6
 10e:	56 04       	cpc	r5, r6
 110:	56 04       	cpc	r5, r6
 112:	56 04       	cpc	r5, r6
 114:	56 04       	cpc	r5, r6
 116:	56 04       	cpc	r5, r6
 118:	56 04       	cpc	r5, r6
 11a:	56 04       	cpc	r5, r6
 11c:	56 04       	cpc	r5, r6
 11e:	56 04       	cpc	r5, r6
 120:	56 04       	cpc	r5, r6
 122:	56 04       	cpc	r5, r6
 124:	06 04       	cpc	r0, r6
 126:	56 04       	cpc	r5, r6
 128:	56 04       	cpc	r5, r6
 12a:	56 04       	cpc	r5, r6
 12c:	56 04       	cpc	r5, r6
 12e:	56 04       	cpc	r5, r6
 130:	56 04       	cpc	r5, r6
 132:	56 04       	cpc	r5, r6
 134:	56 04       	cpc	r5, r6
 136:	56 04       	cpc	r5, r6
 138:	56 04       	cpc	r5, r6
 13a:	56 04       	cpc	r5, r6
 13c:	56 04       	cpc	r5, r6
 13e:	56 04       	cpc	r5, r6
 140:	56 04       	cpc	r5, r6
 142:	56 04       	cpc	r5, r6
 144:	52 04       	cpc	r5, r2
 146:	56 04       	cpc	r5, r6
 148:	56 04       	cpc	r5, r6
 14a:	56 04       	cpc	r5, r6
 14c:	56 04       	cpc	r5, r6
 14e:	56 04       	cpc	r5, r6
 150:	56 04       	cpc	r5, r6
 152:	56 04       	cpc	r5, r6
 154:	2f 04       	cpc	r2, r15
 156:	56 04       	cpc	r5, r6
 158:	56 04       	cpc	r5, r6
 15a:	56 04       	cpc	r5, r6
 15c:	56 04       	cpc	r5, r6
 15e:	56 04       	cpc	r5, r6
 160:	56 04       	cpc	r5, r6
 162:	56 04       	cpc	r5, r6
 164:	56 04       	cpc	r5, r6
 166:	56 04       	cpc	r5, r6
 168:	56 04       	cpc	r5, r6
 16a:	56 04       	cpc	r5, r6
 16c:	56 04       	cpc	r5, r6
 16e:	56 04       	cpc	r5, r6
 170:	56 04       	cpc	r5, r6
 172:	56 04       	cpc	r5, r6
 174:	23 04       	cpc	r2, r3
 176:	56 04       	cpc	r5, r6
 178:	56 04       	cpc	r5, r6
 17a:	56 04       	cpc	r5, r6
 17c:	56 04       	cpc	r5, r6
 17e:	56 04       	cpc	r5, r6
 180:	56 04       	cpc	r5, r6
 182:	56 04       	cpc	r5, r6
 184:	41 04       	cpc	r4, r1

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	12 e0       	ldi	r17, 0x02	; 2
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	ec ec       	ldi	r30, 0xCC	; 204
 19e:	fc e0       	ldi	r31, 0x0C	; 12
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	ae 32       	cpi	r26, 0x2E	; 46
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	ae e2       	ldi	r26, 0x2E	; 46
 1b4:	b2 e0       	ldi	r27, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	a9 34       	cpi	r26, 0x49	; 73
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	59 d1       	rcall	.+690    	; 0x474 <main>
 1c2:	82 c5       	rjmp	.+2820   	; 0xcc8 <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <CAN_init>:
		for (int i = 0; i < temp.length; i++) temp.data[i] = MCP_read(MCP_RXB0DM + i);

		MCP_bit_modify(MCP_CANINTF,0x01, 0x00);
		return temp;
	}
}
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
 1ca:	cf d0       	rcall	.+414    	; 0x36a <MCP_init>
 1cc:	4f ef       	ldi	r20, 0xFF	; 255
 1ce:	60 e6       	ldi	r22, 0x60	; 96
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	ce d0       	rcall	.+412    	; 0x370 <MCP_bit_modify>
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	8b e2       	ldi	r24, 0x2B	; 43
 1da:	ca d0       	rcall	.+404    	; 0x370 <MCP_bit_modify>
 1dc:	cc 23       	and	r28, r28
 1de:	19 f0       	breq	.+6      	; 0x1e6 <CAN_init+0x20>
 1e0:	c1 30       	cpi	r28, 0x01	; 1
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <CAN_init+0x2a>
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <CAN_init+0x32>
 1e6:	40 e4       	ldi	r20, 0x40	; 64
 1e8:	60 ee       	ldi	r22, 0xE0	; 224
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	c1 d0       	rcall	.+386    	; 0x370 <MCP_bit_modify>
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <CAN_init+0x32>
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	60 ee       	ldi	r22, 0xE0	; 224
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	bc d0       	rcall	.+376    	; 0x370 <MCP_bit_modify>
 1f8:	ea e6       	ldi	r30, 0x6A	; 106
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	80 83       	st	Z, r24
 202:	ed 9a       	sbi	0x1d, 5	; 29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <CAN_send_frame>:
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	7c 01       	movw	r14, r24
 216:	fc 01       	movw	r30, r24
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	95 95       	asr	r25
 21e:	87 95       	ror	r24
 220:	95 95       	asr	r25
 222:	87 95       	ror	r24
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	61 e3       	ldi	r22, 0x31	; 49
 22a:	6b d0       	rcall	.+214    	; 0x302 <MCP_write>
 22c:	f7 01       	movw	r30, r14
 22e:	80 81       	ld	r24, Z
 230:	62 e3       	ldi	r22, 0x32	; 50
 232:	82 95       	swap	r24
 234:	88 0f       	add	r24, r24
 236:	80 7e       	andi	r24, 0xE0	; 224
 238:	64 d0       	rcall	.+200    	; 0x302 <MCP_write>
 23a:	65 e3       	ldi	r22, 0x35	; 53
 23c:	f7 01       	movw	r30, r14
 23e:	82 81       	ldd	r24, Z+2	; 0x02
 240:	60 d0       	rcall	.+192    	; 0x302 <MCP_write>
 242:	f7 01       	movw	r30, r14
 244:	82 81       	ldd	r24, Z+2	; 0x02
 246:	18 16       	cp	r1, r24
 248:	a4 f4       	brge	.+40     	; 0x272 <CAN_send_frame+0x6a>
 24a:	87 01       	movw	r16, r14
 24c:	0d 5f       	subi	r16, 0xFD	; 253
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	d0 e0       	ldi	r29, 0x00	; 0
 254:	6c 2f       	mov	r22, r28
 256:	6a 5c       	subi	r22, 0xCA	; 202
 258:	f8 01       	movw	r30, r16
 25a:	81 91       	ld	r24, Z+
 25c:	8f 01       	movw	r16, r30
 25e:	51 d0       	rcall	.+162    	; 0x302 <MCP_write>
 260:	21 96       	adiw	r28, 0x01	; 1
 262:	f7 01       	movw	r30, r14
 264:	22 81       	ldd	r18, Z+2	; 0x02
 266:	33 27       	eor	r19, r19
 268:	27 fd       	sbrc	r18, 7
 26a:	30 95       	com	r19
 26c:	c2 17       	cp	r28, r18
 26e:	d3 07       	cpc	r29, r19
 270:	8c f3       	brlt	.-30     	; 0x254 <CAN_send_frame+0x4c>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	59 d0       	rcall	.+178    	; 0x328 <MCP_RTS>
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	08 95       	ret

00000284 <__vector_6>:
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 2f 02 	sts	0x022F, r25
 29a:	80 93 2e 02 	sts	0x022E, r24
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <CAN_frame_init>:

struct can_frame CAN_frame_init(int id, uint8_t len)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	2b 97       	sbiw	r28, 0x0b	; 11
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
	struct can_frame t;
	t.id = id;
	t.length = len;
	for (int i = 0; i < t.length; i++) t.data[i] = 0; //Initial value = 0
 2c0:	14 16       	cp	r1, r20
 2c2:	5c f4       	brge	.+22     	; 0x2da <CAN_frame_init+0x2e>
 2c4:	fe 01       	movw	r30, r28
 2c6:	34 96       	adiw	r30, 0x04	; 4
 2c8:	9f 01       	movw	r18, r30
 2ca:	24 0f       	add	r18, r20
 2cc:	31 1d       	adc	r19, r1
 2ce:	47 fd       	sbrc	r20, 7
 2d0:	3a 95       	dec	r19
 2d2:	11 92       	st	Z+, r1
 2d4:	e2 17       	cp	r30, r18
 2d6:	f3 07       	cpc	r31, r19
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <CAN_frame_init+0x26>
	return t;
 2da:	7a 83       	std	Y+2, r23	; 0x02
 2dc:	69 83       	std	Y+1, r22	; 0x01
 2de:	4b 83       	std	Y+3, r20	; 0x03
 2e0:	2b e0       	ldi	r18, 0x0B	; 11
 2e2:	fe 01       	movw	r30, r28
 2e4:	31 96       	adiw	r30, 0x01	; 1
 2e6:	dc 01       	movw	r26, r24
 2e8:	01 90       	ld	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	2a 95       	dec	r18
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <CAN_frame_init+0x3c>
}
 2f0:	2b 96       	adiw	r28, 0x0b	; 11
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <MCP_write>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	c8 2f       	mov	r28, r24
 308:	d6 2f       	mov	r29, r22
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	5e d0       	rcall	.+188    	; 0x3cc <SPI_select_slave>
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	55 d0       	rcall	.+170    	; 0x3be <SPI_send_byte>
 314:	8d 2f       	mov	r24, r29
 316:	53 d0       	rcall	.+166    	; 0x3be <SPI_send_byte>
 318:	8c 2f       	mov	r24, r28
 31a:	51 d0       	rcall	.+162    	; 0x3be <SPI_send_byte>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	55 d0       	rcall	.+170    	; 0x3cc <SPI_select_slave>
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <MCP_RTS>:
 328:	cf 93       	push	r28
 32a:	88 23       	and	r24, r24
 32c:	31 f0       	breq	.+12     	; 0x33a <MCP_RTS+0x12>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	31 f0       	breq	.+12     	; 0x33e <MCP_RTS+0x16>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	31 f0       	breq	.+12     	; 0x342 <MCP_RTS+0x1a>
 336:	c0 e8       	ldi	r28, 0x80	; 128
 338:	05 c0       	rjmp	.+10     	; 0x344 <MCP_RTS+0x1c>
 33a:	c1 e8       	ldi	r28, 0x81	; 129
 33c:	03 c0       	rjmp	.+6      	; 0x344 <MCP_RTS+0x1c>
 33e:	c2 e8       	ldi	r28, 0x82	; 130
 340:	01 c0       	rjmp	.+2      	; 0x344 <MCP_RTS+0x1c>
 342:	c4 e8       	ldi	r28, 0x84	; 132
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	41 d0       	rcall	.+130    	; 0x3cc <SPI_select_slave>
 34a:	8c 2f       	mov	r24, r28
 34c:	38 d0       	rcall	.+112    	; 0x3be <SPI_send_byte>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	3c d0       	rcall	.+120    	; 0x3cc <SPI_select_slave>
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <MCP_reset>:
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	37 d0       	rcall	.+110    	; 0x3cc <SPI_select_slave>
 35e:	80 ec       	ldi	r24, 0xC0	; 192
 360:	2e d0       	rcall	.+92     	; 0x3be <SPI_send_byte>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	32 c0       	rjmp	.+100    	; 0x3cc <SPI_select_slave>
 368:	08 95       	ret

0000036a <MCP_init>:
 36a:	1a d0       	rcall	.+52     	; 0x3a0 <SPI_init>
 36c:	f5 cf       	rjmp	.-22     	; 0x358 <MCP_reset>
 36e:	08 95       	ret

00000370 <MCP_bit_modify>:
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	18 2f       	mov	r17, r24
 378:	d6 2f       	mov	r29, r22
 37a:	c4 2f       	mov	r28, r20
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	25 d0       	rcall	.+74     	; 0x3cc <SPI_select_slave>
 382:	85 e0       	ldi	r24, 0x05	; 5
 384:	1c d0       	rcall	.+56     	; 0x3be <SPI_send_byte>
 386:	81 2f       	mov	r24, r17
 388:	1a d0       	rcall	.+52     	; 0x3be <SPI_send_byte>
 38a:	8d 2f       	mov	r24, r29
 38c:	18 d0       	rcall	.+48     	; 0x3be <SPI_send_byte>
 38e:	8c 2f       	mov	r24, r28
 390:	16 d0       	rcall	.+44     	; 0x3be <SPI_send_byte>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	1a d0       	rcall	.+52     	; 0x3cc <SPI_select_slave>
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <SPI_init>:
 3a0:	22 9a       	sbi	0x04, 2	; 4
 3a2:	21 9a       	sbi	0x04, 1	; 4
 3a4:	27 9a       	sbi	0x04, 7	; 4
 3a6:	20 9a       	sbi	0x04, 0	; 4
 3a8:	23 98       	cbi	0x04, 3	; 4
 3aa:	8c b5       	in	r24, 0x2c	; 44
 3ac:	80 61       	ori	r24, 0x10	; 16
 3ae:	8c bd       	out	0x2c, r24	; 44
 3b0:	8c b5       	in	r24, 0x2c	; 44
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	8c bd       	out	0x2c, r24	; 44
 3b6:	8c b5       	in	r24, 0x2c	; 44
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	8c bd       	out	0x2c, r24	; 44
 3bc:	08 95       	ret

000003be <SPI_send_byte>:
 3be:	8e bd       	out	0x2e, r24	; 46
 3c0:	0d b4       	in	r0, 0x2d	; 45
 3c2:	07 fe       	sbrs	r0, 7
 3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <SPI_send_byte+0x2>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	08 95       	ret

000003cc <SPI_select_slave>:
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	91 05       	cpc	r25, r1
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <SPI_select_slave+0xa>
 3d2:	2f 98       	cbi	0x05, 7	; 5
 3d4:	08 95       	ret
 3d6:	89 2b       	or	r24, r25
 3d8:	09 f4       	brne	.+2      	; 0x3dc <SPI_select_slave+0x10>
 3da:	2f 9a       	sbi	0x05, 7	; 5
 3dc:	08 95       	ret

000003de <UART_send>:
 3de:	e0 ec       	ldi	r30, 0xC0	; 192
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	90 81       	ld	r25, Z
 3e4:	95 ff       	sbrs	r25, 5
 3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <UART_send+0x4>
 3e8:	80 93 c6 00 	sts	0x00C6, r24
 3ec:	08 95       	ret

000003ee <UART_init>:
 3ee:	9c 01       	movw	r18, r24
 3f0:	44 27       	eor	r20, r20
 3f2:	37 fd       	sbrc	r19, 7
 3f4:	40 95       	com	r20
 3f6:	54 2f       	mov	r21, r20
 3f8:	60 e4       	ldi	r22, 0x40	; 64
 3fa:	72 e4       	ldi	r23, 0x42	; 66
 3fc:	8f e0       	ldi	r24, 0x0F	; 15
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	6b d2       	rcall	.+1238   	; 0x8d8 <__divmodsi4>
 402:	21 50       	subi	r18, 0x01	; 1
 404:	31 09       	sbc	r19, r1
 406:	30 93 c5 00 	sts	0x00C5, r19
 40a:	20 93 c4 00 	sts	0x00C4, r18
 40e:	88 e1       	ldi	r24, 0x18	; 24
 410:	80 93 c1 00 	sts	0x00C1, r24
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	80 93 c2 00 	sts	0x00C2, r24
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	90 93 46 02 	sts	0x0246, r25
 422:	80 93 45 02 	sts	0x0245, r24
 426:	08 95       	ret

00000428 <adc2560_init>:
 428:	ea e7       	ldi	r30, 0x7A	; 122
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	80 83       	st	Z, r24
 432:	80 81       	ld	r24, Z
 434:	83 60       	ori	r24, 0x03	; 3
 436:	80 83       	st	Z, r24
 438:	ec e7       	ldi	r30, 0x7C	; 124
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	80 64       	ori	r24, 0x40	; 64
 440:	80 83       	st	Z, r24
 442:	08 95       	ret

00000444 <DAC_init>:
 444:	9a d1       	rcall	.+820    	; 0x77a <TWI_Master_Initialise>
 446:	8a b1       	in	r24, 0x0a	; 10
 448:	83 60       	ori	r24, 0x03	; 3
 44a:	8a b9       	out	0x0a, r24	; 10
 44c:	08 95       	ret

0000044e <DAC_write_bin>:
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	00 d0       	rcall	.+0      	; 0x454 <DAC_write_bin+0x6>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	90 e5       	ldi	r25, 0x50	; 80
 45a:	99 83       	std	Y+1, r25	; 0x01
 45c:	1a 82       	std	Y+2, r1	; 0x02
 45e:	8b 83       	std	Y+3, r24	; 0x03
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	ce 01       	movw	r24, r28
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	93 d1       	rcall	.+806    	; 0x78e <TWI_Start_Transceiver_With_Data>
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <main>:
#include <util/delay.h>
#include <inttypes.h>


int main(void)
{
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	2b 97       	sbiw	r28, 0x0b	; 11
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
	//Initialises UART communication
	UART_init(9600);
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	95 e2       	ldi	r25, 0x25	; 37
 48c:	b0 df       	rcall	.-160    	; 0x3ee <UART_init>
	
	printf("start\n");
 48e:	87 e1       	ldi	r24, 0x17	; 23
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	ed d3       	rcall	.+2010   	; 0xc6e <puts>
	
	//CAN startup
	CAN_init(CAN_MODE_NORMAL);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	97 de       	rcall	.-722    	; 0x1c6 <CAN_init>
	
	//DAC init
	DAC_init();
 498:	d5 df       	rcall	.-86     	; 0x444 <DAC_init>
	
	//ADC init
	adc2560_init();
 49a:	c6 df       	rcall	.-116    	; 0x428 <adc2560_init>
	
	//CTRL init
	ctrl_init();
 49c:	5c d0       	rcall	.+184    	; 0x556 <ctrl_init>
	
	//Enables interrupts
	sei();
 49e:	78 94       	sei
	

	long int i = 0;
	int a = 0;
	ctrl_update_ref(0);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	46 d0       	rcall	.+140    	; 0x532 <ctrl_update_ref>
	while (1)
	{
		
		_delay_ms(100);
		struct can_frame message = CAN_frame_init(5,1);
		message.data[0] = 100;
 4a6:	14 e6       	ldi	r17, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	81 ee       	ldi	r24, 0xE1	; 225
 4ac:	94 e0       	ldi	r25, 0x04	; 4
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <main+0x3a>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <main+0x44>
 4b8:	00 00       	nop
	
	while (1)
	{
		
		_delay_ms(100);
		struct can_frame message = CAN_frame_init(5,1);
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	65 e0       	ldi	r22, 0x05	; 5
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	f3 de       	rcall	.-538    	; 0x2ac <CAN_frame_init>
		message.data[0] = 100;
 4c6:	1c 83       	std	Y+4, r17	; 0x04
		CAN_send_frame(&message);
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	9d de       	rcall	.-710    	; 0x208 <CAN_send_frame>
		printf("SENDING MESSAGE\n");
 4ce:	8d e1       	ldi	r24, 0x1D	; 29
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	cd d3       	rcall	.+1946   	; 0xc6e <puts>
 4d4:	e9 cf       	rjmp	.-46     	; 0x4a8 <main+0x34>

000004d6 <ctrl_read_encoder>:
{
	
	int16_t encoder_val = 0;
	
	//Enable Encoder
	PORTH &= ~(1 << O_E);		//Clears O_E to enable encoder
 4d6:	e2 e0       	ldi	r30, 0x02	; 2
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	80 81       	ld	r24, Z
 4dc:	8f 7d       	andi	r24, 0xDF	; 223
 4de:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	8a e6       	ldi	r24, 0x6A	; 106
 4e2:	8a 95       	dec	r24
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <ctrl_read_encoder+0xc>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <ctrl_read_encoder+0x12>
	_delay_us(20);
	
	PORTH &= ~(1 << SEL);
 4e8:	80 81       	ld	r24, Z
 4ea:	87 7f       	andi	r24, 0xF7	; 247
 4ec:	80 83       	st	Z, r24
 4ee:	9a e6       	ldi	r25, 0x6A	; 106
 4f0:	9a 95       	dec	r25
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <ctrl_read_encoder+0x1a>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <ctrl_read_encoder+0x20>
	_delay_us(20);
	
	encoder_val |= (PINK << 8);		//Reads upper bits of encoder
 4f6:	20 91 06 01 	lds	r18, 0x0106
	
	PORTH |= (1 << SEL);
 4fa:	80 81       	ld	r24, Z
 4fc:	88 60       	ori	r24, 0x08	; 8
 4fe:	80 83       	st	Z, r24
 500:	8a e6       	ldi	r24, 0x6A	; 106
 502:	8a 95       	dec	r24
 504:	f1 f7       	brne	.-4      	; 0x502 <ctrl_read_encoder+0x2c>
 506:	00 c0       	rjmp	.+0      	; 0x508 <ctrl_read_encoder+0x32>
	_delay_us(20);

	encoder_val |= (PINK << 0);		//Reads lower bits of encoder
 508:	80 91 06 01 	lds	r24, 0x0106
	
	//Toggles reset
	PORTH &= ~(1 << RST_);
 50c:	90 81       	ld	r25, Z
 50e:	9f 7b       	andi	r25, 0xBF	; 191
 510:	90 83       	st	Z, r25
 512:	9a e6       	ldi	r25, 0x6A	; 106
 514:	9a 95       	dec	r25
 516:	f1 f7       	brne	.-4      	; 0x514 <ctrl_read_encoder+0x3e>
 518:	00 c0       	rjmp	.+0      	; 0x51a <ctrl_read_encoder+0x44>
	_delay_us(20);
	PORTH |= (1 << RST_);
 51a:	90 81       	ld	r25, Z
 51c:	90 64       	ori	r25, 0x40	; 64
 51e:	90 83       	st	Z, r25
	
	//Sets O_E to disable encoder
	PORTH |= (1 << O_E);
 520:	90 81       	ld	r25, Z
 522:	90 62       	ori	r25, 0x20	; 32
 524:	90 83       	st	Z, r25
	_delay_us(20);
	
	PORTH &= ~(1 << SEL);
	_delay_us(20);
	
	encoder_val |= (PINK << 8);		//Reads upper bits of encoder
 526:	90 e0       	ldi	r25, 0x00	; 0
	
	PORTH |= (1 << SEL);
	_delay_us(20);

	encoder_val |= (PINK << 0);		//Reads lower bits of encoder
 528:	92 2b       	or	r25, r18
	//Sets O_E to disable encoder
	PORTH |= (1 << O_E);
	
	return -encoder_val;
	
}
 52a:	91 95       	neg	r25
 52c:	81 95       	neg	r24
 52e:	91 09       	sbc	r25, r1
 530:	08 95       	ret

00000532 <ctrl_update_ref>:
	
}

void ctrl_update_ref(int r)
{
	ref_vel = r;
 532:	90 93 42 02 	sts	0x0242, r25
 536:	80 93 41 02 	sts	0x0241, r24
 53a:	08 95       	ret

0000053c <ctrl_reset>:
}

void ctrl_reset()
{
	error_sum = 0;
 53c:	10 92 3d 02 	sts	0x023D, r1
 540:	10 92 3e 02 	sts	0x023E, r1
 544:	10 92 3f 02 	sts	0x023F, r1
 548:	10 92 40 02 	sts	0x0240, r1
	ref_vel = 0;
 54c:	10 92 42 02 	sts	0x0242, r1
 550:	10 92 41 02 	sts	0x0241, r1
 554:	08 95       	ret

00000556 <ctrl_init>:
float KI = 0.4;

void ctrl_init()
{
	//Enables output from pins
	DDRH = 0xFF;
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	80 93 01 01 	sts	0x0101, r24
	
	//Enables input from encoder
	DDRK = 0x00;
 55c:	10 92 07 01 	sts	0x0107, r1
	
	//Enables DAC
	DAC_init();
 560:	71 df       	rcall	.-286    	; 0x444 <DAC_init>
	
	//Enable motor
	PORTH |= (1 << EN);
 562:	e2 e0       	ldi	r30, 0x02	; 2
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	80 81       	ld	r24, Z
 568:	80 61       	ori	r24, 0x10	; 16
 56a:	80 83       	st	Z, r24
	
	//Enable !RST
	PORTH |= (1 << RST_);
 56c:	80 81       	ld	r24, Z
 56e:	80 64       	ori	r24, 0x40	; 64
 570:	80 83       	st	Z, r24
	
	//Resets all values
	ctrl_reset();
 572:	e4 df       	rcall	.-56     	; 0x53c <ctrl_reset>
	
	//Activate timer for regulating
	timer2560_init();
 574:	c2 d0       	rcall	.+388    	; 0x6fa <timer2560_init>
	
	//Activate DAC for controlling motor
	DAC_init();
 576:	66 df       	rcall	.-308    	; 0x444 <DAC_init>
	
	//Activate PA0 output
	DDRA |= (1 << SOL_PIN);
 578:	08 9a       	sbi	0x01, 0	; 1
	PORTA |= (1 << SOL_PIN);
 57a:	10 9a       	sbi	0x02, 0	; 2
 57c:	08 95       	ret

0000057e <ctrl_apply_voltage>:
}

void ctrl_apply_voltage(int v)
{
	//Switch direction of motor
	if (v < 0)
 57e:	99 23       	and	r25, r25
 580:	4c f4       	brge	.+18     	; 0x594 <ctrl_apply_voltage+0x16>
	{
		PORTH |= (1 << DIR);
 582:	e2 e0       	ldi	r30, 0x02	; 2
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	20 81       	ld	r18, Z
 588:	22 60       	ori	r18, 0x02	; 2
 58a:	20 83       	st	Z, r18
		v *= -1;
 58c:	91 95       	neg	r25
 58e:	81 95       	neg	r24
 590:	91 09       	sbc	r25, r1
 592:	05 c0       	rjmp	.+10     	; 0x59e <ctrl_apply_voltage+0x20>
	}
	else
	{
		PORTH &= ~(1 << DIR);
 594:	e2 e0       	ldi	r30, 0x02	; 2
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	20 81       	ld	r18, Z
 59a:	2d 7f       	andi	r18, 0xFD	; 253
 59c:	20 83       	st	Z, r18
	}
	
	DAC_write_bin(v);
 59e:	57 cf       	rjmp	.-338    	; 0x44e <DAC_write_bin>
 5a0:	08 95       	ret

000005a2 <ctrl_regulate>:
	return -encoder_val;
	
}

void ctrl_regulate()
{	
 5a2:	8f 92       	push	r8
 5a4:	9f 92       	push	r9
 5a6:	af 92       	push	r10
 5a8:	bf 92       	push	r11
 5aa:	cf 92       	push	r12
 5ac:	df 92       	push	r13
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
	//Measure velocity
	curr_vel = ctrl_read_encoder();
 5b2:	91 df       	rcall	.-222    	; 0x4d6 <ctrl_read_encoder>
 5b4:	90 93 3c 02 	sts	0x023C, r25
 5b8:	80 93 3b 02 	sts	0x023B, r24
	
	//Calculate error
	curr_error = CONTROLLER_DT*curr_vel - ref_vel;
 5bc:	60 91 3b 02 	lds	r22, 0x023B
 5c0:	70 91 3c 02 	lds	r23, 0x023C
 5c4:	a0 90 41 02 	lds	r10, 0x0241
 5c8:	b0 90 42 02 	lds	r11, 0x0242
 5cc:	88 27       	eor	r24, r24
 5ce:	77 fd       	sbrc	r23, 7
 5d0:	80 95       	com	r24
 5d2:	98 2f       	mov	r25, r24
 5d4:	5d d2       	rcall	.+1210   	; 0xa90 <__floatsisf>
 5d6:	2d ec       	ldi	r18, 0xCD	; 205
 5d8:	3c ec       	ldi	r19, 0xCC	; 204
 5da:	4c e4       	ldi	r20, 0x4C	; 76
 5dc:	5d e3       	ldi	r21, 0x3D	; 61
 5de:	e4 d2       	rcall	.+1480   	; 0xba8 <__mulsf3>
 5e0:	6b 01       	movw	r12, r22
 5e2:	7c 01       	movw	r14, r24
 5e4:	b5 01       	movw	r22, r10
 5e6:	88 27       	eor	r24, r24
 5e8:	77 fd       	sbrc	r23, 7
 5ea:	80 95       	com	r24
 5ec:	98 2f       	mov	r25, r24
 5ee:	50 d2       	rcall	.+1184   	; 0xa90 <__floatsisf>
 5f0:	9b 01       	movw	r18, r22
 5f2:	ac 01       	movw	r20, r24
 5f4:	c7 01       	movw	r24, r14
 5f6:	b6 01       	movw	r22, r12
 5f8:	b3 d1       	rcall	.+870    	; 0x960 <__subsf3>
 5fa:	17 d2       	rcall	.+1070   	; 0xa2a <__fixsfsi>
 5fc:	70 93 3a 02 	sts	0x023A, r23
 600:	60 93 39 02 	sts	0x0239, r22
	
	//Update error sum
	error_sum += CONTROLLER_DT * curr_error;
 604:	60 91 39 02 	lds	r22, 0x0239
 608:	70 91 3a 02 	lds	r23, 0x023A
 60c:	c0 90 3d 02 	lds	r12, 0x023D
 610:	d0 90 3e 02 	lds	r13, 0x023E
 614:	e0 90 3f 02 	lds	r14, 0x023F
 618:	f0 90 40 02 	lds	r15, 0x0240
 61c:	88 27       	eor	r24, r24
 61e:	77 fd       	sbrc	r23, 7
 620:	80 95       	com	r24
 622:	98 2f       	mov	r25, r24
 624:	35 d2       	rcall	.+1130   	; 0xa90 <__floatsisf>
 626:	2d ec       	ldi	r18, 0xCD	; 205
 628:	3c ec       	ldi	r19, 0xCC	; 204
 62a:	4c e4       	ldi	r20, 0x4C	; 76
 62c:	5d e3       	ldi	r21, 0x3D	; 61
 62e:	bc d2       	rcall	.+1400   	; 0xba8 <__mulsf3>
 630:	a7 01       	movw	r20, r14
 632:	96 01       	movw	r18, r12
 634:	96 d1       	rcall	.+812    	; 0x962 <__addsf3>
 636:	60 93 3d 02 	sts	0x023D, r22
 63a:	70 93 3e 02 	sts	0x023E, r23
 63e:	80 93 3f 02 	sts	0x023F, r24
 642:	90 93 40 02 	sts	0x0240, r25
	
	//Calculate voltage
	curr_u = KP*curr_error + KI*error_sum;
 646:	60 91 39 02 	lds	r22, 0x0239
 64a:	70 91 3a 02 	lds	r23, 0x023A
 64e:	80 90 3d 02 	lds	r8, 0x023D
 652:	90 90 3e 02 	lds	r9, 0x023E
 656:	a0 90 3f 02 	lds	r10, 0x023F
 65a:	b0 90 40 02 	lds	r11, 0x0240
 65e:	88 27       	eor	r24, r24
 660:	77 fd       	sbrc	r23, 7
 662:	80 95       	com	r24
 664:	98 2f       	mov	r25, r24
 666:	14 d2       	rcall	.+1064   	; 0xa90 <__floatsisf>
 668:	20 91 12 02 	lds	r18, 0x0212
 66c:	30 91 13 02 	lds	r19, 0x0213
 670:	40 91 14 02 	lds	r20, 0x0214
 674:	50 91 15 02 	lds	r21, 0x0215
 678:	97 d2       	rcall	.+1326   	; 0xba8 <__mulsf3>
 67a:	6b 01       	movw	r12, r22
 67c:	7c 01       	movw	r14, r24
 67e:	20 91 0e 02 	lds	r18, 0x020E
 682:	30 91 0f 02 	lds	r19, 0x020F
 686:	40 91 10 02 	lds	r20, 0x0210
 68a:	50 91 11 02 	lds	r21, 0x0211
 68e:	c5 01       	movw	r24, r10
 690:	b4 01       	movw	r22, r8
 692:	8a d2       	rcall	.+1300   	; 0xba8 <__mulsf3>
 694:	9b 01       	movw	r18, r22
 696:	ac 01       	movw	r20, r24
 698:	c7 01       	movw	r24, r14
 69a:	b6 01       	movw	r22, r12
 69c:	62 d1       	rcall	.+708    	; 0x962 <__addsf3>
 69e:	c5 d1       	rcall	.+906    	; 0xa2a <__fixsfsi>
 6a0:	70 93 38 02 	sts	0x0238, r23
 6a4:	60 93 37 02 	sts	0x0237, r22
	
	//Limit u
	if (curr_u > 255) curr_u = 255;
 6a8:	80 91 37 02 	lds	r24, 0x0237
 6ac:	90 91 38 02 	lds	r25, 0x0238
 6b0:	8f 3f       	cpi	r24, 0xFF	; 255
 6b2:	91 05       	cpc	r25, r1
 6b4:	39 f0       	breq	.+14     	; 0x6c4 <ctrl_regulate+0x122>
 6b6:	34 f0       	brlt	.+12     	; 0x6c4 <ctrl_regulate+0x122>
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	90 93 38 02 	sts	0x0238, r25
 6c0:	80 93 37 02 	sts	0x0237, r24
	if (curr_u < -255) curr_u = -255;
 6c4:	80 91 37 02 	lds	r24, 0x0237
 6c8:	90 91 38 02 	lds	r25, 0x0238
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	34 f4       	brge	.+12     	; 0x6de <ctrl_regulate+0x13c>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	90 93 38 02 	sts	0x0238, r25
 6da:	80 93 37 02 	sts	0x0237, r24
	
	//Apply 
	ctrl_apply_voltage(curr_u);
 6de:	80 91 37 02 	lds	r24, 0x0237
 6e2:	90 91 38 02 	lds	r25, 0x0238
 6e6:	4b df       	rcall	.-362    	; 0x57e <ctrl_apply_voltage>
	
}
 6e8:	ff 90       	pop	r15
 6ea:	ef 90       	pop	r14
 6ec:	df 90       	pop	r13
 6ee:	cf 90       	pop	r12
 6f0:	bf 90       	pop	r11
 6f2:	af 90       	pop	r10
 6f4:	9f 90       	pop	r9
 6f6:	8f 90       	pop	r8
 6f8:	08 95       	ret

000006fa <timer2560_init>:
#include <avr/interrupt.h>

int timer2560_init()
{
	
	TCCR3A |= (1 << WGM31) | (0 << WGM30); //ENABLE CTC MODE
 6fa:	e0 e9       	ldi	r30, 0x90	; 144
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	82 60       	ori	r24, 0x02	; 2
 702:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32) | (0 << WGM33); //ENABLE CTC MODE
 704:	e1 e9       	ldi	r30, 0x91	; 145
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	88 60       	ori	r24, 0x08	; 8
 70c:	80 83       	st	Z, r24
	
	TCCR3B |= (3 << CS30);  //Prescaler at 64
 70e:	80 81       	ld	r24, Z
 710:	83 60       	ori	r24, 0x03	; 3
 712:	80 83       	st	Z, r24
	
	OCR3A = (F_CPU/64) * CONTROLLER_DT; //Sets compare value according to controller DT 
 714:	84 ed       	ldi	r24, 0xD4	; 212
 716:	90 e3       	ldi	r25, 0x30	; 48
 718:	90 93 99 00 	sts	0x0099, r25
 71c:	80 93 98 00 	sts	0x0098, r24
	
	TIMSK3 = (1 << OCIE3A); //Enable interrupt
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	80 93 71 00 	sts	0x0071, r24
	
	return 0;
}
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	08 95       	ret

0000072c <__vector_32>:

//Enables interrupt vector, regulates when timer goes off
ISR(TIMER3_COMPA_vect)
{
 72c:	1f 92       	push	r1
 72e:	0f 92       	push	r0
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	0f 92       	push	r0
 734:	11 24       	eor	r1, r1
 736:	0b b6       	in	r0, 0x3b	; 59
 738:	0f 92       	push	r0
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	4f 93       	push	r20
 740:	5f 93       	push	r21
 742:	6f 93       	push	r22
 744:	7f 93       	push	r23
 746:	8f 93       	push	r24
 748:	9f 93       	push	r25
 74a:	af 93       	push	r26
 74c:	bf 93       	push	r27
 74e:	ef 93       	push	r30
 750:	ff 93       	push	r31
	//printf("%d, %d ",OCR3A,TCNT3);
	ctrl_regulate();
 752:	27 df       	rcall	.-434    	; 0x5a2 <ctrl_regulate>
	//printf("Test\n");
}
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0b be       	out	0x3b, r0	; 59
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	0f 90       	pop	r0
 776:	1f 90       	pop	r1
 778:	18 95       	reti

0000077a <TWI_Master_Initialise>:
 77a:	8c e0       	ldi	r24, 0x0C	; 12
 77c:	80 93 b8 00 	sts	0x00B8, r24
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	80 93 bb 00 	sts	0x00BB, r24
 786:	84 e0       	ldi	r24, 0x04	; 4
 788:	80 93 bc 00 	sts	0x00BC, r24
 78c:	08 95       	ret

0000078e <TWI_Start_Transceiver_With_Data>:
 78e:	ec eb       	ldi	r30, 0xBC	; 188
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	20 81       	ld	r18, Z
 794:	20 fd       	sbrc	r18, 0
 796:	fd cf       	rjmp	.-6      	; 0x792 <TWI_Start_Transceiver_With_Data+0x4>
 798:	60 93 32 02 	sts	0x0232, r22
 79c:	fc 01       	movw	r30, r24
 79e:	20 81       	ld	r18, Z
 7a0:	20 93 33 02 	sts	0x0233, r18
 7a4:	20 fd       	sbrc	r18, 0
 7a6:	0c c0       	rjmp	.+24     	; 0x7c0 <TWI_Start_Transceiver_With_Data+0x32>
 7a8:	62 30       	cpi	r22, 0x02	; 2
 7aa:	50 f0       	brcs	.+20     	; 0x7c0 <TWI_Start_Transceiver_With_Data+0x32>
 7ac:	dc 01       	movw	r26, r24
 7ae:	11 96       	adiw	r26, 0x01	; 1
 7b0:	e4 e3       	ldi	r30, 0x34	; 52
 7b2:	f2 e0       	ldi	r31, 0x02	; 2
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	9d 91       	ld	r25, X+
 7b8:	91 93       	st	Z+, r25
 7ba:	8f 5f       	subi	r24, 0xFF	; 255
 7bc:	86 13       	cpse	r24, r22
 7be:	fb cf       	rjmp	.-10     	; 0x7b6 <TWI_Start_Transceiver_With_Data+0x28>
 7c0:	10 92 31 02 	sts	0x0231, r1
 7c4:	88 ef       	ldi	r24, 0xF8	; 248
 7c6:	80 93 16 02 	sts	0x0216, r24
 7ca:	85 ea       	ldi	r24, 0xA5	; 165
 7cc:	80 93 bc 00 	sts	0x00BC, r24
 7d0:	08 95       	ret

000007d2 <__vector_39>:
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	0b b6       	in	r0, 0x3b	; 59
 7de:	0f 92       	push	r0
 7e0:	2f 93       	push	r18
 7e2:	3f 93       	push	r19
 7e4:	8f 93       	push	r24
 7e6:	9f 93       	push	r25
 7e8:	af 93       	push	r26
 7ea:	bf 93       	push	r27
 7ec:	ef 93       	push	r30
 7ee:	ff 93       	push	r31
 7f0:	80 91 b9 00 	lds	r24, 0x00B9
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	fc 01       	movw	r30, r24
 7f8:	38 97       	sbiw	r30, 0x08	; 8
 7fa:	e1 35       	cpi	r30, 0x51	; 81
 7fc:	f1 05       	cpc	r31, r1
 7fe:	08 f0       	brcs	.+2      	; 0x802 <__vector_39+0x30>
 800:	55 c0       	rjmp	.+170    	; 0x8ac <__vector_39+0xda>
 802:	ee 58       	subi	r30, 0x8E	; 142
 804:	ff 4f       	sbci	r31, 0xFF	; 255
 806:	84 c0       	rjmp	.+264    	; 0x910 <__tablejump2__>
 808:	10 92 30 02 	sts	0x0230, r1
 80c:	e0 91 30 02 	lds	r30, 0x0230
 810:	80 91 32 02 	lds	r24, 0x0232
 814:	e8 17       	cp	r30, r24
 816:	70 f4       	brcc	.+28     	; 0x834 <__vector_39+0x62>
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	8e 0f       	add	r24, r30
 81c:	80 93 30 02 	sts	0x0230, r24
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	ed 5c       	subi	r30, 0xCD	; 205
 824:	fd 4f       	sbci	r31, 0xFD	; 253
 826:	80 81       	ld	r24, Z
 828:	80 93 bb 00 	sts	0x00BB, r24
 82c:	85 e8       	ldi	r24, 0x85	; 133
 82e:	80 93 bc 00 	sts	0x00BC, r24
 832:	43 c0       	rjmp	.+134    	; 0x8ba <__vector_39+0xe8>
 834:	80 91 31 02 	lds	r24, 0x0231
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	80 93 31 02 	sts	0x0231, r24
 83e:	84 e9       	ldi	r24, 0x94	; 148
 840:	80 93 bc 00 	sts	0x00BC, r24
 844:	3a c0       	rjmp	.+116    	; 0x8ba <__vector_39+0xe8>
 846:	e0 91 30 02 	lds	r30, 0x0230
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	8e 0f       	add	r24, r30
 84e:	80 93 30 02 	sts	0x0230, r24
 852:	80 91 bb 00 	lds	r24, 0x00BB
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	ed 5c       	subi	r30, 0xCD	; 205
 85a:	fd 4f       	sbci	r31, 0xFD	; 253
 85c:	80 83       	st	Z, r24
 85e:	20 91 30 02 	lds	r18, 0x0230
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	80 91 32 02 	lds	r24, 0x0232
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	28 17       	cp	r18, r24
 86e:	39 07       	cpc	r19, r25
 870:	24 f4       	brge	.+8      	; 0x87a <__vector_39+0xa8>
 872:	85 ec       	ldi	r24, 0xC5	; 197
 874:	80 93 bc 00 	sts	0x00BC, r24
 878:	20 c0       	rjmp	.+64     	; 0x8ba <__vector_39+0xe8>
 87a:	85 e8       	ldi	r24, 0x85	; 133
 87c:	80 93 bc 00 	sts	0x00BC, r24
 880:	1c c0       	rjmp	.+56     	; 0x8ba <__vector_39+0xe8>
 882:	80 91 bb 00 	lds	r24, 0x00BB
 886:	e0 91 30 02 	lds	r30, 0x0230
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	ed 5c       	subi	r30, 0xCD	; 205
 88e:	fd 4f       	sbci	r31, 0xFD	; 253
 890:	80 83       	st	Z, r24
 892:	80 91 31 02 	lds	r24, 0x0231
 896:	81 60       	ori	r24, 0x01	; 1
 898:	80 93 31 02 	sts	0x0231, r24
 89c:	84 e9       	ldi	r24, 0x94	; 148
 89e:	80 93 bc 00 	sts	0x00BC, r24
 8a2:	0b c0       	rjmp	.+22     	; 0x8ba <__vector_39+0xe8>
 8a4:	85 ea       	ldi	r24, 0xA5	; 165
 8a6:	80 93 bc 00 	sts	0x00BC, r24
 8aa:	07 c0       	rjmp	.+14     	; 0x8ba <__vector_39+0xe8>
 8ac:	80 91 b9 00 	lds	r24, 0x00B9
 8b0:	80 93 16 02 	sts	0x0216, r24
 8b4:	84 e0       	ldi	r24, 0x04	; 4
 8b6:	80 93 bc 00 	sts	0x00BC, r24
 8ba:	ff 91       	pop	r31
 8bc:	ef 91       	pop	r30
 8be:	bf 91       	pop	r27
 8c0:	af 91       	pop	r26
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	0f 90       	pop	r0
 8cc:	0b be       	out	0x3b, r0	; 59
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <__divmodsi4>:
 8d8:	05 2e       	mov	r0, r21
 8da:	97 fb       	bst	r25, 7
 8dc:	16 f4       	brtc	.+4      	; 0x8e2 <__divmodsi4+0xa>
 8de:	00 94       	com	r0
 8e0:	0f d0       	rcall	.+30     	; 0x900 <__negsi2>
 8e2:	57 fd       	sbrc	r21, 7
 8e4:	05 d0       	rcall	.+10     	; 0x8f0 <__divmodsi4_neg2>
 8e6:	1a d0       	rcall	.+52     	; 0x91c <__udivmodsi4>
 8e8:	07 fc       	sbrc	r0, 7
 8ea:	02 d0       	rcall	.+4      	; 0x8f0 <__divmodsi4_neg2>
 8ec:	46 f4       	brtc	.+16     	; 0x8fe <__divmodsi4_exit>
 8ee:	08 c0       	rjmp	.+16     	; 0x900 <__negsi2>

000008f0 <__divmodsi4_neg2>:
 8f0:	50 95       	com	r21
 8f2:	40 95       	com	r20
 8f4:	30 95       	com	r19
 8f6:	21 95       	neg	r18
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	4f 4f       	sbci	r20, 0xFF	; 255
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255

000008fe <__divmodsi4_exit>:
 8fe:	08 95       	ret

00000900 <__negsi2>:
 900:	90 95       	com	r25
 902:	80 95       	com	r24
 904:	70 95       	com	r23
 906:	61 95       	neg	r22
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__tablejump2__>:
 910:	ee 0f       	add	r30, r30
 912:	ff 1f       	adc	r31, r31

00000914 <__tablejump__>:
 914:	05 90       	lpm	r0, Z+
 916:	f4 91       	lpm	r31, Z
 918:	e0 2d       	mov	r30, r0
 91a:	19 94       	eijmp

0000091c <__udivmodsi4>:
 91c:	a1 e2       	ldi	r26, 0x21	; 33
 91e:	1a 2e       	mov	r1, r26
 920:	aa 1b       	sub	r26, r26
 922:	bb 1b       	sub	r27, r27
 924:	fd 01       	movw	r30, r26
 926:	0d c0       	rjmp	.+26     	; 0x942 <__udivmodsi4_ep>

00000928 <__udivmodsi4_loop>:
 928:	aa 1f       	adc	r26, r26
 92a:	bb 1f       	adc	r27, r27
 92c:	ee 1f       	adc	r30, r30
 92e:	ff 1f       	adc	r31, r31
 930:	a2 17       	cp	r26, r18
 932:	b3 07       	cpc	r27, r19
 934:	e4 07       	cpc	r30, r20
 936:	f5 07       	cpc	r31, r21
 938:	20 f0       	brcs	.+8      	; 0x942 <__udivmodsi4_ep>
 93a:	a2 1b       	sub	r26, r18
 93c:	b3 0b       	sbc	r27, r19
 93e:	e4 0b       	sbc	r30, r20
 940:	f5 0b       	sbc	r31, r21

00000942 <__udivmodsi4_ep>:
 942:	66 1f       	adc	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	1a 94       	dec	r1
 94c:	69 f7       	brne	.-38     	; 0x928 <__udivmodsi4_loop>
 94e:	60 95       	com	r22
 950:	70 95       	com	r23
 952:	80 95       	com	r24
 954:	90 95       	com	r25
 956:	9b 01       	movw	r18, r22
 958:	ac 01       	movw	r20, r24
 95a:	bd 01       	movw	r22, r26
 95c:	cf 01       	movw	r24, r30
 95e:	08 95       	ret

00000960 <__subsf3>:
 960:	50 58       	subi	r21, 0x80	; 128

00000962 <__addsf3>:
 962:	bb 27       	eor	r27, r27
 964:	aa 27       	eor	r26, r26
 966:	0e d0       	rcall	.+28     	; 0x984 <__addsf3x>
 968:	e5 c0       	rjmp	.+458    	; 0xb34 <__fp_round>
 96a:	d6 d0       	rcall	.+428    	; 0xb18 <__fp_pscA>
 96c:	30 f0       	brcs	.+12     	; 0x97a <__addsf3+0x18>
 96e:	db d0       	rcall	.+438    	; 0xb26 <__fp_pscB>
 970:	20 f0       	brcs	.+8      	; 0x97a <__addsf3+0x18>
 972:	31 f4       	brne	.+12     	; 0x980 <__addsf3+0x1e>
 974:	9f 3f       	cpi	r25, 0xFF	; 255
 976:	11 f4       	brne	.+4      	; 0x97c <__addsf3+0x1a>
 978:	1e f4       	brtc	.+6      	; 0x980 <__addsf3+0x1e>
 97a:	cb c0       	rjmp	.+406    	; 0xb12 <__fp_nan>
 97c:	0e f4       	brtc	.+2      	; 0x980 <__addsf3+0x1e>
 97e:	e0 95       	com	r30
 980:	e7 fb       	bst	r30, 7
 982:	c1 c0       	rjmp	.+386    	; 0xb06 <__fp_inf>

00000984 <__addsf3x>:
 984:	e9 2f       	mov	r30, r25
 986:	e7 d0       	rcall	.+462    	; 0xb56 <__fp_split3>
 988:	80 f3       	brcs	.-32     	; 0x96a <__addsf3+0x8>
 98a:	ba 17       	cp	r27, r26
 98c:	62 07       	cpc	r22, r18
 98e:	73 07       	cpc	r23, r19
 990:	84 07       	cpc	r24, r20
 992:	95 07       	cpc	r25, r21
 994:	18 f0       	brcs	.+6      	; 0x99c <__addsf3x+0x18>
 996:	71 f4       	brne	.+28     	; 0x9b4 <__addsf3x+0x30>
 998:	9e f5       	brtc	.+102    	; 0xa00 <__addsf3x+0x7c>
 99a:	ff c0       	rjmp	.+510    	; 0xb9a <__fp_zero>
 99c:	0e f4       	brtc	.+2      	; 0x9a0 <__addsf3x+0x1c>
 99e:	e0 95       	com	r30
 9a0:	0b 2e       	mov	r0, r27
 9a2:	ba 2f       	mov	r27, r26
 9a4:	a0 2d       	mov	r26, r0
 9a6:	0b 01       	movw	r0, r22
 9a8:	b9 01       	movw	r22, r18
 9aa:	90 01       	movw	r18, r0
 9ac:	0c 01       	movw	r0, r24
 9ae:	ca 01       	movw	r24, r20
 9b0:	a0 01       	movw	r20, r0
 9b2:	11 24       	eor	r1, r1
 9b4:	ff 27       	eor	r31, r31
 9b6:	59 1b       	sub	r21, r25
 9b8:	99 f0       	breq	.+38     	; 0x9e0 <__addsf3x+0x5c>
 9ba:	59 3f       	cpi	r21, 0xF9	; 249
 9bc:	50 f4       	brcc	.+20     	; 0x9d2 <__addsf3x+0x4e>
 9be:	50 3e       	cpi	r21, 0xE0	; 224
 9c0:	68 f1       	brcs	.+90     	; 0xa1c <__addsf3x+0x98>
 9c2:	1a 16       	cp	r1, r26
 9c4:	f0 40       	sbci	r31, 0x00	; 0
 9c6:	a2 2f       	mov	r26, r18
 9c8:	23 2f       	mov	r18, r19
 9ca:	34 2f       	mov	r19, r20
 9cc:	44 27       	eor	r20, r20
 9ce:	58 5f       	subi	r21, 0xF8	; 248
 9d0:	f3 cf       	rjmp	.-26     	; 0x9b8 <__addsf3x+0x34>
 9d2:	46 95       	lsr	r20
 9d4:	37 95       	ror	r19
 9d6:	27 95       	ror	r18
 9d8:	a7 95       	ror	r26
 9da:	f0 40       	sbci	r31, 0x00	; 0
 9dc:	53 95       	inc	r21
 9de:	c9 f7       	brne	.-14     	; 0x9d2 <__addsf3x+0x4e>
 9e0:	7e f4       	brtc	.+30     	; 0xa00 <__addsf3x+0x7c>
 9e2:	1f 16       	cp	r1, r31
 9e4:	ba 0b       	sbc	r27, r26
 9e6:	62 0b       	sbc	r22, r18
 9e8:	73 0b       	sbc	r23, r19
 9ea:	84 0b       	sbc	r24, r20
 9ec:	ba f0       	brmi	.+46     	; 0xa1c <__addsf3x+0x98>
 9ee:	91 50       	subi	r25, 0x01	; 1
 9f0:	a1 f0       	breq	.+40     	; 0xa1a <__addsf3x+0x96>
 9f2:	ff 0f       	add	r31, r31
 9f4:	bb 1f       	adc	r27, r27
 9f6:	66 1f       	adc	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	c2 f7       	brpl	.-16     	; 0x9ee <__addsf3x+0x6a>
 9fe:	0e c0       	rjmp	.+28     	; 0xa1c <__addsf3x+0x98>
 a00:	ba 0f       	add	r27, r26
 a02:	62 1f       	adc	r22, r18
 a04:	73 1f       	adc	r23, r19
 a06:	84 1f       	adc	r24, r20
 a08:	48 f4       	brcc	.+18     	; 0xa1c <__addsf3x+0x98>
 a0a:	87 95       	ror	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	b7 95       	ror	r27
 a12:	f7 95       	ror	r31
 a14:	9e 3f       	cpi	r25, 0xFE	; 254
 a16:	08 f0       	brcs	.+2      	; 0xa1a <__addsf3x+0x96>
 a18:	b3 cf       	rjmp	.-154    	; 0x980 <__addsf3+0x1e>
 a1a:	93 95       	inc	r25
 a1c:	88 0f       	add	r24, r24
 a1e:	08 f0       	brcs	.+2      	; 0xa22 <__addsf3x+0x9e>
 a20:	99 27       	eor	r25, r25
 a22:	ee 0f       	add	r30, r30
 a24:	97 95       	ror	r25
 a26:	87 95       	ror	r24
 a28:	08 95       	ret

00000a2a <__fixsfsi>:
 a2a:	04 d0       	rcall	.+8      	; 0xa34 <__fixunssfsi>
 a2c:	68 94       	set
 a2e:	b1 11       	cpse	r27, r1
 a30:	b5 c0       	rjmp	.+362    	; 0xb9c <__fp_szero>
 a32:	08 95       	ret

00000a34 <__fixunssfsi>:
 a34:	98 d0       	rcall	.+304    	; 0xb66 <__fp_splitA>
 a36:	88 f0       	brcs	.+34     	; 0xa5a <__fixunssfsi+0x26>
 a38:	9f 57       	subi	r25, 0x7F	; 127
 a3a:	90 f0       	brcs	.+36     	; 0xa60 <__fixunssfsi+0x2c>
 a3c:	b9 2f       	mov	r27, r25
 a3e:	99 27       	eor	r25, r25
 a40:	b7 51       	subi	r27, 0x17	; 23
 a42:	a0 f0       	brcs	.+40     	; 0xa6c <__fixunssfsi+0x38>
 a44:	d1 f0       	breq	.+52     	; 0xa7a <__fixunssfsi+0x46>
 a46:	66 0f       	add	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	1a f0       	brmi	.+6      	; 0xa56 <__fixunssfsi+0x22>
 a50:	ba 95       	dec	r27
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__fixunssfsi+0x12>
 a54:	12 c0       	rjmp	.+36     	; 0xa7a <__fixunssfsi+0x46>
 a56:	b1 30       	cpi	r27, 0x01	; 1
 a58:	81 f0       	breq	.+32     	; 0xa7a <__fixunssfsi+0x46>
 a5a:	9f d0       	rcall	.+318    	; 0xb9a <__fp_zero>
 a5c:	b1 e0       	ldi	r27, 0x01	; 1
 a5e:	08 95       	ret
 a60:	9c c0       	rjmp	.+312    	; 0xb9a <__fp_zero>
 a62:	67 2f       	mov	r22, r23
 a64:	78 2f       	mov	r23, r24
 a66:	88 27       	eor	r24, r24
 a68:	b8 5f       	subi	r27, 0xF8	; 248
 a6a:	39 f0       	breq	.+14     	; 0xa7a <__fixunssfsi+0x46>
 a6c:	b9 3f       	cpi	r27, 0xF9	; 249
 a6e:	cc f3       	brlt	.-14     	; 0xa62 <__fixunssfsi+0x2e>
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b3 95       	inc	r27
 a78:	d9 f7       	brne	.-10     	; 0xa70 <__fixunssfsi+0x3c>
 a7a:	3e f4       	brtc	.+14     	; 0xa8a <__fixunssfsi+0x56>
 a7c:	90 95       	com	r25
 a7e:	80 95       	com	r24
 a80:	70 95       	com	r23
 a82:	61 95       	neg	r22
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__floatunsisf>:
 a8c:	e8 94       	clt
 a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <__floatsisf+0x12>

00000a90 <__floatsisf>:
 a90:	97 fb       	bst	r25, 7
 a92:	3e f4       	brtc	.+14     	; 0xaa2 <__floatsisf+0x12>
 a94:	90 95       	com	r25
 a96:	80 95       	com	r24
 a98:	70 95       	com	r23
 a9a:	61 95       	neg	r22
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	99 23       	and	r25, r25
 aa4:	a9 f0       	breq	.+42     	; 0xad0 <__floatsisf+0x40>
 aa6:	f9 2f       	mov	r31, r25
 aa8:	96 e9       	ldi	r25, 0x96	; 150
 aaa:	bb 27       	eor	r27, r27
 aac:	93 95       	inc	r25
 aae:	f6 95       	lsr	r31
 ab0:	87 95       	ror	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f1 11       	cpse	r31, r1
 aba:	f8 cf       	rjmp	.-16     	; 0xaac <__floatsisf+0x1c>
 abc:	fa f4       	brpl	.+62     	; 0xafc <__floatsisf+0x6c>
 abe:	bb 0f       	add	r27, r27
 ac0:	11 f4       	brne	.+4      	; 0xac6 <__floatsisf+0x36>
 ac2:	60 ff       	sbrs	r22, 0
 ac4:	1b c0       	rjmp	.+54     	; 0xafc <__floatsisf+0x6c>
 ac6:	6f 5f       	subi	r22, 0xFF	; 255
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	16 c0       	rjmp	.+44     	; 0xafc <__floatsisf+0x6c>
 ad0:	88 23       	and	r24, r24
 ad2:	11 f0       	breq	.+4      	; 0xad8 <__floatsisf+0x48>
 ad4:	96 e9       	ldi	r25, 0x96	; 150
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <__floatsisf+0x6a>
 ad8:	77 23       	and	r23, r23
 ada:	21 f0       	breq	.+8      	; 0xae4 <__floatsisf+0x54>
 adc:	9e e8       	ldi	r25, 0x8E	; 142
 ade:	87 2f       	mov	r24, r23
 ae0:	76 2f       	mov	r23, r22
 ae2:	05 c0       	rjmp	.+10     	; 0xaee <__floatsisf+0x5e>
 ae4:	66 23       	and	r22, r22
 ae6:	71 f0       	breq	.+28     	; 0xb04 <__floatsisf+0x74>
 ae8:	96 e8       	ldi	r25, 0x86	; 134
 aea:	86 2f       	mov	r24, r22
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	2a f0       	brmi	.+10     	; 0xafc <__floatsisf+0x6c>
 af2:	9a 95       	dec	r25
 af4:	66 0f       	add	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	88 1f       	adc	r24, r24
 afa:	da f7       	brpl	.-10     	; 0xaf2 <__floatsisf+0x62>
 afc:	88 0f       	add	r24, r24
 afe:	96 95       	lsr	r25
 b00:	87 95       	ror	r24
 b02:	97 f9       	bld	r25, 7
 b04:	08 95       	ret

00000b06 <__fp_inf>:
 b06:	97 f9       	bld	r25, 7
 b08:	9f 67       	ori	r25, 0x7F	; 127
 b0a:	80 e8       	ldi	r24, 0x80	; 128
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	08 95       	ret

00000b12 <__fp_nan>:
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	80 ec       	ldi	r24, 0xC0	; 192
 b16:	08 95       	ret

00000b18 <__fp_pscA>:
 b18:	00 24       	eor	r0, r0
 b1a:	0a 94       	dec	r0
 b1c:	16 16       	cp	r1, r22
 b1e:	17 06       	cpc	r1, r23
 b20:	18 06       	cpc	r1, r24
 b22:	09 06       	cpc	r0, r25
 b24:	08 95       	ret

00000b26 <__fp_pscB>:
 b26:	00 24       	eor	r0, r0
 b28:	0a 94       	dec	r0
 b2a:	12 16       	cp	r1, r18
 b2c:	13 06       	cpc	r1, r19
 b2e:	14 06       	cpc	r1, r20
 b30:	05 06       	cpc	r0, r21
 b32:	08 95       	ret

00000b34 <__fp_round>:
 b34:	09 2e       	mov	r0, r25
 b36:	03 94       	inc	r0
 b38:	00 0c       	add	r0, r0
 b3a:	11 f4       	brne	.+4      	; 0xb40 <__fp_round+0xc>
 b3c:	88 23       	and	r24, r24
 b3e:	52 f0       	brmi	.+20     	; 0xb54 <__fp_round+0x20>
 b40:	bb 0f       	add	r27, r27
 b42:	40 f4       	brcc	.+16     	; 0xb54 <__fp_round+0x20>
 b44:	bf 2b       	or	r27, r31
 b46:	11 f4       	brne	.+4      	; 0xb4c <__fp_round+0x18>
 b48:	60 ff       	sbrs	r22, 0
 b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__fp_round+0x20>
 b4c:	6f 5f       	subi	r22, 0xFF	; 255
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	08 95       	ret

00000b56 <__fp_split3>:
 b56:	57 fd       	sbrc	r21, 7
 b58:	90 58       	subi	r25, 0x80	; 128
 b5a:	44 0f       	add	r20, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	59 f0       	breq	.+22     	; 0xb76 <__fp_splitA+0x10>
 b60:	5f 3f       	cpi	r21, 0xFF	; 255
 b62:	71 f0       	breq	.+28     	; 0xb80 <__fp_splitA+0x1a>
 b64:	47 95       	ror	r20

00000b66 <__fp_splitA>:
 b66:	88 0f       	add	r24, r24
 b68:	97 fb       	bst	r25, 7
 b6a:	99 1f       	adc	r25, r25
 b6c:	61 f0       	breq	.+24     	; 0xb86 <__fp_splitA+0x20>
 b6e:	9f 3f       	cpi	r25, 0xFF	; 255
 b70:	79 f0       	breq	.+30     	; 0xb90 <__fp_splitA+0x2a>
 b72:	87 95       	ror	r24
 b74:	08 95       	ret
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	f2 cf       	rjmp	.-28     	; 0xb64 <__fp_split3+0xe>
 b80:	46 95       	lsr	r20
 b82:	f1 df       	rcall	.-30     	; 0xb66 <__fp_splitA>
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <__fp_splitA+0x30>
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	f1 cf       	rjmp	.-30     	; 0xb72 <__fp_splitA+0xc>
 b90:	86 95       	lsr	r24
 b92:	71 05       	cpc	r23, r1
 b94:	61 05       	cpc	r22, r1
 b96:	08 94       	sec
 b98:	08 95       	ret

00000b9a <__fp_zero>:
 b9a:	e8 94       	clt

00000b9c <__fp_szero>:
 b9c:	bb 27       	eor	r27, r27
 b9e:	66 27       	eor	r22, r22
 ba0:	77 27       	eor	r23, r23
 ba2:	cb 01       	movw	r24, r22
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret

00000ba8 <__mulsf3>:
 ba8:	0b d0       	rcall	.+22     	; 0xbc0 <__mulsf3x>
 baa:	c4 cf       	rjmp	.-120    	; 0xb34 <__fp_round>
 bac:	b5 df       	rcall	.-150    	; 0xb18 <__fp_pscA>
 bae:	28 f0       	brcs	.+10     	; 0xbba <__mulsf3+0x12>
 bb0:	ba df       	rcall	.-140    	; 0xb26 <__fp_pscB>
 bb2:	18 f0       	brcs	.+6      	; 0xbba <__mulsf3+0x12>
 bb4:	95 23       	and	r25, r21
 bb6:	09 f0       	breq	.+2      	; 0xbba <__mulsf3+0x12>
 bb8:	a6 cf       	rjmp	.-180    	; 0xb06 <__fp_inf>
 bba:	ab cf       	rjmp	.-170    	; 0xb12 <__fp_nan>
 bbc:	11 24       	eor	r1, r1
 bbe:	ee cf       	rjmp	.-36     	; 0xb9c <__fp_szero>

00000bc0 <__mulsf3x>:
 bc0:	ca df       	rcall	.-108    	; 0xb56 <__fp_split3>
 bc2:	a0 f3       	brcs	.-24     	; 0xbac <__mulsf3+0x4>

00000bc4 <__mulsf3_pse>:
 bc4:	95 9f       	mul	r25, r21
 bc6:	d1 f3       	breq	.-12     	; 0xbbc <__mulsf3+0x14>
 bc8:	95 0f       	add	r25, r21
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	55 1f       	adc	r21, r21
 bce:	62 9f       	mul	r22, r18
 bd0:	f0 01       	movw	r30, r0
 bd2:	72 9f       	mul	r23, r18
 bd4:	bb 27       	eor	r27, r27
 bd6:	f0 0d       	add	r31, r0
 bd8:	b1 1d       	adc	r27, r1
 bda:	63 9f       	mul	r22, r19
 bdc:	aa 27       	eor	r26, r26
 bde:	f0 0d       	add	r31, r0
 be0:	b1 1d       	adc	r27, r1
 be2:	aa 1f       	adc	r26, r26
 be4:	64 9f       	mul	r22, r20
 be6:	66 27       	eor	r22, r22
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	66 1f       	adc	r22, r22
 bee:	82 9f       	mul	r24, r18
 bf0:	22 27       	eor	r18, r18
 bf2:	b0 0d       	add	r27, r0
 bf4:	a1 1d       	adc	r26, r1
 bf6:	62 1f       	adc	r22, r18
 bf8:	73 9f       	mul	r23, r19
 bfa:	b0 0d       	add	r27, r0
 bfc:	a1 1d       	adc	r26, r1
 bfe:	62 1f       	adc	r22, r18
 c00:	83 9f       	mul	r24, r19
 c02:	a0 0d       	add	r26, r0
 c04:	61 1d       	adc	r22, r1
 c06:	22 1f       	adc	r18, r18
 c08:	74 9f       	mul	r23, r20
 c0a:	33 27       	eor	r19, r19
 c0c:	a0 0d       	add	r26, r0
 c0e:	61 1d       	adc	r22, r1
 c10:	23 1f       	adc	r18, r19
 c12:	84 9f       	mul	r24, r20
 c14:	60 0d       	add	r22, r0
 c16:	21 1d       	adc	r18, r1
 c18:	82 2f       	mov	r24, r18
 c1a:	76 2f       	mov	r23, r22
 c1c:	6a 2f       	mov	r22, r26
 c1e:	11 24       	eor	r1, r1
 c20:	9f 57       	subi	r25, 0x7F	; 127
 c22:	50 40       	sbci	r21, 0x00	; 0
 c24:	8a f0       	brmi	.+34     	; 0xc48 <__mulsf3_pse+0x84>
 c26:	e1 f0       	breq	.+56     	; 0xc60 <__mulsf3_pse+0x9c>
 c28:	88 23       	and	r24, r24
 c2a:	4a f0       	brmi	.+18     	; 0xc3e <__mulsf3_pse+0x7a>
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	bb 1f       	adc	r27, r27
 c32:	66 1f       	adc	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	91 50       	subi	r25, 0x01	; 1
 c3a:	50 40       	sbci	r21, 0x00	; 0
 c3c:	a9 f7       	brne	.-22     	; 0xc28 <__mulsf3_pse+0x64>
 c3e:	9e 3f       	cpi	r25, 0xFE	; 254
 c40:	51 05       	cpc	r21, r1
 c42:	70 f0       	brcs	.+28     	; 0xc60 <__mulsf3_pse+0x9c>
 c44:	60 cf       	rjmp	.-320    	; 0xb06 <__fp_inf>
 c46:	aa cf       	rjmp	.-172    	; 0xb9c <__fp_szero>
 c48:	5f 3f       	cpi	r21, 0xFF	; 255
 c4a:	ec f3       	brlt	.-6      	; 0xc46 <__mulsf3_pse+0x82>
 c4c:	98 3e       	cpi	r25, 0xE8	; 232
 c4e:	dc f3       	brlt	.-10     	; 0xc46 <__mulsf3_pse+0x82>
 c50:	86 95       	lsr	r24
 c52:	77 95       	ror	r23
 c54:	67 95       	ror	r22
 c56:	b7 95       	ror	r27
 c58:	f7 95       	ror	r31
 c5a:	e7 95       	ror	r30
 c5c:	9f 5f       	subi	r25, 0xFF	; 255
 c5e:	c1 f7       	brne	.-16     	; 0xc50 <__mulsf3_pse+0x8c>
 c60:	fe 2b       	or	r31, r30
 c62:	88 0f       	add	r24, r24
 c64:	91 1d       	adc	r25, r1
 c66:	96 95       	lsr	r25
 c68:	87 95       	ror	r24
 c6a:	97 f9       	bld	r25, 7
 c6c:	08 95       	ret

00000c6e <puts>:
 c6e:	0f 93       	push	r16
 c70:	1f 93       	push	r17
 c72:	cf 93       	push	r28
 c74:	df 93       	push	r29
 c76:	e0 91 45 02 	lds	r30, 0x0245
 c7a:	f0 91 46 02 	lds	r31, 0x0246
 c7e:	23 81       	ldd	r18, Z+3	; 0x03
 c80:	21 ff       	sbrs	r18, 1
 c82:	1b c0       	rjmp	.+54     	; 0xcba <puts+0x4c>
 c84:	ec 01       	movw	r28, r24
 c86:	00 e0       	ldi	r16, 0x00	; 0
 c88:	10 e0       	ldi	r17, 0x00	; 0
 c8a:	89 91       	ld	r24, Y+
 c8c:	60 91 45 02 	lds	r22, 0x0245
 c90:	70 91 46 02 	lds	r23, 0x0246
 c94:	db 01       	movw	r26, r22
 c96:	18 96       	adiw	r26, 0x08	; 8
 c98:	ed 91       	ld	r30, X+
 c9a:	fc 91       	ld	r31, X
 c9c:	19 97       	sbiw	r26, 0x09	; 9
 c9e:	88 23       	and	r24, r24
 ca0:	31 f0       	breq	.+12     	; 0xcae <puts+0x40>
 ca2:	19 95       	eicall
 ca4:	89 2b       	or	r24, r25
 ca6:	89 f3       	breq	.-30     	; 0xc8a <puts+0x1c>
 ca8:	0f ef       	ldi	r16, 0xFF	; 255
 caa:	1f ef       	ldi	r17, 0xFF	; 255
 cac:	ee cf       	rjmp	.-36     	; 0xc8a <puts+0x1c>
 cae:	8a e0       	ldi	r24, 0x0A	; 10
 cb0:	19 95       	eicall
 cb2:	89 2b       	or	r24, r25
 cb4:	11 f4       	brne	.+4      	; 0xcba <puts+0x4c>
 cb6:	c8 01       	movw	r24, r16
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <puts+0x50>
 cba:	8f ef       	ldi	r24, 0xFF	; 255
 cbc:	9f ef       	ldi	r25, 0xFF	; 255
 cbe:	df 91       	pop	r29
 cc0:	cf 91       	pop	r28
 cc2:	1f 91       	pop	r17
 cc4:	0f 91       	pop	r16
 cc6:	08 95       	ret

00000cc8 <_exit>:
 cc8:	f8 94       	cli

00000cca <__stop_program>:
 cca:	ff cf       	rjmp	.-2      	; 0xcca <__stop_program>
